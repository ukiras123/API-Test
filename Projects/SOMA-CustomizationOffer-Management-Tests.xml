<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e649b1a4-8605-44bd-966a-aa197a79d344" activeEnvironment="CI" name="P02 - SOMA Customization Offer Management Automation" resourceRoot="" soapui-version="5.1.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="TestSuite Report"/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\test</con:setting></con:settings><con:interface xsi:type="con:RestService" id="59bc47e6-3118-45bd-bdcf-b96492739d89" wadlVersion="http://wadl.dev.java.net/2009/02" name="Customization-SpecifiedOfferAPI" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#endpoint}</con:endpoint></con:endpoints><con:resource name="C333K" path="/snapshot/customizationoffers/{OfferId}" id="35591069-7a04-4a32-90c4-d7304e4b896d"><con:settings/><con:parameters><con:parameter><con:name>OfferId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Customizationoffers" id="092e863c-4b38-4198-9752-988cfcbe9746" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element>snapshot</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>410 404 500</con:status><con:params/><con:element xmlns:ns="http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501">ns:error</con:element></con:representation><con:request name="Request 1" id="870514a4-99a7-4239-be0f-cd5abde53c03" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers/C333K</con:originalUri><con:credentials><con:username>rpapala_con</con:username><con:password>RPgr2014</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="OfferId" value="GYB334R" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>OfferId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="ce07acc1-37fd-4396-910e-4f6849588d6e" wadlVersion="http://wadl.dev.java.net/2009/02" name="Customization-SearchOfferAPI" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#endpoint}</con:endpoint></con:endpoints><con:resource name="Customizationoffers" path="/snapshot/customizationoffers" id="edd6fea7-8b6f-4b24-9377-92e5c804caee"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>status:eq(A)</con:value><con:style>QUERY</con:style><con:default>status:eq(A)</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Customizationoffers" id="625bf964-3780-4942-ac08-2684c8ed9ff2" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ns="http://ws.guthy-renker.com/error/201407">ns:error</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element>snapshots</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>406 400</con:status><con:params/></con:representation><con:request name="Request 1" id="121d3c0d-12f1-431f-ba48-55da141e3862" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:credentials><con:username>rpapala_con</con:username><con:password>RPgr2014</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="3afa7299-60c2-48a5-b1c1-c80e1152bb3a" wadlVersion="http://wadl.dev.java.net/2009/02" name="Customization-ChangedOfferAPI" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#endpoint}</con:endpoint></con:endpoints><con:resource name="Customizationoffers" path="/snapshot/customizationoffers" id="59eb8614-95d1-4bb4-83c6-423e272cbbd0"><con:settings/><con:parameters><con:parameter><con:name>changed_after</con:name><con:value>2015-03-01T13:50:00</con:value><con:style>QUERY</con:style><con:default>2015-03-01T13:50:00</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Customizationoffers" id="9d0590f5-16db-4465-bfa9-4465142c41a7" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element>snapshots</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500 400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:credentials><con:username>rpapala_con</con:username><con:password>RPgr2014</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="2015-04-01T13:50:00" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="c77e1860-93c5-40b1-aa9d-6b64bb00d2d9" name="TS01 -Changed Customization Offer - General Tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e9516709-822c-45d1-9426-384be65b6e3f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC00 - LOAD CHANGED OFFER DATA" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="e8e90136-c0ef-47b6-8a37-fcbf4bea60ed"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat


// Initialize Setup Database
context.procs.call("{call qa_price_kit.initialize_kit_customization}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from CUSTOMIZATION_OFFERS')
log.info "Confirming Setup database is reset for customized offers. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa_price_kit.initialize_snapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_CUSTOMIZATION_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete for customized offers Num Of Rows in Setup DB : " + row1.get(0)[0] 

</script></con:config></con:testStep><con:testStep type="groovy" name="SetTestDataInputFile" id="d76446b1-0d74-41ff-accc-aadcf869ff0a"><con:settings/><con:config><script>context.testDataLoadMOfferSearch </script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="3e32ea55-3538-4b86-8de3-9d7fd54f8a48"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>loaddata</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>C_Offer_Code</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="AddCustomizationOffer" id="98ed1767-a8ec-4d71-8d18-c2d77e4f0644"><con:settings/><con:config><script>// Get test data from data source
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )
log.info "Customized Offer_Code is: " + c_Offer_Code 

// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa_price_kit.add_customization(?)}", [c_Offer_Code] ) { result ->
log.info "Oracle SP Call 'qa_price_kit.add_customization' result is: " + result
		}

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="0522c5f5-17c9-494c-bdd5-2d8ed8be71a0"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>AddCustomizationOffer</targetStep></con:config></con:testStep><con:testStep type="groovy" name="ReplicateToSepUpSnapShot" id="4e6c0aae-4ce0-4104-9179-52e3234902ef"><con:settings/><con:config><script>

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

def tcName = testRunner.testCase.name 
context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\CustomizationOffer\\" + tcName+ ".xlsx"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 








</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a59bc583-9145-4dad-8308-e8eb1569b147</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f3418a1-e5f3-4055-9bb0-d823cb1f2f35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="12889ad7-2180-4791-9b9d-7548c3551dbf" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC01 - CHANGED STANDARDS VALIDATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="ChangedOfferRestRequest" id="e4fda774-f1a0-46f7-8ec6-c3e4afe556a6"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ChangedOfferRestRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="34aed4b0-d43b-400a-997a-0a6258959f81" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="70b284bb-638a-41b7-af1d-580755effed6" name="Check count of [CustomizedOffers]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
count( //ns1:snapshots[1]/ns1:customizationOffers[1])</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="ee9256d3-68b1-4994-89ce-00813f0348e2" name="Check for existance of [currentAsOf]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
exists(//ns1:snapshots[1]/ns1:currentAsOf[1])</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="8a66fbe9-656a-4de7-8229-f1128381a09a" name="Check for existance of [Query]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
exists(//ns1:snapshots[1]/@query)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Customized Offers From Response" id="4b37b977-e0c4-4f26-a8df-fb0318de6072"><con:settings/><con:config><script>// Obtain API response into a variable
def response = context.expand( '${ChangedOfferRestRequest#Response}' )

//put reposne in contex
context.setProperty("xmlResponse", response)

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response) 

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

//to get name space
//def nsRoot = new XmlParser(false, false).parseText(response)

// set name space in contect
//context.setProperty("grNameSpace", nsRoot.@'xmlns')

// Now get all 'marketingOffers' nodes
def allCustomizationOffers = root.customizationOffers // Remembr root is "snapshots" for Change API response XML

// Now get all 'marketingOffers' nodes
//def testCustomizedOffers =  allCustomizationOffers.customizationOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("allCustomizationOffers",  allCustomizationOffers)
//context.setProperty("xidx",  0)
//context.setProperty("xtotal",  testOffers.size())


</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Default Response Content Type" id="2e17a7c7-b0c0-4f83-ad5b-0a5966124324"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>19dc9c9b-8086-4c51-b985-faadde82c214</con:id><con:isGroup>false</con:isGroup><con:sourceId>e4fda774-f1a0-46f7-8ec6-c3e4afe556a6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="47f9b29d-54a2-4e17-b671-5e74486745a4"><con:configuration><scriptText>// To validate API response headers
def expVal =  messageExchange.modelItem.testCase.testSteps['ChangedOfferRestRequest'].testRequest.response.getResponseHeaders()["Content-Type"][0]
def actVal = "application/xml"
log.info " [EXPECTED | ACTUAL] - [Default Content Type] - [Expected = $expVal | Actual = $actVal ]"
assert expVal == actVal : "Default Content Type Not Valid"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Current As Of is in UTC" id="186a512d-5d57-47f1-8035-76ac0a3d719b"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>3fd4e48a-40ec-4c8f-a29a-9f638c22a35d</con:id><con:isGroup>false</con:isGroup><con:sourceId>e4fda774-f1a0-46f7-8ec6-c3e4afe556a6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="399a865e-e6bf-48f7-9bc2-b9ad53de7cba"><con:configuration><scriptText>def root = context.xmlRoot
// Get actual 'currentAsOf' from the parsed response
def actVal = root.currentAsOf.text()

// Define expected value
def expVal = "Z"

log.info " [EXPECTED | ACTUAL] - [Element: currentAsOf] - [Expected = $expVal | Actual = $actVal ]"

assert actVal.endsWith('Z'): "Expected = Z | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Name Space" id="8c2dfc52-a5c8-4d84-9aaf-21f8002638f9"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>c14c2529-e7ab-4093-9d6b-3d06abc80a15</con:id><con:isGroup>false</con:isGroup><con:sourceId>e4fda774-f1a0-46f7-8ec6-c3e4afe556a6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="1252c08c-ad17-41cd-85f7-bc8f8c925bed"><con:configuration><scriptText>//to get name space
def nsRoot = new XmlParser(false, false).parseText(context.xmlResponse)

// get name space 
def actVal = nsRoot.@'xmlns'

def expVal ='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'

log.info " [EXPECTED | ACTUAL] - [Element: NameSPace]  - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript>import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="53a16cc3-0d7b-4d14-9baf-5abd5ad8698d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC02 - CHANGED POSITIVE TESTS" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="6b4399ce-b96a-4346-976e-eb0dbf4b928d"><con:settings/><con:config><script>//testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))

//log.info "after bb "+context.expand( '${#Project#s_after}' )</script></con:config></con:testStep><con:testStep type="restrequest" name="REST Test Request" id="1140576e-7710-465f-b967-d92ecad01506"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Test Request" id="7596a68e-bd12-4d1e-ba9d-e257e2acfaf8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding/><con:endpoint>http://cs-customizationoffer.cloudhub.io</con:endpoint><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="13f8e468-2db4-48f0-ab3c-9b25d4032395" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rpapala_con</con:username><con:password>RPgr2014</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>false</con:preemptive><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Rest Response" id="c5f5f424-28ce-46de-a314-3791297a44f8"><con:settings/><con:config><script>// Obtain API response into a variable
def responseAsXml = context.expand( '${REST Test Request#ResponseAsXml}' )

//put reposne in contex

context.setProperty("xmlCusChangedOfferResponse", responseAsXml)</script></con:config></con:testStep><con:testStep type="assertionteststep" name="ChangedCustomizationOfferSchemaValidation" id="5febb5d4-d9c8-4417-bd99-449cf256775d"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>b5411d2f-7357-45a5-b42a-158eaed5383f</con:id><con:isGroup>false</con:isGroup><con:sourceId>c5f5f424-28ce-46de-a314-3791297a44f8</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0fab27d2-3956-474a-af6c-8249046f913c"><con:configuration><scriptText>import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory
import groovy.util.*
import java.io.File	// You need Java File utils

String response = context.xmlCusChangedOfferResponse

// Get XSD File Location
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def Path = new File(projectFilePath).getParentFile()
def projectPath = Path.toString()
def sourcePath = new File(projectPath).getParentFile()
def xsdFile = sourcePath.toString() + "/XSD/customization-offer-schema.xsd"
log.info "XSD File Name is: " + xsdFile


try{
new File(xsdFile).withReader { xsd ->
  SchemaFactory.newInstance( XMLConstants.W3C_XML_SCHEMA_NS_URI )
               .newSchema( new StreamSource( xsd ) )
               .newValidator()
               .validate( new StreamSource( new StringReader( response ) ) )               
     log.info "Customization Changed Offer API Schema Validation Success"
     assert true 
} } catch (Throwable e)
	{
		log.info "Exception while validating XSD Schema ..."+e.getMessage()
		assert false : "Expected =Customization Changed Offer API Schema Validation Success | Actual = $e"
	}


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript>





</con:setupScript><con:properties/><con:reportParameters/></con:testCase><con:testCase id="e4fec366-a9d3-414b-a81a-97d9b7bdf2bf" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC03 - VERIFY EXISTENCE CHANGED CUSTOMIZATION OFFERS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="092ec8c0-40e2-45cb-9eeb-6f6b97b44608"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="restrequest" name="CustomizedChangedOfferRequest" id="45885dc2-3206-4d7c-8965-c27cf384cc28"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizedChangedOfferRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cbc16d55-7cda-4d82-a969-711751a62dce" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rpapala_con</con:username><con:password>RPgr2014</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Customized Offers From Response" id="c7435914-c83f-457a-bc5e-13dc4fa5d041"><con:settings/><con:config><script>// Obtain API response into a variable
def response = context.expand( '${CustomizedChangedOfferRequest#Response}' )

//put reposne in contex
//context.setProperty("xmlResponse", response)

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response) 
// Put the root in the 'context'

//context.setProperty("xmlRoot", root)
// Now get all 'marketingOffers' nodes

def allCustomizationOffers = root.customizationOffers // Remembr root is "snapshots" for Change API response XML

// Keep the test offer in context to allow other steps access it
context.setProperty("allCustomizationOffers",  allCustomizationOffers)


</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of status" id="a9cf8aa7-f728-4bbf-b3c5-4927b7e5090d"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [Status] = Element presence: "+ testOffer.status.size() + " | Element Data: "+ testOffer.status.text()

// Check if the element is present 
assert 1 == testOffer.status.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of description" id="273571cb-969b-4554-a16e-aa18c8064013"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [description] = Element presence: "+ testOffer.description.size() + " | Element Data: "+ testOffer.description.text()

// Check if the element is present 
assert 1 == testOffer.description.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of hostProductLineCode" id="8be99427-dd68-483e-9910-166030277460"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [hostProductLineCode] = Element presence: "+ testOffer.hostProductLineCode.size() + " | Element Data: "+ testOffer.hostProductLineCode.text()

// Check if the element is present 
assert 1 == testOffer.hostProductLineCode.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of startDate" id="e4ca0638-0134-4117-953d-725be4b086b5"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [startDate] = Element presence: "+ testOffer.startDate.size() + " | Element Data: "+ testOffer.startDate.text()

// Check if the element is present 
assert 1 == testOffer.startDate.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of endDate" id="4a57baad-8ac5-42a4-b8fc-47e6992c4851"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [endDate] = Element presence: "+ testOffer.endDate.size() + " | Element Data: "+ testOffer.endDate.text()

// Check if the element is present 
assert 1 == testOffer.endDate.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of priceGroupId" id="4f1b0252-336f-4397-8ab1-0f80c6ff3246"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [priceGroupId] = Element presence: "+ testOffer.priceGroupId.size() + " | Element Data: "+ testOffer.priceGroupId.text()

// Check if the element is present 
assert 1 == testOffer.priceGroupId.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of totalQuantity" id="76341333-f38d-42fe-b88d-3eb189ae5120"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [totalQuantity] = Element presence: "+ testOffer.totalQuantity.size() + " | Element Data: Max "+ testOffer.totalQuantity.@max +" , Min "+ testOffer.totalQuantity.@min

// Check if the element is present 
assert 1 == testOffer.totalQuantity.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of selectionGroups" id="e891853b-2ef2-48bf-927e-8590439f718f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [selectionGroups] = Element presence: "+ testOffer.selectionGroups.size()

// Check if the element is present 
assert 1 == testOffer.selectionGroups.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of selectionGroup" id="bd97b99a-0c81-45ca-8838-89b9608c04c9"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [selectionGroups.selectionGroup] = Element presence: "+ testOffer.selectionGroups.selectionGroup.size()

// Check if the element is present 
assert 1 == testOffer.selectionGroups.selectionGroup.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of kitItem" id="07a65a4e-433c-42ad-a61d-20640d15531a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]
log.info "[EXPECTED | ACTUAL] - [selectionGroups.selectionGroup.kitItem] = Element presence: "+ testOffer.selectionGroups.selectionGroup.kitItem.size()

// Check if the element is present 

if (testOffer.selectionGroups.selectionGroup.kitItem.size() > 0)
assert true

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of inclusion" id="56dcf3c8-0838-4e52-88a2-64705364c5c1"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]
def kitItem = testOffer.selectionGroups.selectionGroup.kitItem[0]

log.info "[EXPECTED | ACTUAL] - [kitItem.inclusion] = Element presence: "+ kitItem.inclusion.size() + " | Element Data: "+ kitItem.inclusion.text()

// Check if the element is present 
assert 1 == kitItem.inclusion.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of productId" id="d23852d7-874e-4fc5-a5d2-95f0c1f6e113"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]
def kitItem = testOffer.selectionGroups.selectionGroup.kitItem[0]

log.info "[EXPECTED | ACTUAL] - [kitItem.productId] = Element presence: "+ kitItem.productId.size() + " | Element Data: "+ kitItem.productId.text()

// Check if the element is present 
assert 1 == kitItem.productId.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of Kititem.description" id="fc56fd26-b628-4416-9f93-573d590631a6"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]
def kitItem = testOffer.selectionGroups.selectionGroup.kitItem[0]

log.info "[EXPECTED | ACTUAL] - [kitItem.description] = Element presence: "+ kitItem.description.size() + " | Element Data: "+ kitItem.description.text()

// Check if the element is present 
assert 1 == kitItem.description.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of kitPricing" id="227cb0f5-a13a-4137-a72e-f97b166caffc"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [kitPricing] = Element presence: "+ testOffer.kitPricing.size()

// Check if the element is present 
assert 1 == testOffer.kitPricing.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of kitPricing.currency" id="01f461c7-65d8-4075-8c2c-de7f0c88d59c"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

def actVal = testOffer.kitPricing.@currency

def expVal = "USD"

log.info " [EXPECTED | ACTUAL] - [Element: kitPricing.currency] - [[Expected = $expVal | Actual = $actVal ]"
assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of omxData" id="685bd5a4-544d-4411-b8f1-8bbf0dcf421d"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>45885dc2-3206-4d7c-8965-c27cf384cc28</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [omxData] = Element presence: "+ testOffer.omxData.size() + " | cid: "+ testOffer.omxData.@cid


// Check if the element is present 
assert 1 == testOffer.omxData.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a9cf8aa7-f728-4bbf-b3c5-4927b7e5090d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>273571cb-969b-4554-a16e-aa18c8064013</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fc56fd26-b628-4416-9f93-573d590631a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>01f461c7-65d8-4075-8c2c-de7f0c88d59c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="0fbc5967-308a-4940-83e1-04c33189a4e3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC04 - CHANGED NEGATIVE TESTS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test script is intended to verify error messages and HTTP error codes when an invalid date paraemeter is passed to Changed Offer API.

This script verifies following:
1) Error message and HTTP code when an invalid date is passed.
2) Error message and HTTP code when a too-old date is passed.
3) Error message and HTTP code when a future date is passed.</con:description><con:settings/><con:testStep type="groovy" name="SetTestDataInputFile" id="7f5eafd4-531e-4a82-b88b-3a81013daf4e"><con:settings/><con:config><script>context.testDataFileXLSX</script></con:config></con:testStep><con:testStep type="datasource" name="GetInputDates" id="162ade92-64e8-4604-95af-4b4e4806659a"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>date</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>INVALID_DATE</con:property><con:property>OLDER_DATE</con:property><con:property>FUTURE_DATE</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Set Invalid Date Parameter" id="eb223e2e-61fe-4e75-922b-1759c3a5d0bb"><con:settings/><con:config><script>def invalid_date = context.expand( '${GetInputDates#INVALID_DATE}' )
testRunner.testCase.testSuite.project.setPropertyValue( "after", invalid_date)</script></con:config></con:testStep><con:testStep type="restrequest" name="ChangedOfferInvalidDateRequest" id="4a5faff6-739e-40a4-bd78-01214b31d0d6"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ChangedOfferInvalidDateRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4e50828c-1e0e-48f1-bd87-0e683066060e" name="Valid HTTP Status Codes"><con:configuration><codes>400,404,500</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Invalid Date error message" id="0c1e4b78-2cf5-4046-8e36-d3c627294201"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>0bfe4bf6-f74d-4fef-b6e7-7fcc2573ce66</con:id><con:isGroup>false</con:isGroup><con:sourceId>4a5faff6-739e-40a4-bd78-01214b31d0d6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="316b77a2-1f55-4555-8a89-98232a20bb75"><con:configuration><scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Obtain holder for the rsponse
def holder = groovyUtils.getXmlHolder( "ChangedOfferInvalidDateRequest#Response" )

// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501"

// Get the actual message
def actVal = holder.getNodeValue("ns1:error/ns1:message")

assert actVal.equals ("The query string is missing or improperly composed, or the timestamp is improperly formatted.")
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Set Too Old Date Parameter" id="c7d88d36-bf68-4d87-b069-7b34a2dedf8e"><con:settings/><con:config><script>def tooOldDate_date = context.expand( '${GetInputDates#OLDER_DATE}' )
testRunner.testCase.testSuite.project.setPropertyValue( "after", tooOldDate_date)</script></con:config></con:testStep><con:testStep type="restrequest" name="ChangedOfferOldDateRequest" id="9a2013a7-2b5a-40b4-9079-0f845b27e5e8"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ChangedOfferOldDateRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="14b198db-f743-4b45-8d27-3f445de13df2" name="Valid HTTP Status Codes"><con:configuration><codes>400,404,500</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Too Old Date error message" id="ce1eb547-5bcd-45bc-95f5-d58d204cdcc4"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>0bfe4bf6-f74d-4fef-b6e7-7fcc2573ce66</con:id><con:isGroup>false</con:isGroup><con:sourceId>4a5faff6-739e-40a4-bd78-01214b31d0d6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="316b77a2-1f55-4555-8a89-98232a20bb75"><con:configuration><scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Obtain holder for the rsponse
def holder = groovyUtils.getXmlHolder( "ChangedOfferOldDateRequest#Response" )

// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501"

// Get the actual message
def actVal = holder.getNodeValue("ns1:error/ns1:message")

assert actVal.equals ("The timestamp is further in the past than is maintained by the change records (currently 60 days).  No error is returned for a timestamp representing a future time.")
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Set Future Date Parameter" id="e2f6c268-5d9d-4239-9072-eb8ed62c166c"><con:settings/><con:config><script>def future_Date = context.expand( '${GetInputDates#FUTURE_DATE}' )
testRunner.testCase.testSuite.project.setPropertyValue( "after", future_Date)</script></con:config></con:testStep><con:testStep type="restrequest" name="ChangedOfferFutureDateRequest" id="2f0fe1ae-d7b2-4795-bc1d-c1eca69b5c7b"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ChangedOfferFutureDateRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1dfa671c-f1c2-45e4-8738-671823142bca" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Too future Date error message" id="9aec1d70-9287-49a9-a8a9-274063ca3d1f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>0bfe4bf6-f74d-4fef-b6e7-7fcc2573ce66</con:id><con:isGroup>false</con:isGroup><con:sourceId>4a5faff6-739e-40a4-bd78-01214b31d0d6</con:sourceId><con:propertyName>ResponseAsXml</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="316b77a2-1f55-4555-8a89-98232a20bb75"><con:configuration><scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Obtain holder for the rsponse
def holder = groovyUtils.getXmlHolder( "ChangedOfferFutureDateRequest#Response" )

// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"

// Get count of 'customizationOffer' nodes under 'customizationOffers' node.
def actVal = holder["count(//ns1:snapshots//ns1:customizationOffers/ns1:customizationOffer)"]
assert actVal.equals ("0") : "Expected = 0 | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="SetValidDataAfter" id="33b30b63-80f3-4309-a0c6-c4b54295ff3d"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))</script></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

def tdPath = sourcePath
def tcName = testRunner.testCase.name 
context.testDataFileXLSX = tdPath + "\\TestData\\CustomizationOffer\\" + tcName+ ".xlsx"
log.info "Test DATA File name ... "+context.testDataFileXLSX 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>0c1e4b78-2cf5-4046-8e36-d3c627294201</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9a2013a7-2b5a-40b4-9079-0f845b27e5e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e2f6c268-5d9d-4239-9072-eb8ed62c166c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="9c2439f9-fa30-42b5-95d0-3114e1742430" name="TS02 -Changed Customization Offer - Dynamic Tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="64671144-c43a-4f56-93c2-6984a88279ad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC01 - UPDATE-INCLUSION-TYPE-BASE" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="c0a11670-64cf-4dd5-9c8f-da1bccbe446f"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Initialize Setup Database
context.procs.call("{call qa_price_kit.initialize_kit_customization}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from CUSTOMIZATION_OFFERS')
log.info "Confirming Setup database is reset for customized offers. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa_price_kit.initialize_snapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_CUSTOMIZATION_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete for customized offers Num Of Rows in Setup DB : " + row1.get(0)[0] 

</script></con:config></con:testStep><con:testStep type="groovy" name="SetTestDataInputFile" id="8ac8f2db-7901-46ed-a631-4b713fc0c061"><con:settings/><con:config><script>context.testData </script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="3384c2ce-11d3-4b0f-92c6-6f8714d596de"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>incbase</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>C_Offer_Code</con:property><con:property>Base_Value</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="LoadCustomizationOffer" id="564a8678-854b-4369-9ae6-152f3eac2340"><con:settings/><con:config><script>import groovy.sql.Sql

// Get test data from data source
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )
log.info "Customized Offer_Code is: " + c_Offer_Code 

def base_Value = context.expand( '${DataSource#Base_Value}' )

// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa_price_kit.add_customization(?)}", [c_Offer_Code] ) { result ->
log.info "Oracle SP Call 'qa_price_kit.add_customization' result is: " + result
		}


//Update Customization Offer Inclusion Type Base Value
context.procs.call("{? = call QA_PRICE_KIT.update_inclusion_type_base(?,?)}", [Sql.VARCHAR,c_Offer_Code, base_Value] ) { result ->
log.info "Update Customization Offer Inclusion Type Base Value: " + result
		}
		

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="CustomizationOfferRequest" id="51fa5f40-c7b8-406f-a1e7-bf217f167ea3"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizationOfferRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81922642-004e-44a5-a5ec-ee74a98d1b80" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="98b02af9-693a-48b1-a7d0-112b013cb548" name="ValidateInclusionTypeBase"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:selectionGroups[1]/ns1:selectionGroup[1]/ns1:kitItem[1]/ns1:quantity[1]/@auto</path><content>${DataSource#Base_Value}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

context.testData = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-DYNAMIC-TESTDATA.xlsx"
log.info "Test DATA File name ... "+context.testData 








</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a59bc583-9145-4dad-8308-e8eb1569b147</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f3418a1-e5f3-4055-9bb0-d823cb1f2f35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="d7d004d0-1a40-4607-aefb-8dfefea29933" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC02 - UPDATE-INCLUSION-TYPE-MANDATORY" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="f002cb7c-13ca-4273-977d-00cd616f79c9"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Initialize Setup Database
context.procs.call("{call qa_price_kit.initialize_kit_customization}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from CUSTOMIZATION_OFFERS')
log.info "Confirming Setup database is reset for customized offers. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa_price_kit.initialize_snapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_CUSTOMIZATION_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete for customized offers Num Of Rows in Setup DB : " + row1.get(0)[0] 

</script></con:config></con:testStep><con:testStep type="groovy" name="SetTestDataInputFile" id="7a82d3c3-ad52-4822-918a-dd979cb308e2"><con:settings/><con:config><script>context.testData </script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="58e2bad6-41a4-44e0-9913-1f83cf16f9be"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>incminmax</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>C_Offer_Code</con:property><con:property>Min</con:property><con:property>Max</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="LoadCustomizationOffer" id="89c33b68-eb1a-45de-a9ce-5741391534dd"><con:settings/><con:config><script>import groovy.sql.Sql

// Get test data from data source
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )
log.info "Customized Offer_Code is: " + c_Offer_Code 

def min = context.expand( '${DataSource#Min}' )
def max = context.expand( '${DataSource#Max}' )


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa_price_kit.add_customization(?)}", [c_Offer_Code] ) { result ->
log.info "Oracle SP Call 'qa_price_kit.add_customization' result is: " + result
		}


//Update Customization Offer Inclusion Type Min and Max Value
context.procs.call("{? = call QA_PRICE_KIT.update_inclusion_type_mand(?,?,?)}", [Sql.VARCHAR,c_Offer_Code, min, max] ) { result ->
log.info "Update Customization Offer Inclusion Type Base Value: update_inclusion_type_mand " + result
		}
		

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="CustomizationOfferRequest" id="4e45c350-0651-43d4-aee3-2fc30833580b"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizationOfferRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81922642-004e-44a5-a5ec-ee74a98d1b80" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="ed1f4de9-c07e-4546-a93e-6f9863dcc2a8" name="ValidateMandatoryMinValue"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:selectionGroups[1]/ns1:selectionGroup[1]/ns1:kitItem[1]/ns1:quantity[1]/@min</path><content>${DataSource#Min}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="5f918895-3084-4ddd-92f2-c83916ff52aa" name="ValidateMandatoryMaxValue"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:selectionGroups[1]/ns1:selectionGroup[1]/ns1:kitItem[1]/ns1:quantity[1]/@max</path><content>${DataSource#Max}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

context.testData = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-DYNAMIC-TESTDATA.xlsx"
log.info "Test DATA File name ... "+context.testData 








</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a59bc583-9145-4dad-8308-e8eb1569b147</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f3418a1-e5f3-4055-9bb0-d823cb1f2f35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="c0bf1bbe-b4d4-4f0a-a70b-18c09f833f24" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC03 - ADD/REMOVE PRODUCT" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="2527730e-8596-47c2-ae57-b00afb78c8ac"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
def afterValue=new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
log.info "After.."+afterValue 
testRunner.testCase.testSuite.project.setPropertyValue("after",afterValue)	

// Initialize Setup Database
context.procs.call("{call qa_price_kit.initialize_kit_customization}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from CUSTOMIZATION_OFFERS')
log.info "Confirming Setup database is reset for customized offers. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa_price_kit.initialize_snapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_CUSTOMIZATION_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete for customized offers Num Of Rows in Setup DB : " + row1.get(0)[0] 

</script></con:config></con:testStep><con:testStep type="groovy" name="SetTestDataInputFile" id="7f3cc8e6-7980-4c05-b259-609cb2c944bb"><con:settings/><con:config><script>context.testData </script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="7280018a-dab7-4a69-aca0-3c73730c4e21"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>addremoveProduct</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>C_Offer_Code</con:property><con:property>Product</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="LoadCustomizationOffer" id="c1c2d1a8-79b1-45db-85ac-ebd56db5008d"><con:settings/><con:config><script>import groovy.sql.Sql

// Get test data from data source
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )
log.info "Customized Offer_Code is: " + c_Offer_Code 

def product = context.expand( '${DataSource#Product}' )

// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa_price_kit.add_customization(?)}", [c_Offer_Code] ) { result ->
log.info "Oracle SP Call 'qa_price_kit.add_customization' result is: " + result
		}


// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="CustomizationOfferRequest" id="e76c0987-e0fa-47e1-8822-c6900b2f59a4"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizationOfferRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81922642-004e-44a5-a5ec-ee74a98d1b80" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="8a0ef384-16ef-46ea-afd6-64b4a4077795" name="VerifyProductAvailable"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
count(//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:selectionGroups[1]/ns1:selectionGroup[1]/ns1:kitItem)</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RemoveProductFromOffer" id="becfc3f0-df75-4b93-9c14-1c2e7bda51a6"><con:settings/><con:config><script>import groovy.sql.Sql
def product = context.expand( '${DataSource#Product}' )
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )

//Remove Product from Customization Offer 
context.procs.call("{? = call QA_PRICE_KIT.remove_product_custom_offer(?,?)}", [Sql.VARCHAR,c_Offer_Code, product] ) { result ->
log.info "Remove Product from Customization Offer : remove_product_custom_offer " + result
		}

		
// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="RemoveProductRequest" id="6990c167-aaed-4b17-813f-77692968d3c4"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RemoveProductRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="24fce964-9591-4dff-9b0c-828d9eb3775d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="48dc78d0-6995-4aac-9ccc-37bf41f57fb0" name="ValidateProductRemoved"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
count(//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:selectionGroups[1]/ns1:selectionGroup[1]/ns1:kitItem)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="AddProductToOffer" id="56ceb713-1b7d-4c13-8015-d4f3a3218e54"><con:settings/><con:config><script>import groovy.sql.Sql
def product = context.expand( '${DataSource#Product}' )
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )

//Add Product to Customization Offer 
context.procs.call("{? = call QA_PRICE_KIT.add_product_custom_offer(?,?)}", [Sql.VARCHAR,c_Offer_Code, product] ) { result ->
log.info "Add Product to Customization Offer : add_product_custom_offer " + result
		}

		
// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="AddProductRequest" id="d145144e-cbed-49b4-9fbc-793c98835e3a"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddProductRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e9f136a4-6a9b-4cdd-9142-2b900efe8714" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="b607764f-5f79-404f-a8a5-8d7870a38631" name="AddProductToOffer"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
count(//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:selectionGroups[1]/ns1:selectionGroup[1]/ns1:kitItem)</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

context.testData = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-DYNAMIC-TESTDATA.xlsx"
log.info "Test DATA File name ... "+context.testData 








</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a59bc583-9145-4dad-8308-e8eb1569b147</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f3418a1-e5f3-4055-9bb0-d823cb1f2f35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="e759e95a-5d08-4812-9e87-70500e09cd0c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC04 -UPDATE-SHIPPING-TABLE" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="0373693f-0b4c-4f86-8800-c1bd4d56c54f"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Initialize Setup Database
context.procs.call("{call qa_price_kit.initialize_kit_customization}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from CUSTOMIZATION_OFFERS')
log.info "Confirming Setup database is reset for customized offers. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa_price_kit.initialize_snapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_CUSTOMIZATION_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete for customized offers Num Of Rows in Setup DB : " + row1.get(0)[0] 

</script></con:config></con:testStep><con:testStep type="groovy" name="SetTestDataInputFile" id="ca1e98d5-d497-445b-a177-a093c0947ff7"><con:settings/><con:config><script>context.testData </script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="64ff1efa-e988-4574-ac12-16c7bb723238"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>ushipping</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>C_Offer_Code</con:property><con:property>shipping_table</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="LoadCustomizationOffer" id="6d11f1d3-d975-40c8-9ca3-919597276cc6"><con:settings/><con:config><script>import groovy.sql.Sql

// Get test data from data source
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )
log.info "Customized Offer_Code is: " + c_Offer_Code 

def shipping_table = context.expand( '${DataSource#shipping_table}' )


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa_price_kit.add_customization(?)}", [c_Offer_Code] ) { result ->
log.info "Oracle SP Call 'qa_price_kit.add_customization' result is: " + result
		}


//Update Customization Offer Shipping Table
context.procs.call("{? = call QA_PRICE_KIT.update_custom_shipping_code(?,?)}", [Sql.VARCHAR,c_Offer_Code, shipping_table] ) { result ->
log.info "Update Customization Offer Shipping Table - update_custom_shipping_code : " + result
		}
		

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="CustomizationOfferRequest" id="8f47b85f-82f3-4068-a882-f4fbebd2220a"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizationOfferRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81922642-004e-44a5-a5ec-ee74a98d1b80" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="98b02af9-693a-48b1-a7d0-112b013cb548" name="ValidateShippingTableId"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:shippingTableId[1]</path><content>S33B</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

context.testData = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-DYNAMIC-TESTDATA.xlsx"
log.info "Test DATA File name ... "+context.testData 








</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a59bc583-9145-4dad-8308-e8eb1569b147</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f3418a1-e5f3-4055-9bb0-d823cb1f2f35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="b5853656-7ea5-45a3-bbb0-cce985fd27fb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC04 -UPDATE-FLOOR-PRICE" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="ce9f2a97-04a2-4105-a53a-77b65e022a7b"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Initialize Setup Database
context.procs.call("{call qa_price_kit.initialize_kit_customization}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from CUSTOMIZATION_OFFERS')
log.info "Confirming Setup database is reset for customized offers. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa_price_kit.initialize_snapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_CUSTOMIZATION_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete for customized offers Num Of Rows in Setup DB : " + row1.get(0)[0] 

</script></con:config></con:testStep><con:testStep type="groovy" name="SetTestDataInputFile" id="8cd857b0-b55a-4727-807b-6206d57a4d7a"><con:settings/><con:config><script>context.testData </script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="a8aac2e3-9ef9-4ea3-b8b2-146942068e04"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>ufloor</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>C_Offer_Code</con:property><con:property>price</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="LoadCustomizationOffer" id="f072dcf9-9ff4-4505-832f-51480444e27e"><con:settings/><con:config><script>import groovy.sql.Sql

// Get test data from data source
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )
log.info "Customized Offer_Code is: " + c_Offer_Code 

def price = context.expand( '${DataSource#price}' ) 

// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa_price_kit.add_customization(?)}", [c_Offer_Code] ) { result ->
log.info "Oracle SP Call 'qa_price_kit.add_customization' result is: " + result
		}

//Update Customization Offer floor price
context.procs.call("{? = call QA_PRICE_KIT.update_custom_floor_price(?,?)}", [Sql.VARCHAR,c_Offer_Code, price] ) { result ->
log.info "Update Customization Offer floor price - update_custom_floor_price : " + result
		}
		
// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="CustomizationOfferRequest" id="c476aaa7-6b28-47e6-b9bd-c89a550a6f84"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizationOfferRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81922642-004e-44a5-a5ec-ee74a98d1b80" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="98b02af9-693a-48b1-a7d0-112b013cb548" name="ValidateUpdatedFloorPrice"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:kitPricing[1]/ns1:floorPrice[1]</path><content>${DataSource#price}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

context.testData = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-DYNAMIC-TESTDATA.xlsx"
log.info "Test DATA File name ... "+context.testData 








</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a59bc583-9145-4dad-8308-e8eb1569b147</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f3418a1-e5f3-4055-9bb0-d823cb1f2f35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="fdd396d4-a78b-460d-a4a7-4a3a410a40bd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC04 -UPDATE-ADJUSTMENT-PRICE" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="3ad1da51-3312-4e0f-8409-c30692d13dca"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Initialize Setup Database
context.procs.call("{call qa_price_kit.initialize_kit_customization}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from CUSTOMIZATION_OFFERS')
log.info "Confirming Setup database is reset for customized offers. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa_price_kit.initialize_snapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_CUSTOMIZATION_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete for customized offers Num Of Rows in Setup DB : " + row1.get(0)[0] 

</script></con:config></con:testStep><con:testStep type="groovy" name="SetTestDataInputFile" id="22fd484e-c88c-43bf-97fd-f527fd5e75ce"><con:settings/><con:config><script>context.testData </script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="af25dc40-940e-4ed1-b5cd-74ea4d98af21"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>uadjustment</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>C_Offer_Code</con:property><con:property>price</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="LoadCustomizationOffer" id="02f47abe-cc90-41c8-a8e5-9654adbea60d"><con:settings/><con:config><script>import groovy.sql.Sql

// Get test data from data source
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )
log.info "Customized Offer_Code is: " + c_Offer_Code 

def price = context.expand( '${DataSource#price}' ) 

// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa_price_kit.add_customization(?)}", [c_Offer_Code] ) { result ->
log.info "Oracle SP Call 'qa_price_kit.add_customization' result is: " + result
		}

//Update Customization Offer adjustment price
context.procs.call("{? = call QA_PRICE_KIT.update_custom_adj_amt(?,?)}", [Sql.VARCHAR,c_Offer_Code, price] ) { result ->
log.info "Update Customization Offer adjustment price - update_custom_adj_amt : " + result
		}
		
// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="CustomizationOfferRequest" id="0a30137e-668c-4296-b211-1ba51c4e2de9"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizationOfferRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81922642-004e-44a5-a5ec-ee74a98d1b80" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="98b02af9-693a-48b1-a7d0-112b013cb548" name="ValidateUpdatedAdjustmentPrice"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:kitPricing[1]/ns1:adjustmentAmount[1]</path><content>${DataSource#price}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

context.testData = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-DYNAMIC-TESTDATA.xlsx"
log.info "Test DATA File name ... "+context.testData 








</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a59bc583-9145-4dad-8308-e8eb1569b147</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f3418a1-e5f3-4055-9bb0-d823cb1f2f35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="9a36c791-87b0-47d1-bd25-163d5fb0a8ab" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC04 -UPDATE-DEFAULT-PRICE" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="b9ce287e-2766-479d-b2dc-ac8d29a684ad"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Initialize Setup Database
context.procs.call("{call qa_price_kit.initialize_kit_customization}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from CUSTOMIZATION_OFFERS')
log.info "Confirming Setup database is reset for customized offers. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa_price_kit.initialize_snapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_CUSTOMIZATION_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete for customized offers Num Of Rows in Setup DB : " + row1.get(0)[0] 

</script></con:config></con:testStep><con:testStep type="groovy" name="SetTestDataInputFile" id="1f44b6a3-a1b4-4442-a04e-e66fc4012507"><con:settings/><con:config><script>context.testData </script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="2281b91a-2709-444c-ae8d-b9dcfc45286e"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>udefault</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>C_Offer_Code</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="LoadCustomizationOffer" id="5c2de51e-eaba-4360-bc46-0c87f9912a15"><con:settings/><con:config><script>import groovy.sql.Sql

// Get test data from data source
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )
log.info "Customized Offer_Code is: " + c_Offer_Code 

// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa_price_kit.add_customization(?)}", [c_Offer_Code] ) { result ->
log.info "Oracle SP Call 'qa_price_kit.add_customization' result is: " + result
		}

//Update Customization Offer Default price
context.procs.call("{? = call QA_PRICE_KIT.update_pricing_rule(?)}", [Sql.VARCHAR,c_Offer_Code] ) { result ->
log.info "Update Customization Offer Default price - update_pricing_rule : " + result
		}
		
// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="CustomizationOfferRequest" id="826830ae-298b-4341-b11f-91cddfbe8c9c"><con:settings/><con:config service="Customization-ChangedOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizationOfferRequest" id="756969bf-b65c-40ba-bcd3-dc32fe7f8d05" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81922642-004e-44a5-a5ec-ee74a98d1b80" name="Valid HTTP Status Codes- 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="98b02af9-693a-48b1-a7d0-112b013cb548" name="ValidateUpdatedDefaultPrice-Adjustment"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
count(//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:kitPricing[1]/ns1:adjustmentAmount[1])</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="e0517434-50c9-44c9-86c7-b3bdfd83deec" name="ValidateUpdatedDefaultPrice-Floor"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
count(//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer[1]/ns1:kitPricing[1]/ns1:floorPrice[1])</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="changed_after" value="${#Project#after}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>changed_after</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

context.testData = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-DYNAMIC-TESTDATA.xlsx"
log.info "Test DATA File name ... "+context.testData 








</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a59bc583-9145-4dad-8308-e8eb1569b147</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f3418a1-e5f3-4055-9bb0-d823cb1f2f35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="286462aa-2da2-483f-b6c7-a57388923286" name="TS03 -Load Data-Customized-Search-Specified"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="3d313500-1468-4c50-b1e7-e8110580b2a6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC01 - LOAD SEARCH AND SPECIFIED DATA" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="ed1568b2-cd55-4880-8ff6-87e32ad4f560"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat


// Initialize Setup Database
context.procs.call("{call qa_price_kit.initialize_kit_customization}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from CUSTOMIZATION_OFFERS')
log.info "Confirming Setup database is reset for customized offers. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa_price_kit.initialize_snapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_CUSTOMIZATION_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete for customized offers Num Of Rows in Setup DB : " + row1.get(0)[0] 

</script></con:config></con:testStep><con:testStep type="groovy" name="SetTestDataInputFile" id="85a64f68-5f21-41e8-9075-e281cca1b3b2"><con:settings/><con:config><script>context.testDataLoadMOfferSearch </script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="72e5d8c4-ba2f-48ea-96e5-0bda730eafb0"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>loaddata</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>C_Offer_Code</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="AddCustomizationOffer" id="5b35aed1-812d-4c08-904a-4ba3a2084e8a"><con:settings/><con:config><script>// Get test data from data source
def c_Offer_Code = context.expand( '${DataSource#C_Offer_Code}' )
log.info "Customized Offer_Code is: " + c_Offer_Code 

// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa_price_kit.add_customization(?)}", [c_Offer_Code] ) { result ->
log.info "Oracle SP Call 'qa_price_kit.add_customization' result is: " + result
		}

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="29efd026-f861-45a0-a1e1-74d0003716ac"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>AddCustomizationOffer</targetStep></con:config></con:testStep><con:testStep type="groovy" name="ReplicateToSepUpSnapShot" id="18b5d2eb-173c-48f2-94fb-a31eefaed950"><con:settings/><con:config><script>

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

def tcName = testRunner.testCase.name 
context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\CustomizationOffer\\" + tcName+ ".xlsx"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 








</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a59bc583-9145-4dad-8308-e8eb1569b147</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f3418a1-e5f3-4055-9bb0-d823cb1f2f35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="54e7226b-5d76-4ff8-95c3-133d5a412f44" name="TS04 -Customized-Search General Tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a33d0c5b-bd15-4b8d-9ef4-bfb087115170" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC01 - SEARCH STANDARDS VALIDATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="SearchOfferRestRequest" id="71dfcdcf-ce00-4f0e-b3fc-3d357233e7de"><con:settings/><con:config service="Customization-SearchOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOfferRestRequest" id="121d3c0d-12f1-431f-ba48-55da141e3862" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0d8b0e3f-41f7-4b58-84f8-d89b5264e5f5" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="b49ae4e1-fc4b-4946-96b1-713c4ed46861" name="Check count of [CustomizedOffers]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
count( //ns1:snapshots[1]/ns1:customizationOffers[1])</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="af0e82e6-aa30-4abc-8ba2-6d24ef317d4f" name="Check for existance of [currentAsOf]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
exists(//ns1:snapshots[1]/ns1:currentAsOf[1])</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="21828930-f981-49bd-bb4e-9f10f6a39c37" name="Check for existance of [Query]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
exists( //ns1:snapshots[1]/@query)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="status:eq(V)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Customized Offers From Response" id="cba2f6b6-04d3-41e7-92e8-d46dc2a42d98"><con:settings/><con:config><script>// Obtain API response into a variable
def response = context.expand( '${SearchOfferRestRequest#Response}' )

//put reposne in contex
context.setProperty("xmlResponse", response)

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response) 

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

//to get name space
//def nsRoot = new XmlParser(false, false).parseText(response)

// set name space in contect
//context.setProperty("grNameSpace", nsRoot.@'xmlns')

// Now get all 'marketingOffers' nodes
def allCustomizationOffers = root.customizationOffers // Remembr root is "snapshots" for Change API response XML

// Now get all 'marketingOffers' nodes
//def testCustomizedOffers =  allCustomizationOffers.customizationOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("allCustomizationOffers",  allCustomizationOffers)
//context.setProperty("xidx",  0)
//context.setProperty("xtotal",  testOffers.size())


</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Default Response Content Type" id="bd25beef-93f0-4d67-9d60-2ce99ca9b4ae"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>3f163be1-e0a7-4916-b363-214a40aa1267</con:id><con:isGroup>false</con:isGroup><con:sourceId>71dfcdcf-ce00-4f0e-b3fc-3d357233e7de</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="00a8d5c7-2a42-4388-8778-dced5d5ee415"><con:configuration><scriptText>// To validate API response headers
def expVal =  messageExchange.modelItem.testCase.testSteps['SearchOfferRestRequest'].testRequest.response.getResponseHeaders()["Content-Type"][0]
def actVal = "application/xml"
log.info " [EXPECTED | ACTUAL] - [Default Content Type] - [Expected = $expVal | Actual = $actVal ]"
assert expVal == actVal : "Default Content Type Not Valid"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Current As Of is in UTC" id="57a4cc89-2e75-471e-aaa9-7e3f129eed0c"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>87645a99-edf1-4e5f-b616-9c3c6a65c773</con:id><con:isGroup>false</con:isGroup><con:sourceId>71dfcdcf-ce00-4f0e-b3fc-3d357233e7de</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8f757dbc-5d8f-476e-97e4-83a0737b5393"><con:configuration><scriptText>def root = context.xmlRoot
// Get actual 'currentAsOf' from the parsed response
def actVal = root.currentAsOf.text()

// Define expected value
def expVal = "Z"

log.info " [EXPECTED | ACTUAL] - [Element: currentAsOf] - [Expected = $expVal | Actual = $actVal ]"

assert actVal.endsWith('Z'): "Expected = Z | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Name Space" id="65944bee-f287-404f-ad7b-78e151e1d511"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>9aa3b9a2-19fa-4d3a-a4c8-a22ee1e3637d</con:id><con:isGroup>false</con:isGroup><con:sourceId>71dfcdcf-ce00-4f0e-b3fc-3d357233e7de</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="53165c34-0cc8-4cf5-993b-6d934b45587f"><con:configuration><scriptText>//to get name space
def nsRoot = new XmlParser(false, false).parseText(context.xmlResponse)

// get name space 
def actVal = nsRoot.@'xmlns'

def expVal ='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'

log.info " [EXPECTED | ACTUAL] - [Element: NameSPace]  - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript>import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71dfcdcf-ce00-4f0e-b3fc-3d357233e7de</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="da8cb341-2868-44f0-a796-0d1d619b571f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC02 - SEARCH POSITIVE TESTS" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="8eff77d7-1ee6-410a-8ea9-89c8e8501350"><con:settings/><con:config><script>//testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))

//log.info "after bb "+context.expand( '${#Project#s_after}' )</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchOfferRestRequest" id="b6360d3f-3a91-429a-b8fe-81ff03b208e7"><con:settings/><con:config service="Customization-SearchOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOfferRestRequest" id="121d3c0d-12f1-431f-ba48-55da141e3862" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0d8b0e3f-41f7-4b58-84f8-d89b5264e5f5" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="b49ae4e1-fc4b-4946-96b1-713c4ed46861" name="Check count of [CustomizedOffers]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
count( //ns1:snapshots[1]/ns1:customizationOffers[1])</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="af0e82e6-aa30-4abc-8ba2-6d24ef317d4f" name="Check for existance of [currentAsOf]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
exists(//ns1:snapshots[1]/ns1:currentAsOf[1])</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="21828930-f981-49bd-bb4e-9f10f6a39c37" name="Check for existance of [Query]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
exists( //ns1:snapshots[1]/@query)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="status:eq(V)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Rest Response" id="64b9975c-2dce-4cb6-9f38-819a68cce33d"><con:settings/><con:config><script>// Obtain API response into a variable
def responseAsXml = context.expand( '${SearchOfferRestRequest#ResponseAsXml}' )

//put reposne in contex

context.setProperty("xmlCusSearchOfferResponse", responseAsXml)</script></con:config></con:testStep><con:testStep type="assertionteststep" name="SearchCustomizationOfferSchemaValidation" id="83107431-8fb2-4239-a52d-c37dedc921eb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>b5411d2f-7357-45a5-b42a-158eaed5383f</con:id><con:isGroup>false</con:isGroup><con:sourceId>64b9975c-2dce-4cb6-9f38-819a68cce33d</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0fab27d2-3956-474a-af6c-8249046f913c"><con:configuration><scriptText>import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory
import groovy.util.*
import java.io.File	// You need Java File utils

String response = context.xmlCusSearchOfferResponse

// Get XSD File Location
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def Path = new File(projectFilePath).getParentFile()
def projectPath = Path.toString()
def sourcePath = new File(projectPath).getParentFile()
def xsdFile = sourcePath.toString() + "/XSD/customization-offer-schema.xsd"
log.info "XSD File Name is: " + xsdFile


try{
new File(xsdFile).withReader { xsd ->
  SchemaFactory.newInstance( XMLConstants.W3C_XML_SCHEMA_NS_URI )
               .newSchema( new StreamSource( xsd ) )
               .newValidator()
               .validate( new StreamSource( new StringReader( response ) ) )               
     log.info "Customization Changed Offer API Schema Validation Success"
     assert true 
} } catch (Throwable e)
	{
		log.info "Exception while validating XSD Schema ..."+e.getMessage()
		assert false : "Expected =Customization Changed Offer API Schema Validation Success | Actual = $e"
	}


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>b6360d3f-3a91-429a-b8fe-81ff03b208e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="fecc133c-a6c4-4f0e-b4e5-aa5a136c611f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC03 - SEARCH NEGATIVE TESTS" searchProperties="true"><con:settings/><con:testStep type="groovy" name="SetUpInputTestFile" id="a33b2e04-8a68-4203-8506-398c80639744"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="ad53af47-89a6-4db7-b04b-d09b7167e253"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>Negative</worksheet><cell>D2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>websearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="restrequest" name="REST Test Request" id="732c23d2-16b2-4b8e-a790-cf0169f8e2f8"><con:settings/><con:config service="Customization-SearchOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Test Request" mediaType="application/json" id="24f55fdb-4ff2-45d0-889f-d643aff8f75a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="XPath Match" name="Match content of [code]" id="f09d3372-ddc2-4701-b4a2-1bb332e47199"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
//ns1:error[1]/ns1:code[1]/text()</path><content>InvalidQueryString</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]" id="e27f9e94-f3b3-48fa-94fc-162adffdfb8a"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
//ns1:error[1]/ns1:message[1]/text()</path><content>The query string is missing or improperly composed, or the timestamp is improperly formatted.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="17e4743e-0848-4a3a-b3b2-fad01b90479a"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ffadeca0-d40c-494a-9934-f881fbab1fd1"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${DataSource#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="74fcea74-adfe-4b6b-a363-29b5f9b432c8"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>REST Test Request</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\CustomizationOffer\\" + "OFM-CUSTOMIZED-SEARCH-TESTDATA"+ ".xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/></con:testCase><con:testCase id="730055e8-82dd-4440-8970-7ecf812499bf" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC04 - VERIFY EXISTENCE SEARCH CUSTOMIZATION OFFERS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="4f3a1bf7-e3e7-4bec-914d-6e862a01e5bc"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="restrequest" name="CustomizedSearchOfferRequest" id="23f10b8b-51c4-4546-a7e1-3febf3ba62cb"><con:settings/><con:config service="Customization-SearchOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizedSearchOfferRequest" id="121d3c0d-12f1-431f-ba48-55da141e3862" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="57711db4-27cf-4907-901b-4d674a6a82d6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rpapala_con</con:username><con:password>RPgr2014</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="status:eq(V)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Customized Offers From Response" id="8da18dc6-0fa1-41ae-8581-ac8667a271b1"><con:settings/><con:config><script>// Obtain API response into a variable
def response = context.expand( '${CustomizedSearchOfferRequest#Response}' )

//put reposne in contex
//context.setProperty("xmlResponse", response)

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response) 
// Put the root in the 'context'

//context.setProperty("xmlRoot", root)
// Now get all 'marketingOffers' nodes

def allCustomizationOffers = root.customizationOffers // Remembr root is "snapshots" for Change API response XML

// Keep the test offer in context to allow other steps access it
context.setProperty("allCustomizationOffers",  allCustomizationOffers)


</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of status" id="e8208bee-ba8f-462d-8831-bf270e279418"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "testOffer.."+testOffer

log.info "[EXPECTED | ACTUAL] - [Status] = Element presence: "+ testOffer.status.size() + " | Element Data: "+ testOffer.status.text()

// Check if the element is present 
assert 1 == testOffer.status.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of description" id="00148511-ab85-489f-8db0-7aae9030b53a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [description] = Element presence: "+ testOffer.description.size() + " | Element Data: "+ testOffer.description.text()

// Check if the element is present 
assert 1 == testOffer.description.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of hostProductLineCode" id="d174b209-d3ec-4e64-ade3-0b00501ba2af"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [hostProductLineCode] = Element presence: "+ testOffer.hostProductLineCode.size() + " | Element Data: "+ testOffer.hostProductLineCode.text()

// Check if the element is present 
assert 1 == testOffer.hostProductLineCode.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of startDate" id="ac11d08b-b9c4-41b7-9fd2-e74d6edbd57f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [startDate] = Element presence: "+ testOffer.startDate.size() + " | Element Data: "+ testOffer.startDate.text()

// Check if the element is present 
assert 1 == testOffer.startDate.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of endDate" id="43858ff7-9ec1-4ca0-bed8-b2d3f0d5a7d7"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [endDate] = Element presence: "+ testOffer.endDate.size() + " | Element Data: "+ testOffer.endDate.text()

// Check if the element is present 
assert 1 == testOffer.endDate.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of priceGroupId" id="794188b6-2c26-413b-8fa4-f3cf69fb4f88"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [priceGroupId] = Element presence: "+ testOffer.priceGroupId.size() + " | Element Data: "+ testOffer.priceGroupId.text()

// Check if the element is present 
assert 1 == testOffer.priceGroupId.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of totalQuantity" id="0aece2d3-aa0a-4470-b9e3-636d21130196"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [totalQuantity] = Element presence: "+ testOffer.totalQuantity.size() + " | Element Data: Max "+ testOffer.totalQuantity.@max +" , Min "+ testOffer.totalQuantity.@min

// Check if the element is present 
assert 1 == testOffer.totalQuantity.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of selectionGroups" id="db256876-e4b4-48eb-a692-489c9dc2a62f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [selectionGroups] = Element presence: "+ testOffer.selectionGroups.size()

// Check if the element is present 
assert 1 == testOffer.selectionGroups.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of selectionGroup" id="36fbf16b-e93d-43f6-9916-d60e29de8bfa"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [selectionGroups.selectionGroup] = Element presence: "+ testOffer.selectionGroups.selectionGroup.size()

// Check if the element is present 
assert 1 == testOffer.selectionGroups.selectionGroup.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of kitItem" id="7a06badc-8966-4541-8d1d-fda47ca75018"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]
log.info "[EXPECTED | ACTUAL] - [selectionGroups.selectionGroup.kitItem] = Element presence: "+ testOffer.selectionGroups.selectionGroup.kitItem.size()

// Check if the element is present 

if (testOffer.selectionGroups.selectionGroup.kitItem.size() > 0)
assert true

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of inclusion" id="c3b884cd-17c5-48d6-acdd-e8db48e4123a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]
def kitItem = testOffer.selectionGroups.selectionGroup.kitItem[0]

log.info "[EXPECTED | ACTUAL] - [kitItem.inclusion] = Element presence: "+ kitItem.inclusion.size() + " | Element Data: "+ kitItem.inclusion.text()

// Check if the element is present 
assert 1 == kitItem.inclusion.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of productId" id="0e5f39cf-ddb2-44e3-bfd6-f02f81f62319"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]
def kitItem = testOffer.selectionGroups.selectionGroup.kitItem[0]

log.info "[EXPECTED | ACTUAL] - [kitItem.productId] = Element presence: "+ kitItem.productId.size() + " | Element Data: "+ kitItem.productId.text()

// Check if the element is present 
assert 1 == kitItem.productId.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of Kititem.description" id="d5e8089e-8f2c-42fb-adec-149373df9a78"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]
def kitItem = testOffer.selectionGroups.selectionGroup.kitItem[0]

log.info "[EXPECTED | ACTUAL] - [kitItem.description] = Element presence: "+ kitItem.description.size() + " | Element Data: "+ kitItem.description.text()

// Check if the element is present 
assert 1 == kitItem.description.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of kitPricing" id="e666c71b-edb5-4d40-b297-aedd5dc55842"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [kitPricing] = Element presence: "+ testOffer.kitPricing.size()

// Check if the element is present 
assert 1 == testOffer.kitPricing.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of kitPricing.currency" id="dd8e557d-8abf-4449-9eef-58ef9e4f6c6e"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

def actVal = testOffer.kitPricing.@currency

def expVal = "USD"

log.info " [EXPECTED | ACTUAL] - [Element: kitPricing.currency] - [[Expected = $expVal | Actual = $actVal ]"
assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of omxData" id="2d87b4a6-173a-4de1-8e72-0777921194e3"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>// Now get all 'customizationOffers' nodes
def allCustomizationOffers = context.allCustomizationOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first customization  Offer as all we need is to look at any one customization offer
def testOffer = allCustomizationOffers.customizationOffer[0]

log.info "[EXPECTED | ACTUAL] - [omxData] = Element presence: "+ testOffer.omxData.size() + " | cid: "+ testOffer.omxData.@cid


// Check if the element is present 
assert 1 == testOffer.omxData.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a9cf8aa7-f728-4bbf-b3c5-4927b7e5090d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>273571cb-969b-4554-a16e-aa18c8064013</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fc56fd26-b628-4416-9f93-573d590631a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>01f461c7-65d8-4075-8c2c-de7f0c88d59c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>23f10b8b-51c4-4546-a7e1-3febf3ba62cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="32de824f-cb91-4cb7-bd7a-315a9f5d0ee4" name="TS05 -Customized-Search-SingleFieldSingleValue"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="41f8e1e0-d9f8-4ad4-9be7-803d02b00ed0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC02 - Search Date Fields" searchProperties="true"><con:settings/><con:testStep type="groovy" name="SetUpInputTestFile" id="12a77fee-3fab-409a-98e4-90973694d222"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="GetTestData" id="bd4185c6-b0e9-477f-97cd-1d7cb44c60c2"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>DateFields</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>field</con:property><con:property>operation</con:property><con:property>dbfield</con:property><con:property>value</con:property><con:property>websearchstring</con:property><con:property>dbsearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="GetDatabaseValues" id="a659b7e3-6a45-49e7-a78f-d6b58de4f3b9"><con:settings/><con:config><script>def sql = context.snp
def dbsearchstring = context.expand( '${GetTestData#dbsearchstring}' )

log.info "query..."+dbsearchstring

def query = "select count(1) as DB_COUNT from VW_CUSTOMIZATION_OFFERS "+dbsearchstring+""

log.info "query..."+query
// Run query
def res = sql.rows(query)

// From DB get values for all components
def DB_COUNT = res.get(0)["DB_COUNT"]

context.DB_COUNT = DB_COUNT

log.info "DB_COUNT: ACTUAL = ${DB_COUNT}"</script></con:config></con:testStep><con:testStep type="groovy" name="getDBCount" id="f6cf7600-22d3-40fd-9d8d-36d4a1ee2b47"><con:settings/><con:config><script>context.DB_COUNT</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchOfferWithDates" id="ec10a1e6-4531-4c57-8901-7516657e9693"><con:settings/><con:config service="Customization-SearchOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOfferWithDates" mediaType="application/json" id="cb4fefa7-26ba-4540-977c-93fbfc309ad7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bf494e60-8aff-4ba9-8c01-08bf548d8a8a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="4d92bed2-0611-4475-8262-0ec852d72f7e" name="CheckCountof  Total Customization Offers"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
count(//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer)</path><content>${getDBCount#result}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${GetTestData#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Data" id="d86545f7-4b3f-4314-a476-d58f0fce2abd"><con:settings/><con:config><script><![CDATA[import groovy.time.TimeCategory

def value = context.expand( '${GetTestData#value}' )
def websearchstring = context.expand( '${GetTestData#websearchstring}' )
def field = context.expand( '${GetTestData#field}' )
def operation = context.expand( '${GetTestData#operation}' )


def webresponseAsXml =   context.expand( '${SearchOfferWithDates#ResponseAsXml#declare namespace ns1=\'http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501\'; //ns1:snapshots[1]}' )

def webdata = new XmlParser().parseText(webresponseAsXml)

if(webdata.customizationOffers.customizationOffer.size() >0)
{		
 webdata.customizationOffers.customizationOffer.each { customizationOffer ->

switch (field)
{		
			case 'startDate':
			switch(operation)
			{
				case 'gt':
				log.info "GT  (Actual > Expected): Expected =" +value +" Actual = " + customizationOffer.startDate.text()	
				assert customizationOffer.startDate.text() > value, "startDate invalid(startDate is less than the actual value): Expected =" +value +" Actual = " +customizationOffer.startDate.text()		
				 break;
				case 'eq':
				log.info "EQ: (Actual == Expected) Expected =" +value +" Actual = "	+customizationOffer.startDate.text()			
				 assert customizationOffer.startDate.text() == value, "startDate invalid: Expected =" +value +" Actual = "	+customizationOffer.startDate.text()	
				 break;
				case 'ge':	
				log.info "GE: (Actual >= Expected) Expected =" +value +" Actual = " +customizationOffer.startDate.text()		
				 assert customizationOffer.startDate.text() >= value	, "startDate invalid(startDate is less than or equal to the actual value): Expected =" +value +" Actual = " +customizationOffer.startDate.text()			
				 break;
				case 'lt':	
				log.info "LT: (Actual < Expected) Expected =" +value +" Actual = " +customizationOffer.startDate.text()				
				 assert customizationOffer.startDate.text() < value, "startDate invalid(startDate is greater than the actual value): Expected =" +value +" Actual = " +customizationOffer.startDate.text()				
				 break;
				case 'le':	
				 log.info "LE: (Actual <= Expected) Expected =" +value +" Actual = " +customizationOffer.startDate.text()				
				 assert customizationOffer.startDate.text().substring(0,10) <= value	, "startDate invalid(startDate is greater than or equal to the actual value): Expected =" +value +" Actual = " +customizationOffer.startDate.text()			
				 break;
			}
			 break;

		case 'endDate':
			switch(operation)
			{
				case 'gt':
				log.info "GT: (Actual > Expected) Expected =" +value +" Actual = " +customizationOffer.endDate.text()
				 assert customizationOffer.endDate.text() > value, "End date invalid(end date is less than the actual value): Expected =" +value +" Actual = " +customizationOffer.endDate.text()
				 break;
				case 'eq':	
				log.info "EQ: (Actual == Expected) Expected =" +value +" Actual = "	+customizationOffer.endDate.text()				
				 assert customizationOffer.endDate.text() == value, "End date invalid: Expected =" +value +" Actual = "	+customizationOffer.endDate.text()			
				 break;
				case 'ge':	
				log.info "GE: (Actual >= Expected) Expected =" +value +" Actual = "	+customizationOffer.endDate.text()					
				 assert customizationOffer.endDate.text() >= value, "End date invalid(end date is less than or equal to the actual value): Expected =" +value +" Actual = "	+customizationOffer.endDate.text()					
				 break;
				case 'lt':	
				log.info "LT: (Actual < Expected) Expected =" +value +" Actual = "+customizationOffer.endDate.text()					
				 assert customizationOffer.endDate.text() < value, "End date invalid(end date is greater than the actual value): Expected =" +value +" Actual = "+customizationOffer.endDate.text()						
				 break;
				case 'le':	
				log.info "LE: (Actual <= Expected) Expected =" +value +" Actual = "+customizationOffer.endDate.text()					 			
				 assert customizationOffer.endDate.text().substring(0,10) <= value, "End date invalid(end date is greater than or equal to the actual value): Expected =" +value +" Actual = "+customizationOffer.endDate.text()						
				 break;
			}
					
		 break;

}
 }
}
else
{
	log.info  "Search Criteria -> "+ websearchstring+".No records found this search criteria"
}
]]></script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="78dbaf57-821b-4333-84a7-269bba5a31f8"><con:settings/><con:config><dataSourceStep>GetTestData</dataSourceStep><targetStep>GetDatabaseValues</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('SnpQA')
context.snpQA = Sql.newInstance(ConObj.getConnectionString(), props);

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-SEARCH-TESTDATA.xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 






</con:setupScript><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Search String Fields" searchProperties="true" id="8b546697-0693-4f3c-9a88-31803a50b004" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description/><con:settings><con:setting id="GeneratableJUnitReport@Folder">C:\test</con:setting></con:settings><con:testStep type="groovy" name="SetUpInputTestFile" id="b77d8ba0-39b8-4907-9c59-d0d4518995fe"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="GetTestData" id="ae391d03-4f31-432d-a1ab-99481b439a82"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>SingleFieldSingleValue</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>field</con:property><con:property>operation</con:property><con:property>dbfield</con:property><con:property>value</con:property><con:property>websearchstring</con:property><con:property>dbsearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="GetDatabaseValues" id="294048b4-3cd2-4511-b444-c52c176bc158"><con:settings/><con:config><script>def sql = context.snp
def dbsearchstring = context.expand( '${GetTestData#dbsearchstring}' )

log.info "query..."+dbsearchstring

def query = "select count(1) as DB_COUNT from VW_CUSTOMIZATION_OFFERS "+dbsearchstring+""

log.info "query..."+query
// Run query
def res = sql.rows(query)

// From DB get values for all components
def DB_COUNT = res.get(0)["DB_COUNT"]

context.DB_COUNT = DB_COUNT

log.info "DB_COUNT: ACTUAL = ${DB_COUNT}"</script></con:config></con:testStep><con:testStep type="groovy" name="getDBCount" id="8d9cf911-22ce-49a1-b2ef-151bb31e483c"><con:settings/><con:config><script>context.DB_COUNT</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchOffer" id="5b28f5c9-d8b4-4e42-8fe0-9cb8a64f4f77"><con:settings/><con:config service="Customization-SearchOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOffer" mediaType="application/json" id="cb4fefa7-26ba-4540-977c-93fbfc309ad7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bf494e60-8aff-4ba9-8c01-08bf548d8a8a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="4d92bed2-0611-4475-8262-0ec852d72f7e" name="CheckCountof  Total Customization Offers"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
count(//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer)</path><content>${getDBCount#result}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${GetTestData#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Data" id="f38b7b99-0f9c-4ac4-b72f-328ab4872d54"><con:settings/><con:config><script>def value = context.expand( '${GetTestData#value}' )
def websearchstring = context.expand( '${GetTestData#websearchstring}' )
def field = context.expand( '${GetTestData#field}' )

def webresponseAsXml =    context.expand( '${SearchOffer#ResponseAsXml#declare namespace ns1=\'http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501\'; //ns1:snapshots[1]}' )

def webdata = new XmlParser().parseText(webresponseAsXml)
if( webdata.customizationOffers.customizationOffer.size() >0)
	{	
		 webdata.customizationOffers.customizationOffer.each { customizationOffer ->
			switch (field)
			{
					case 'status':
						 assert customizationOffer.status.text() == value, "Status invalid: Expected =" +value +" Actual = "+ customizationOffer.status.text()			 
						 break;
					case 'hostProductLineCode':
						 assert customizationOffer.hostProductLineCode.text() == value, "hostProductLineCode invalid: Expected =" +value +" Actual = "+customizationOffer.hostProductLineCode.text()
						 break;
			}
		 }
	}
else
	{
		log.info  "Search Criteria -> "+ websearchstring+".No records found this search criteria"
	}
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="aaead630-dbdf-4982-8e0d-a82248211e81"><con:settings/><con:config><dataSourceStep>GetTestData</dataSourceStep><targetStep>GetDatabaseValues</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('SnpQA')
context.snpQA = Sql.newInstance(ConObj.getConnectionString(), props);

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-SEARCH-TESTDATA.xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 






</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>74034483-1b9f-4ec2-9275-fd9835a98738</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5992b2da-464b-4171-9764-27a36f50fa1c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a849b07f-d87e-4d0d-a43c-f47bd21bde60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>294048b4-3cd2-4511-b444-c52c176bc158</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8d9cf911-22ce-49a1-b2ef-151bb31e483c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="TS07 -Customized-Search-SingleFieldMultiValue" id="ecde30b0-458b-41f7-ac37-604028997249"><con:description>TestSuite generated for REST Service [SearchOfferAPI]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Search with Multiple Values" searchProperties="true" id="b8a700f7-eb11-40fd-a819-5dab215d37e3" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [Web] located at [/{path}/ws/rest/v1/snapshot/marketingoffers/web]</con:description><con:settings/><con:testStep type="groovy" name="SetUpInputTestFile" id="7d6001f1-33ad-4b4f-b6fa-b452cf7ef8be"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="5c0d0b99-ddee-4003-ab4f-2b515ec3d12e"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>SingleFieldMultiValue</worksheet><cell>C2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>value</con:property><con:property>websearchstring</con:property><con:property>dbsearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="GetDatabaseValues" id="7033748d-8aa8-4389-9388-67cf132bf37b"><con:settings/><con:config><script>def sql = context.snp
def dbsearchstring = context.expand( '${DataSource#dbsearchstring}' )

def query = "select count(1) as DB_COUNT from VW_CUSTOMIZATION_OFFERS "+dbsearchstring+""

log.info "query..."+query
// Run query
def res = sql.rows(query)

// From DB get values for all components
def DB_COUNT = res.get(0)["DB_COUNT"]

context.DB_COUNT = DB_COUNT

log.info "DB_COUNT: ACTUAL = ${DB_COUNT}"</script></con:config></con:testStep><con:testStep type="groovy" name="getDBCount" id="6432c8e1-d94c-4802-88d0-a0ca67f8ddfc"><con:settings/><con:config><script>context.DB_COUNT</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchOffer" id="febaaffa-4413-4eba-b7a7-10dc8666d7a2"><con:settings/><con:config service="Customization-SearchOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOffer" mediaType="application/json" id="4ea980ad-f4d8-41e2-bff8-fcab581f64e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="20adc7e8-de00-4c43-a7de-4fb1c4e329a3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="b2222fa7-51b1-4ac8-9d06-e893b62f86c6" name="CheckCountof  Total Customization Offers"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
count(//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer)</path><content>${getDBCount#result}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${DataSource#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Data" id="2a5a658e-40ab-46df-a32b-55b15c97b6c6"><con:settings/><con:config><script>def value = context.expand( '${DataSource#value}' )
def websearchstring = context.expand( '${DataSource#websearchstring}' )
def field = context.expand( '${DataSource#field}' )

def webresponseAsXml =  context.expand( '${SearchOffer#ResponseAsXml#declare namespace ns1=\'http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501\'; //ns1:snapshots[1]}' )

def webdata = new XmlParser().parseText(webresponseAsXml)
if( webdata.customizationOffers.customizationOffer.size() >0)
	{	
		 webdata.customizationOffers.customizationOffer.each { customizationOffer ->
 		 log.info "Expected In Operation =" +value +" -  Actual = "	+customizationOffer.status.text()
		 assert value.contains(customizationOffer.status.text()),"Status invalid(In Operation): Expected =" +value +" Actual = "	+customizationOffer.status.text()
		 }
	}
else
	{
		log.info  "Search Criteria -> "+ websearchstring+".No records found this search criteria"
	}
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="4df85a12-dbcf-439b-aad1-ada6d2b67567"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>GetDatabaseValues</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('SnpQA')
context.snpQA = Sql.newInstance(ConObj.getConnectionString(), props);

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-SEARCH-TESTDATA.xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a49e8d8c-2909-4d35-b699-b64f12e63c89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f167bc6e-7bd6-4e55-8433-55331b112faa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>93cf3605-1d73-42bd-84f4-cc7555411424</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2b99397f-4bf7-491a-822e-418393adb8d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c0d0b99-ddee-4003-ab4f-2b515ec3d12e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7033748d-8aa8-4389-9388-67cf132bf37b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6432c8e1-d94c-4802-88d0-a0ca67f8ddfc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="225416d2-d1d2-4465-a898-4afcbf230758" name="TS08 -Customized-Search-MultiFieldSingleValue"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Search MultiFields" searchProperties="true" id="a8cbf026-2f83-4dfd-ae3f-1b407b2a1474" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description/><con:settings/><con:testStep type="groovy" name="SetUpInputTestFile" id="07020f1a-fd47-4b4f-a4b8-151ec4b7b29d"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="GetTestData" id="9264642d-ef47-4981-b0c2-48921d628b33"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>MultiFieldMultiValue</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>status</con:property><con:property>readydate</con:property><con:property>enddate</con:property><con:property>entityid</con:property><con:property>productlinecode</con:property><con:property>hostproductlinecode</con:property><con:property>websearchstring</con:property><con:property>dbsearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="GetDatabaseValues" id="7f9f60c0-36ca-450e-b904-8ee3287b5cfe"><con:settings/><con:config><script>def sql = context.snp
def dbsearchstring = context.expand( '${GetTestData#dbsearchstring}' )

def query = "select count(1) as DB_COUNT from VW_CUSTOMIZATION_OFFERS "+dbsearchstring+""

log.info "query..."+query
// Run query
def res = sql.rows(query)

// From DB get values for all components
def DB_COUNT = res.get(0)["DB_COUNT"]

context.DB_COUNT = DB_COUNT

log.info "DB_COUNT: ACTUAL = ${DB_COUNT}"</script></con:config></con:testStep><con:testStep type="groovy" name="getDBCount" id="206a6ba5-ee9c-40ab-ae37-9e8c68c94fe1"><con:settings/><con:config><script>context.DB_COUNT</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchOffer" id="282801c0-e103-4596-93c9-d6abdab86f3a"><con:settings/><con:config service="Customization-SearchOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOffer" mediaType="application/json" id="4ea980ad-f4d8-41e2-bff8-fcab581f64e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="20adc7e8-de00-4c43-a7de-4fb1c4e329a3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="b2222fa7-51b1-4ac8-9d06-e893b62f86c6" name="CheckCountof  Total Customization Offers"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
count(//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer)</path><content>${getDBCount#result}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${GetTestData#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Data" id="563c419d-89f7-4599-8c99-347bcce27227"><con:settings/><con:config><script>def value = context.expand( '${GetTestData#value}' )
def websearchstring = context.expand( '${GetTestData#websearchstring}' )
def status = context.expand( '${GetTestData#status}' )
def hostproductlinecode = context.expand( '${GetTestData#hostproductlinecode}' )
def startdate = context.expand( '${GetTestData#readydate}' )
def enddate = context.expand( '${GetTestData#enddate}' )

def webresponseAsXml =  context.expand( '${SearchOffer#ResponseAsXml#declare namespace ns1=\'http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501\'; //ns1:snapshots[1]}' )
def webdata = new XmlParser().parseText(webresponseAsXml)

filterArray = websearchstring.split(";")

filterArray.each{array ->
	   field = array.split(":")
	   if(webdata.customizationOffers.customizationOffer.size() >0)
		{
		   webdata.customizationOffers.customizationOffer.each { customizationOffer ->
				switch (field[0])
					{	
					case 'status':
					      log.info "Expected =" +status +" -Actual = " +customizationOffer.status.text()	
						 assert status.contains(customizationOffer.status.text()),"Status invalid(In Operation): Expected =" +status +" Actual = " +	customizationOffer.status.text()		 
						 break;
					case 'hostProductLineCode':
						log.info "Expected =" +hostproductlinecode +" Actual = " +customizationOffer.hostProductLineCode.text()
						assert customizationOffer.hostProductLineCode.text() == hostproductlinecode,"hostproductlinecode invalid: Expected =" +hostproductlinecode +" Actual = " +customizationOffer.hostProductLineCode.text()
						 break;		
					case 'startDate':
						 log.info "Expected =" +startdate +" Actual = " +customizationOffer.startDate.text()
						 assert customizationOffer.startDate.text() &lt; startdate,"start Date invalid(Less than operation): Expected =" +startdate +" Actual = " +customizationOffer.startDate.text()
						 break;
					case 'endDate':
						 log.info "Expected =" +enddate +" Actual = " +customizationOffer.endDate.text()
						 assert customizationOffer.endDate.text() &lt; enddate,"enddate invalid(less than Operation): Expected =" +enddate +" Actual = " +customizationOffer.endDate.text()
						 break;
					}
				}
		}
		else
		{
			log.info  "Search Criteria -> "+ websearchstring+".No records found this search criteria"
		}
	
	}

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="91698ace-d717-4d6b-893d-895b50cf82ba"><con:settings/><con:config><dataSourceStep>GetTestData</dataSourceStep><targetStep>GetDatabaseValues</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('SnpQA')
context.snpQA = Sql.newInstance(ConObj.getConnectionString(), props);

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-SEARCH-TESTDATA.xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a49e8d8c-2909-4d35-b699-b64f12e63c89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f167bc6e-7bd6-4e55-8433-55331b112faa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>93cf3605-1d73-42bd-84f4-cc7555411424</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2b99397f-4bf7-491a-822e-418393adb8d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c0d0b99-ddee-4003-ab4f-2b515ec3d12e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7033748d-8aa8-4389-9388-67cf132bf37b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6432c8e1-d94c-4802-88d0-a0ca67f8ddfc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9264642d-ef47-4981-b0c2-48921d628b33</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="3a1d2a16-3c59-445e-b7e0-fd7b2094dc52" name="TS09 -Customized-Search-MultiFieldMultiValue"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Search MultiFields" searchProperties="true" id="e274d637-751a-4619-8de8-d74c30881a73" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description/><con:settings/><con:testStep type="groovy" name="SetUpInputTestFile" id="4f93a841-4ae5-4437-9cc6-1d72ab6149f2"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="GetTestData" id="e5e75f87-01a7-4a40-8a28-53263fd082e3"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>MultiFieldMultiValue</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>status</con:property><con:property>readydate</con:property><con:property>enddate</con:property><con:property>entityid</con:property><con:property>productlinecode</con:property><con:property>hostproductlinecode</con:property><con:property>websearchstring</con:property><con:property>dbsearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="GetDatabaseValues" id="d370e8f5-7afb-4d59-a300-0d722abf2308"><con:settings/><con:config><script>def sql = context.snp
def dbsearchstring = context.expand( '${GetTestData#dbsearchstring}' )

def query = "select count(1) as DB_COUNT from VW_CUSTOMIZATION_OFFERS "+dbsearchstring+""

log.info "query..."+query
// Run query
def res = sql.rows(query)

// From DB get values for all components
def DB_COUNT = res.get(0)["DB_COUNT"]

context.DB_COUNT = DB_COUNT

log.info "DB_COUNT: ACTUAL = ${DB_COUNT}"</script></con:config></con:testStep><con:testStep type="groovy" name="getDBCount" id="f2a33d80-d87c-4645-9fda-73eb856588f0"><con:settings/><con:config><script>context.DB_COUNT</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchOffer" id="9fbedf2a-1c24-47a1-ab3e-fa789c33fc24"><con:settings/><con:config service="Customization-SearchOfferAPI" resourcePath="/snapshot/customizationoffers" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOffer" mediaType="application/json" id="4ea980ad-f4d8-41e2-bff8-fcab581f64e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="20adc7e8-de00-4c43-a7de-4fb1c4e329a3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="b2222fa7-51b1-4ac8-9d06-e893b62f86c6" name="CheckCountof  Total Customization Offers"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
count(//ns1:snapshots[1]/ns1:customizationOffers[1]/ns1:customizationOffer)</path><content>${getDBCount#result}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${GetTestData#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Data" id="2b047708-3513-4e42-bc93-3d1452e6ad23"><con:settings/><con:config><script>def value = context.expand( '${GetTestData#value}' )
def websearchstring = context.expand( '${GetTestData#websearchstring}' )
def status = context.expand( '${GetTestData#status}' )
def hostproductlinecode = context.expand( '${GetTestData#hostproductlinecode}' )
def startdate = context.expand( '${GetTestData#readydate}' )
def enddate = context.expand( '${GetTestData#enddate}' )

def webresponseAsXml =  context.expand( '${SearchOffer#ResponseAsXml#declare namespace ns1=\'http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501\'; //ns1:snapshots[1]}' )

def webdata = new XmlParser().parseText(webresponseAsXml)
filterArray = websearchstring.split(";")

filterArray.each{array ->
	field = array.split(":")
	   if( webdata.customizationOffers.customizationOffer.size()>0)
			{
			   webdata.customizationOffers.customizationOffer.each { customizationOffer ->
					switch (field[0])
						{	
						case 'status':
						      log.info "Expected =" +status +" -Actual = " +customizationOffer.status.text()	
							 assert status.contains(customizationOffer.status.text()),"Status invalid(In Operation): Expected =" +status +" Actual = " +	customizationOffer.status.text()		 
							 break;
						case 'hostProductLineCode':
							log.info "Expected =" +hostproductlinecode +" Actual = " +customizationOffer.hostProductLineCode.text()
							assert customizationOffer.hostProductLineCode.text() == hostproductlinecode,"hostproductlinecode invalid: Expected =" +hostproductlinecode +" Actual = " +customizationOffer.hostProductLineCode.text()
							 break;		
						case 'startDate':
							 log.info "Expected =" +startdate +" Actual = " +customizationOffer.startDate.text()
							 assert customizationOffer.startDate.text() &lt; startdate,"start Date invalid(Less than operation): Expected =" +startdate +" Actual = " +customizationOffer.startDate.text()
							 break;
						case 'endDate':
							 log.info "Expected =" +enddate +" Actual = " +customizationOffer.endDate.text()
							 assert customizationOffer.endDate.text() &lt; enddate,"enddate invalid(less than Operation): Expected =" +enddate +" Actual = " +customizationOffer.endDate.text()
							 break;
						}
					}
			}
		else
		{
			log.info  "Search Criteria -> "+ websearchstring+".No records found this search criteria"
		}
	}</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="7ca46e53-cb36-473c-bc9f-c7cb169f8d42"><con:settings/><con:config><dataSourceStep>GetTestData</dataSourceStep><targetStep>GetDatabaseValues</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('SnpQA')
context.snpQA = Sql.newInstance(ConObj.getConnectionString(), props);

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-SEARCH-TESTDATA.xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a49e8d8c-2909-4d35-b699-b64f12e63c89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f167bc6e-7bd6-4e55-8433-55331b112faa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>93cf3605-1d73-42bd-84f4-cc7555411424</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2b99397f-4bf7-491a-822e-418393adb8d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c0d0b99-ddee-4003-ab4f-2b515ec3d12e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7033748d-8aa8-4389-9388-67cf132bf37b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6432c8e1-d94c-4802-88d0-a0ca67f8ddfc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e5e75f87-01a7-4a40-8a28-53263fd082e3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="aa796323-7d8a-4d27-83bf-9a77a95e543a" name="TS06 -Customized-Specified General Tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="814256eb-2af6-4b22-b333-c421f0300866" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC01 - SPECIFIED  STANDARDS VALIDATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="SpecifiedOfferRestRequest" id="3b5640a0-a4cf-42fa-aea9-eebfb385c6e2"><con:settings/><con:config service="Customization-SpecifiedOfferAPI" resourcePath="/snapshot/customizationoffers/{OfferId}" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SpecifiedOfferRestRequest" id="870514a4-99a7-4239-be0f-cd5abde53c03" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers/C333K</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="29a59397-99eb-465e-a20e-0cdac8550e40" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="754bcefc-fc88-460d-aa7c-2b9c9be15ebd" name="Check count of [CustomizedOffers]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501';
count( //ns1:snapshot[1]/ns1:customizationOffer[1])</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f55f7438-c172-467a-9916-02c8127c3205" name="Check for existance of [currentAsOf]"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
exists(//ns1:snapshot[1]/ns1:currentAsOf[1])</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="OfferId" value="GMT333D" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>OfferId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Customized Offers From Response" id="5c765ac8-b145-48c5-bbf1-3230076805f9"><con:settings/><con:config><script>// Obtain API response into a variable
def response = context.expand( '${SpecifiedOfferRestRequest#Response}' )

//put reposne in contex
context.setProperty("xmlResponse", response)

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response) 

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

//to get name space
//def nsRoot = new XmlParser(false, false).parseText(response)

// set name space in contect
//context.setProperty("grNameSpace", nsRoot.@'xmlns')

// Now get all 'marketingOffers' nodes
def allCustomizationOffers = root.customizationOffers // Remembr root is "snapshots" for Change API response XML

// Now get all 'marketingOffers' nodes
//def testCustomizedOffers =  allCustomizationOffers.customizationOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("allCustomizationOffers",  allCustomizationOffers)
//context.setProperty("xidx",  0)
//context.setProperty("xtotal",  testOffers.size())


</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Default Response Content Type" id="62c632b6-7015-4f47-aaa8-72c06d31c6b2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>519f2434-5969-440e-b381-e3a51753bb7d</con:id><con:isGroup>false</con:isGroup><con:sourceId>3b5640a0-a4cf-42fa-aea9-eebfb385c6e2</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a60cf2ef-ab89-4018-8997-49292c672a61"><con:configuration><scriptText>// To validate API response headers
def expVal =  messageExchange.modelItem.testCase.testSteps['SpecifiedOfferRestRequest'].testRequest.response.getResponseHeaders()["Content-Type"][0]
def actVal = "application/xml"
log.info " [EXPECTED | ACTUAL] - [Default Content Type] - [Expected = $expVal | Actual = $actVal ]"
assert expVal == actVal : "Default Content Type Not Valid"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Current As Of is in UTC" id="3b6047dd-f660-4cc3-8791-f36d4ca60d26"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>345d80c9-347e-4f48-be3c-33a911abb4db</con:id><con:isGroup>false</con:isGroup><con:sourceId>3b5640a0-a4cf-42fa-aea9-eebfb385c6e2</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="6123e2f0-1398-4348-8309-eb4d28bb1ba6"><con:configuration><scriptText>def root = context.xmlRoot
// Get actual 'currentAsOf' from the parsed response
def actVal = root.currentAsOf.text()

// Define expected value
def expVal = "Z"

log.info " [EXPECTED | ACTUAL] - [Element: currentAsOf] - [Expected = $expVal | Actual = $actVal ]"

assert actVal.endsWith('Z'): "Expected = Z | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Name Space" id="ac89f050-15fa-4a52-8bed-238416f10ea1"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>edfa9f1c-1f87-41d3-938f-a8ab3f8cbb0e</con:id><con:isGroup>false</con:isGroup><con:sourceId>3b5640a0-a4cf-42fa-aea9-eebfb385c6e2</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="fc26d5d9-6b16-4a64-9391-4fb71c54e897"><con:configuration><scriptText>//to get name space
def nsRoot = new XmlParser(false, false).parseText(context.xmlResponse)

// get name space 
def actVal = nsRoot.@'xmlns'

def expVal ='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'

log.info " [EXPECTED | ACTUAL] - [Element: NameSPace]  - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript>import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2e17a7c7-b0c0-4f83-ad5b-0a5966124324</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>186a512d-5d57-47f1-8035-76ac0a3d719b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e91a782-5db3-464d-a2cf-542fc02573fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c2dfc52-a5c8-4d84-9aaf-21f8002638f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71dfcdcf-ce00-4f0e-b3fc-3d357233e7de</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b5640a0-a4cf-42fa-aea9-eebfb385c6e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c765ac8-b145-48c5-bbf1-3230076805f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62c632b6-7015-4f47-aaa8-72c06d31c6b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b6047dd-f660-4cc3-8791-f36d4ca60d26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac89f050-15fa-4a52-8bed-238416f10ea1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="527324a7-4c06-43c4-898f-ed4408a9e3a1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC02 - SPECIFIED POSITIVE TESTS" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="a8a85adc-47c5-4b70-b64b-9c15aacd607f"><con:settings/><con:config><script>//testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))

//log.info "after bb "+context.expand( '${#Project#s_after}' )</script></con:config></con:testStep><con:testStep type="restrequest" name="SpecifiedOfferRestRequest" id="1db44151-5f06-4e23-8e35-632ecd3b51e8"><con:settings/><con:config service="Customization-SpecifiedOfferAPI" resourcePath="/snapshot/customizationoffers/{OfferId}" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SpecifiedOfferRestRequest" id="870514a4-99a7-4239-be0f-cd5abde53c03" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers/C333K</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4c01a59d-5da2-4c3b-93ab-09324fbb2c1a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rpapala_con</con:username><con:password>RPgr2014</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="OfferId" value="GMT333D" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>OfferId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Rest Response" id="91c29949-2aa2-475c-8ab2-653a2ebdea68"><con:settings/><con:config><script>// Obtain API response into a variable
def responseAsXml = context.expand( '${SpecifiedOfferRestRequest#ResponseAsXml}' )

//put reposne in contex

context.setProperty("xmlCusSpecifiedOfferResponse", responseAsXml)</script></con:config></con:testStep><con:testStep type="assertionteststep" name="SearchCustomizationOfferSchemaValidation" id="6bb0037c-de20-4b68-8c35-9820983a6153"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>b5411d2f-7357-45a5-b42a-158eaed5383f</con:id><con:isGroup>false</con:isGroup><con:sourceId>91c29949-2aa2-475c-8ab2-653a2ebdea68</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0fab27d2-3956-474a-af6c-8249046f913c"><con:configuration><scriptText>import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory
import groovy.util.*
import java.io.File	// You need Java File utils

String response = context.xmlCusSpecifiedOfferResponse

// Get XSD File Location
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def Path = new File(projectFilePath).getParentFile()
def projectPath = Path.toString()
def sourcePath = new File(projectPath).getParentFile()
def xsdFile = sourcePath.toString() + "/XSD/customization-offer-schema.xsd"
log.info "XSD File Name is: " + xsdFile


try{
new File(xsdFile).withReader { xsd ->
  SchemaFactory.newInstance( XMLConstants.W3C_XML_SCHEMA_NS_URI )
               .newSchema( new StreamSource( xsd ) )
               .newValidator()
               .validate( new StreamSource( new StringReader( response ) ) )               
     log.info "Customization Specified Offer API Schema Validation Success"
     assert true 
} } catch (Throwable e)
	{
		log.info "Exception while validating XSD Schema ..."+e.getMessage()
		assert false : "Expected =Customization Changed Offer API Schema Validation Success | Actual = $e"
	}


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>b6360d3f-3a91-429a-b8fe-81ff03b208e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1db44151-5f06-4e23-8e35-632ecd3b51e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="74dc9646-43ad-4c8f-aaca-65281ed0a7cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC03 - SPECIFIED NEGATIVE TESTS" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="REST Test Request" id="8a15f57f-49f2-4160-9a69-f924d9d63297"><con:settings/><con:config service="Customization-SpecifiedOfferAPI" resourcePath="/snapshot/customizationoffers/{OfferId}" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Test Request" id="870514a4-99a7-4239-be0f-cd5abde53c03" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers/C333K</con:originalUri><con:assertion type="XPath Match" id="3a0c389c-88fc-4784-ab90-318720f5cc7f" name="XPath Match"><con:configuration><path>declare namespace ns1='http://wsapi.guthy-renker.com/soma-snapshot/customization-offer/201501'; 
//ns1:error[1]/ns1:code[1]</path><content>ResourceRemoved</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rpapala_con</con:username><con:password>RPgr2014</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="OfferId" value="GMT333DR" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>8a15f57f-49f2-4160-9a69-f924d9d63297</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="16393915-9dd3-466e-8951-0a81c64afe1d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC04 - VERIFY EXISTENCE SPECIFIED CUSTOMIZATION OFFERS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="c1d7534d-04a3-4c53-8a38-defb96e78490"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="restrequest" name="CustomizedSpecifiedOfferRequest" id="0cb6a5b7-b6eb-415d-856f-6e7f090a7b37"><con:settings/><con:config service="Customization-SpecifiedOfferAPI" resourcePath="/snapshot/customizationoffers/{OfferId}" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizedSpecifiedOfferRequest" id="870514a4-99a7-4239-be0f-cd5abde53c03" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers/C333K</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ff26770d-2400-4a13-9d24-cdbefaa2e2ba" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rpapala_con</con:username><con:password>RPgr2014</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="OfferId" value="GMT333D" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>OfferId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Customized Offers From Response" id="ab909d0e-424c-4306-a82c-1a76d671b113"><con:settings/><con:config><script>// Obtain API response into a variable
def response = context.expand( '${CustomizedSpecifiedOfferRequest#Response}' )


//put reposne in contex
//context.setProperty("xmlResponse", response)

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response) 
// Put the root in the 'context'

//context.setProperty("xmlRoot", root)
// Now get all 'marketingOffers' nodes

def customizationOffer = root.customizationOffer // Remembr root is "snapshots" for Change API response XML

// Keep the test offer in context to allow other steps access it
context.setProperty("customizationOffer",  customizationOffer)


</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of status" id="9ab586cf-9921-406e-b42e-34d1e8faa9b3"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>
def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [Status] = Element presence: "+ testOffer.status.size() + " | Element Data: "+ testOffer.status.text()

// Check if the element is present 
assert 1 == testOffer.status.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of description" id="e2a25972-5cf5-4ac9-ac3b-02ca3724772c"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [description] = Element presence: "+ testOffer.description.size() + " | Element Data: "+ testOffer.description.text()

// Check if the element is present 
assert 1 == testOffer.description.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of hostProductLineCode" id="0c0b27d7-eb75-486a-b380-5f217620f5c0"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [hostProductLineCode] = Element presence: "+ testOffer.hostProductLineCode.size() + " | Element Data: "+ testOffer.hostProductLineCode.text()

// Check if the element is present 
assert 1 == testOffer.hostProductLineCode.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of startDate" id="0bc68e6e-2827-4ef6-95d2-a0a278228331"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [startDate] = Element presence: "+ testOffer.startDate.size() + " | Element Data: "+ testOffer.startDate.text()

// Check if the element is present 
assert 1 == testOffer.startDate.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of endDate" id="5a99d7c2-cc6f-4a5d-84ce-d109979d8eb0"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [endDate] = Element presence: "+ testOffer.endDate.size() + " | Element Data: "+ testOffer.endDate.text()

// Check if the element is present 
assert 1 == testOffer.endDate.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of priceGroupId" id="bb3aaef1-774f-4838-a3c9-1478eac2af33"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [priceGroupId] = Element presence: "+ testOffer.priceGroupId.size() + " | Element Data: "+ testOffer.priceGroupId.text()

// Check if the element is present 
assert 1 == testOffer.priceGroupId.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of totalQuantity" id="ee37e593-fba0-4450-adcb-97ebf5f49899"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [totalQuantity] = Element presence: "+ testOffer.totalQuantity.size() + " | Element Data: Max "+ testOffer.totalQuantity.@max +" , Min "+ testOffer.totalQuantity.@min

// Check if the element is present 
assert 1 == testOffer.totalQuantity.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of selectionGroups" id="27a2595a-9bad-4df6-a591-f45a579f3fdf"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [selectionGroups] = Element presence: "+ testOffer.selectionGroups.size()

// Check if the element is present 
assert 1 == testOffer.selectionGroups.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of selectionGroup" id="d5a2f121-a8b3-4d06-b609-97ed71c7d5c1"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [selectionGroups.selectionGroup] = Element presence: "+ testOffer.selectionGroups.selectionGroup.size()

// Check if the element is present 
assert 1 == testOffer.selectionGroups.selectionGroup.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of kitItem" id="3c1c67b0-33e1-400f-8278-24860d2394a0"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer
log.info "[EXPECTED | ACTUAL] - [selectionGroups.selectionGroup.kitItem] = Element presence: "+ testOffer.selectionGroups.selectionGroup.kitItem.size()

// Check if the element is present 

if (testOffer.selectionGroups.selectionGroup.kitItem.size() > 0)
assert true

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of inclusion" id="c138da60-ba22-42da-a7a1-a4fd3293bd39"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer
def kitItem = testOffer.selectionGroups.selectionGroup.kitItem[0]

log.info "[EXPECTED | ACTUAL] - [kitItem.inclusion] = Element presence: "+ kitItem.inclusion.size() + " | Element Data: "+ kitItem.inclusion.text()

// Check if the element is present 
assert 1 == kitItem.inclusion.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of productId" id="36d2ebe1-569a-4d6d-a2b5-f8d59ac878ff"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer
def kitItem = testOffer.selectionGroups.selectionGroup.kitItem[0]

log.info "[EXPECTED | ACTUAL] - [kitItem.productId] = Element presence: "+ kitItem.productId.size() + " | Element Data: "+ kitItem.productId.text()

// Check if the element is present 
assert 1 == kitItem.productId.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of Kititem.description" id="1de101c7-bcc9-4da7-bd4e-d475803b35dc"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer
def kitItem = testOffer.selectionGroups.selectionGroup.kitItem[0]

log.info "[EXPECTED | ACTUAL] - [kitItem.description] = Element presence: "+ kitItem.description.size() + " | Element Data: "+ kitItem.description.text()

// Check if the element is present 
assert 1 == kitItem.description.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of kitPricing" id="6451c591-5563-4f36-8bfb-9827002e414b"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [kitPricing] = Element presence: "+ testOffer.kitPricing.size()

// Check if the element is present 
assert 1 == testOffer.kitPricing.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of kitPricing.currency" id="9b71c9a3-1390-46a6-8494-cc1b6f0f6444"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def actVal = testOffer.kitPricing.@currency

def expVal = "USD"

log.info " [EXPECTED | ACTUAL] - [Element: kitPricing.currency] - [[Expected = $expVal | Actual = $actVal ]"
assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of omxData" id="1e0c92e2-1f26-42e8-a19b-4cbd90fdcf04"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

log.info "[EXPECTED | ACTUAL] - [omxData] = Element presence: "+ testOffer.omxData.size() + " | cid: "+ testOffer.omxData.@cid


// Check if the element is present 
assert 1 == testOffer.omxData.size()

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a9cf8aa7-f728-4bbf-b3c5-4927b7e5090d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>273571cb-969b-4554-a16e-aa18c8064013</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fc56fd26-b628-4416-9f93-573d590631a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>01f461c7-65d8-4075-8c2c-de7f0c88d59c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="ff00600a-aa8b-425d-8ba5-353f211e90a9" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS01-TC04 - VERIFY  DATA EXISTENCE SPECIFIED CUSTOMIZATION OFFERS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="SetTestDataInputFile" id="d2577d36-5954-481f-b691-5cb702e2c59b"><con:settings/><con:config><script>context.testDataLoadMOfferSearch </script></con:config></con:testStep><con:testStep type="datasource" name="GetCustomizedOffers" id="bc2d6441-859c-4322-9dca-a556c3f514cb"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>specificiedoffers</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>c_offer_code</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="restrequest" name="CustomizedSpecifiedOfferRequest" id="a7e55995-c76d-4df3-917d-ca0f36bf0b27"><con:settings/><con:config service="Customization-SpecifiedOfferAPI" resourcePath="/snapshot/customizationoffers/{OfferId}" methodName="Customizationoffers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CustomizedSpecifiedOfferRequest" id="870514a4-99a7-4239-be0f-cd5abde53c03" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://cs-customizationoffer.cloudhub.io/snapshot/customizationoffers/C333K</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ff26770d-2400-4a13-9d24-cdbefaa2e2ba" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="OfferId" value="${GetCustomizedOffers#c_offer_code}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>OfferId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Customized Offers From Response" id="d004ae8c-0403-4577-9346-5dbbd2847675"><con:settings/><con:config><script>// Obtain API response into a variable
def response = context.expand( '${CustomizedSpecifiedOfferRequest#Response}' )


//put reposne in contex
//context.setProperty("xmlResponse", response)

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response) 
// Put the root in the 'context'

//context.setProperty("xmlRoot", root)
// Now get all 'marketingOffers' nodes

def customizationOffer = root.customizationOffer // Remembr root is "snapshots" for Change API response XML

// Keep the test offer in context to allow other steps access it
context.setProperty("customizationOffer",  customizationOffer)


</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of status" id="2099599e-c430-4f9a-a9bf-9cb134656b48"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>
def testOffer = context.customizationOffer

def actVal = testOffer.status.text()

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

def sql = context.snp
def query = "select STATUS from VW_CUSTOMIZATION_OFFERS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def status = res.get(0)["status"]

log.info "STATUS: EXPECTED = ${status} -- ACTUAL = ${actVal}"
if (status != null || status != ""){
	assert actVal.equals(status) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + status + "' | ACTUAL - '" + actVal +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of description" id="2ad49d00-850c-4ae4-83ca-10454d00c10f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def actVal = testOffer.description.text()

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

def sql = context.snp
def query = "select CUSTOMIZATION_OFFER_NAME from VW_CUSTOMIZATION_OFFERS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def CUSTOMIZATION_OFFER_NAME = res.get(0)["CUSTOMIZATION_OFFER_NAME"]

log.info "CUSTOMIZATION_OFFER_NAME: EXPECTED = ${CUSTOMIZATION_OFFER_NAME} -- ACTUAL = ${actVal}"
if (CUSTOMIZATION_OFFER_NAME != null || CUSTOMIZATION_OFFER_NAME != ""){
	assert actVal.equals(CUSTOMIZATION_OFFER_NAME) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + CUSTOMIZATION_OFFER_NAME + "' | ACTUAL - '" + actVal +"'"
}



</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of hostProductLineCode" id="a357c562-2eb2-403a-b644-645314dde1ae"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def actVal = testOffer.hostProductLineCode.text()

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

def sql = context.snp
def query = "select HOST_PRODUCT_LINE_CODE from VW_CUSTOMIZATION_OFFERS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def HOST_PRODUCT_LINE_CODE = res.get(0)["HOST_PRODUCT_LINE_CODE"]

log.info "HOST_PRODUCT_LINE_CODE: EXPECTED = ${HOST_PRODUCT_LINE_CODE} -- ACTUAL = ${actVal}"
if (HOST_PRODUCT_LINE_CODE != null || HOST_PRODUCT_LINE_CODE != ""){
	assert actVal.equals(HOST_PRODUCT_LINE_CODE) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + HOST_PRODUCT_LINE_CODE + "' | ACTUAL - '" + actVal +"'"
}





</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of priceTable" id="10663b1d-8db2-45e8-b4d8-1bb1fe52e8db"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def actVal = testOffer.priceGroupId.@table.text()

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

def sql = context.snp
def query = "select PRICETABLE_CODE from VW_CUSTOMIZATION_OFFERS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def PRICETABLE_CODE = res.get(0)["PRICETABLE_CODE"]

log.info "PRICETABLE_CODE: EXPECTED = ${PRICETABLE_CODE} -- ACTUAL = ${actVal}"
if (PRICETABLE_CODE != null || PRICETABLE_CODE != ""){
	assert actVal.equals(PRICETABLE_CODE) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + PRICETABLE_CODE + "' | ACTUAL - '" + actVal +"'"
}







</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of shippingTable" id="3a2c20b9-2278-4880-b161-1d5b0f13c2f1"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def actVal = testOffer.shippingTableId.text()

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

def sql = context.snp
def query = "select SH_RATE_CODE from VW_CUSTOMIZATION_OFFERS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def SH_RATE_CODE = res.get(0)["SH_RATE_CODE"]

log.info "SH_RATE_CODE: EXPECTED = ${SH_RATE_CODE} -- ACTUAL = ${actVal}"
if (SH_RATE_CODE != null || SH_RATE_CODE != ""){
	assert actVal.equals(SH_RATE_CODE) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + SH_RATE_CODE + "' | ACTUAL - '" + actVal +"'"
}







</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of totalQuantityMin" id="b69e8984-aa71-4a02-9d62-98a7e9701be7"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def actVal = testOffer.totalQuantity.@min

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

def sql = context.snp
def query = "select TOTAL_QUANTITY_MIN from VW_CUSTOMIZATION_OFFERS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def TOTAL_QUANTITY_MIN = res.get(0)["TOTAL_QUANTITY_MIN"]

log.info "TOTAL_QUANTITY_MIN: EXPECTED = ${TOTAL_QUANTITY_MIN} -- ACTUAL = ${actVal}"
if (TOTAL_QUANTITY_MIN != null || TOTAL_QUANTITY_MIN != ""){
	assert actVal.equals(TOTAL_QUANTITY_MIN) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + TOTAL_QUANTITY_MIN + "' | ACTUAL - '" + actVal +"'"
}









</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of totalQuantityMax" id="54892d08-2da2-4e03-9f13-26769f89f02f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def actVal = testOffer.totalQuantity.@max

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

def sql = context.snp
def query = "select TOTAL_QUANTITY_MAX from VW_CUSTOMIZATION_OFFERS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def TOTAL_QUANTITY_MAX = res.get(0)["TOTAL_QUANTITY_MAX"]

log.info "TOTAL_QUANTITY_MAX: EXPECTED = ${TOTAL_QUANTITY_MAX} -- ACTUAL = ${actVal}"
if (TOTAL_QUANTITY_MAX != null || TOTAL_QUANTITY_MAX != ""){
	assert actVal.equals(TOTAL_QUANTITY_MAX) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + TOTAL_QUANTITY_MAX + "' | ACTUAL - '" + actVal +"'"
}









</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of Kititem.inclusion" id="894098e6-0266-48ef-9c9e-d6a846b3eb0a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def temp =testOffer.selectionGroups.selectionGroup.kitItem.size()

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

log.info temp+" Kit Items are avialable for this customization offer :"+c_offer_code

if( testOffer.selectionGroups.selectionGroup.kitItem.size() >0)
{
	testOffer.selectionGroups.selectionGroup.kitItem.each { kitItem ->
		
		def actVal = kitItem.inclusion.text()
		
		def sql = context.snp
		def query = "select INCLUSION_TYPE_DESCRIPTION from VW_CUSTOMIZATION_OFFER_DETAILS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"' and INCLUSION_TYPE_DESCRIPTION = '"+actVal+"'"
		
		// Run query
		def res = sql.rows(query)
		
		// From DB get values for all components
		def INCLUSION_TYPE_DESCRIPTION = res.get(0)["INCLUSION_TYPE_DESCRIPTION"]
		
		log.info "INCLUSION_TYPE_DESCRIPTION: EXPECTED = ${INCLUSION_TYPE_DESCRIPTION} -- ACTUAL = ${actVal}"
		if (INCLUSION_TYPE_DESCRIPTION != null || INCLUSION_TYPE_DESCRIPTION != ""){
			assert actVal.equals(INCLUSION_TYPE_DESCRIPTION) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + INCLUSION_TYPE_DESCRIPTION + "' | ACTUAL - '" + actVal +"'"
		}
	}


} else
{
	log.info  "KitItemas are not avialable for this Customizeed Offer"
}













</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of Kititem.productId" id="2adc7909-addd-4219-958c-3d345d5ec5cc"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def temp =testOffer.selectionGroups.selectionGroup.kitItem.size()

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

log.info temp+" Kit Items are avialable for this customization offer :"+c_offer_code

if( testOffer.selectionGroups.selectionGroup.kitItem.size() >0)
{
	testOffer.selectionGroups.selectionGroup.kitItem.each { kitItem ->
		
		def actVal = kitItem.productId.text()
		
		def sql = context.snp
		def query = "select PRODUCT_CODE from VW_CUSTOMIZATION_OFFER_DETAILS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"' and PRODUCT_CODE = '"+actVal+"'"
		
		// Run query
		def res = sql.rows(query)
		
		// From DB get values for all components
		def PRODUCT_CODE = res.get(0)["PRODUCT_CODE"]
		
		log.info "PRODUCT_CODE: EXPECTED = ${PRODUCT_CODE} -- ACTUAL = ${actVal}"
		if (PRODUCT_CODE != null || PRODUCT_CODE != ""){
			assert actVal.equals(PRODUCT_CODE) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + PRODUCT_CODE + "' | ACTUAL - '" + actVal +"'"
		}
	}


} else
{
	log.info  "KitItemas are not avialable for this Customizeed Offer"
}


























</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of Kititem.description" id="a6dad0cd-0491-4e59-b3d2-0cbbf12df653"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def temp =testOffer.selectionGroups.selectionGroup.kitItem.size()

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

log.info temp+" Kit Items are avialable for this customization offer :"+c_offer_code

if( testOffer.selectionGroups.selectionGroup.kitItem.size() >0)
{
	testOffer.selectionGroups.selectionGroup.kitItem.each { kitItem ->
		
		def actVal = kitItem.description.text()

		def productId = kitItem.productId.text()
		
		def sql = context.snp
		def query = "select PRODUCT_MKT_DESCRIPTION from VW_CUSTOMIZATION_OFFER_DETAILS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"' and PRODUCT_CODE = '"+productId+"'"
		
		// Run query
		def res = sql.rows(query)
		
		// From DB get values for all components
		def PRODUCT_MKT_DESCRIPTION = res.get(0)["PRODUCT_MKT_DESCRIPTION"]
		
		log.info "PRODUCT_MKT_DESCRIPTION: EXPECTED = ${PRODUCT_MKT_DESCRIPTION} -- ACTUAL = ${actVal}"
		if (PRODUCT_MKT_DESCRIPTION != null || PRODUCT_MKT_DESCRIPTION != ""){
			assert actVal.equals(PRODUCT_MKT_DESCRIPTION) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + PRODUCT_MKT_DESCRIPTION + "' | ACTUAL - '" + actVal +"'"
		}
	}


} else
{
	log.info  "KitItemas are not avialable for this Customizeed Offer"
}




















</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of Kititem.quantity" id="0f412ee3-138c-4fc7-9938-5ed10d3785f2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def temp =testOffer.selectionGroups.selectionGroup.kitItem.size()

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

log.info temp+" Kit Items are avialable for this customization offer :"+c_offer_code

if( testOffer.selectionGroups.selectionGroup.kitItem.size() >0)
{
	testOffer.selectionGroups.selectionGroup.kitItem.each { kitItem ->
		
		if(kitItem.quantity.size() > 0)
		{
			def actValAuto = kitItem.quantity.@auto
			def actValMin = kitItem.quantity.@min
			def actValMax = kitItem.quantity.@max

			def productId = kitItem.productId.text()

			def dynamicFiled = ""
			def caseName=""

			if(actValAuto != "")
			{
				dynamicFiled = "PRODUCT_QUANTITY_AUTO"
				caseName = "autoonly"
			} 
			else if(actValMin != "" &amp;&amp; actValMax != "")
			{
				dynamicFiled = "PRODUCT_QUANTITY_MIN,PRODUCT_QUANTITY_MAX"
				caseName = "minandmax"
			} else if(actValMin != "")
			{
				dynamicFiled = "PRODUCT_QUANTITY_MIN"
				caseName="minonly"
			}			
	
			log.info "actValAuto.."+actValAuto+" actValMin.."+actValMin+" actValMax "+actValMax
			log.info "dynamicFiled.."+dynamicFiled
			log.info "caseName.."+caseName					
			
			
			def sql = context.snp
			def query = "select " +dynamicFiled+ " from VW_CUSTOMIZATION_OFFER_DETAILS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"' and PRODUCT_CODE = '"+productId+"'"

			log.info "query.."+query	
	
			// Run query
			def res = sql.rows(query)

			if(caseName.equals("autoonly"))
			{
				def PRODUCT_QUANTITY_AUTO = res.get(0)["PRODUCT_QUANTITY_AUTO"]
				log.info "PRODUCT_QUANTITY_AUTO: EXPECTED = ${PRODUCT_QUANTITY_AUTO} -- ACTUAL = ${actValAuto}"
				assert actValAuto.equals(PRODUCT_QUANTITY_AUTO) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + PRODUCT_QUANTITY_AUTO  + "' | ACTUAL - '" + actValAuto +"'"
			} else if (caseName.equals("minandmax"))
			{

				def PRODUCT_QUANTITY_MIN = res.get(0)["PRODUCT_QUANTITY_MIN"]
				def PRODUCT_QUANTITY_MAX = res.get(0)["PRODUCT_QUANTITY_MAX"]

				def actminandmax = actValMin.toString()+"-"+actValMax.toString()
				def expected = PRODUCT_QUANTITY_MIN+"-"+PRODUCT_QUANTITY_MAX
			
				log.info "PRODUCT_QUANTITY_MIN_MAX: EXPECTED = ${expected} -- ACTUAL = ${actminandmax}"
				assert actminandmax.equals(expected) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + PRODUCT_QUANTITY_MIN+"-"+PRODUCT_QUANTITY_MAX  + "' | ACTUAL - '" + actminandmax +"'"
				
			} else if (caseName.equals("minonly"))
			{
				def PRODUCT_QUANTITY_MIN = res.get(0)["PRODUCT_QUANTITY_MIN"]
				log.info "PRODUCT_QUANTITY_MIN: EXPECTED = ${PRODUCT_QUANTITY_MIN} -- ACTUAL = ${actValMin}"
				assert actValMin.equals(PRODUCT_QUANTITY_MIN) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + PRODUCT_QUANTITY_MIN  + "' | ACTUAL - '" + actValMin +"'"
			}
	
			
		} else
		{
			log.info "Quantity Node doesnt exists for the product.."+kitItem.productId.text()
		}
	}


} else
{
	log.info  "KitItemas are not avialable for this Customizeed Offer"
}




















</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of KitPricing" id="d81f5c6b-5a12-4dbb-b493-2c60fab8e29a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>0df08040-bb61-408c-a435-6e7a132d95a1</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8f329dca-7a0e-43f9-8d26-7f3cb0532952"><con:configuration><scriptText>def testOffer = context.customizationOffer

// Check if the element is present 
if (testOffer.kitPricing.size() > 0)
{	
	if(testOffer.kitPricing.floorPrice.size() > 0)
	{
		log.info "floorPrice node available.."

		def actVal = testOffer.kitPricing.floorPrice.text().toString()
		
		def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )
		
		def sql = context.snp
		def query = "select FLOOR_PRICE from VW_CUSTOMIZATION_OFFERS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"'"
		
		// Run query
		def res = sql.rows(query)
		
		// From DB get values for all components
		def FLOOR_PRICE = res.get(0)["FLOOR_PRICE"].toString()
		
		log.info "FLOOR_PRICE: EXPECTED = ${FLOOR_PRICE} -- ACTUAL = ${actVal}"
		if (FLOOR_PRICE != null || FLOOR_PRICE != ""){
			assert actVal.equals(FLOOR_PRICE) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + FLOOR_PRICE + "' | ACTUAL - '" + actVal +"'"
		}
		
	} else if(testOffer.kitPricing.adjustmentAmount.size() > 0)
	{
		log.info "adjustmentAmount node available.."
		def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )
		def actVal = testOffer.kitPricing.adjustmentAmount.text().toString()
		
		def sql = context.snp
		def query = "select ADJUSTMENT_AMOUNT from VW_CUSTOMIZATION_OFFERS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"'"
		
		// Run query
		def res = sql.rows(query)
		
		// From DB get values for all components
		def ADJUSTMENT_AMOUNT = res.get(0)["ADJUSTMENT_AMOUNT"].toString()
		
		log.info "ADJUSTMENT_AMOUNT: EXPECTED = ${ADJUSTMENT_AMOUNT} -- ACTUAL = ${actVal}"
		if (ADJUSTMENT_AMOUNT != null || ADJUSTMENT_AMOUNT != ""){
			assert actVal.equals(ADJUSTMENT_AMOUNT) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + ADJUSTMENT_AMOUNT + "' | ACTUAL - '" + actVal +"'"
		} 
		
	}
		
} else
{
	log.info "KitPricing Node not exists from API response"
}






</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify DB existence of omxData" id="ec5d03e3-2846-49ea-a2b4-b7fa42ff78be"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2ffd3fa3-5d60-41f2-aa7c-9fc134c58e0a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a7e55995-c76d-4df3-917d-ca0f36bf0b27</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f715a7ee-e670-4a0a-bef1-e76a99313483"><con:configuration><scriptText>def testOffer = context.customizationOffer

def actVal = testOffer.omxData.@cid

def c_offer_code = context.expand( '${GetCustomizedOffers#c_offer_code}' )

def sql = context.snp
def query = "select OMX_CID from VW_CUSTOMIZATION_OFFERS where CUSTOMIZATION_OFFER_CODE = '" + c_offer_code+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def OMX_CID = res.get(0)["OMX_CID"]
if (OMX_CID.equals(null))
{
	OMX_CID =0
}

log.info "OMX_CID: EXPECTED = ${OMX_CID} -- ACTUAL = ${actVal}"
if (OMX_CID != null || OMX_CID != ""){
	assert actVal.equals(OMX_CID) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + OMX_CID + "' | ACTUAL - '" + actVal +"'"
}















</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="359a9022-0d7f-4d75-8790-1d7c0b407c7e"><con:settings/><con:config><dataSourceStep>GetCustomizedOffers</dataSourceStep><targetStep>CustomizedSpecifiedOfferRequest</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('SnpQA')
context.snpQA = Sql.newInstance(ConObj.getConnectionString(), props);

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\CustomizationOffer\\OFM-CUSTOMIZED-SEARCH-TESTDATA.xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 










</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a9cf8aa7-f728-4bbf-b3c5-4927b7e5090d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>273571cb-969b-4554-a16e-aa18c8064013</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fc56fd26-b628-4416-9f93-573d590631a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>01f461c7-65d8-4075-8c2c-de7f0c88d59c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0cb6a5b7-b6eb-415d-856f-6e7f090a7b37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3a2c20b9-2278-4880-b161-1d5b0f13c2f1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54892d08-2da2-4e03-9f13-26769f89f02f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bc2d6441-859c-4322-9dca-a556c3f514cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81f5c6b-5a12-4dbb-b493-2c60fab8e29a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f412ee3-138c-4fc7-9938-5ed10d3785f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">${#Project#endpoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>endpoint</con:name><con:value>http://10.92.41.155:8380</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-09-08T16:51:00</con:value></con:property><con:property><con:name>product</con:name><con:value>PA</con:value></con:property><con:property><con:name>ActiveEnv</con:name><con:value>CI</con:value></con:property><con:property><con:name>username</con:name></con:property><con:property><con:name>password</con:name></con:property></con:properties><con:afterLoadScript>import groovy.util.*
import java.io.File	// You need Java File utils

// Get projects active environment
log.info "Active Environment set to : "+ project.activeEnvironment.name 
def active_env = context.expand( '${#Project#ActiveEnv}' )

// Set this as active environment
project.setActiveEnvironment(active_env)
log.info "Confirm Active Env name: " + project.activeEnvironment.name

// Get SoapUI Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile()

// Get Confg File Location
def confFile = sourcePath.toString() + "/Config/customization_offer_soapui.properties.groovy"
log.info "Config File Name is: " + confFile

// Find active environment and get the endpoint URL
def config = new ConfigSlurper().parse(new File(confFile).toURL())
def env = config.active_env
log.info " - Active Environment is: " + env
def endpoint = config.endpoints."$env".endpoint
def path = config.endpoints."$env".path

// Set project level property
project.setPropertyValue( "endpoint",endpoint.toString() )
project.setPropertyValue( "path",path.toString() )

def username = config.http_auth.username
def password = config.http_auth.password
log.info " - HTTP Authentication user name/password : " + username + " / "+ password
project.setPropertyValue( "username",username.toString() )
project.setPropertyValue( "password",password.toString() )


TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
def afterValue=new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
log.info "After at load.."+afterValue 

log.info "afterValue.toString().."+afterValue.toString()

// Set default values for 'after'
project.setPropertyValue( "after",afterValue.toString())


</con:afterLoadScript><con:wssContainer/><con:databaseConnectionContainer><con:databaseConnection><con:name>Setup</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUP/APPCAr35ex@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>c</con:password></con:databaseConnection><con:databaseConnection><con:name>Snp</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:x</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Base</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Procs</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>SnpQA</con:name><con:driver>sun.jdbc.odbc.JdbcOdbcDriver</con:driver><con:connectionString>jdbc:odbc:df?user=fc&amp;password=PASS_VALUE</con:connectionString><con:password>ffdf</con:password></con:databaseConnection></con:databaseConnectionContainer><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:reportTemplates><con:name>Changed Offer Report</con:name><con:reportType>TESTSUITE</con:reportType><con:reportLevel>MAINREPORT</con:reportLevel><con:data><![CDATA[<jasperReport xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="ReportTemplate" language="groovy" pageWidth="595" pageHeight="842" columnWidth="555" leftMargin="20" rightMargin="20" topMargin="30" bottomMargin="30" xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <property name="ireport.encoding" value="UTF-8"/>
   <template>"../../styles.jrtx"</template>
   <!--FIELDS & PARAMS-->
   <title>
      <band height="70">
         <textField>
            <reportElement x="159" y="13" width="229" height="42"/>
            <textElement>
               <font size="26"/>
            </textElement>
            <textFieldExpression class="java.lang.String">$F{name} + " Report"</textFieldExpression>
         </textField>
      </band>
   </title>
   <pageHeader>
      <band/>
   </pageHeader>
   <detail>
      <band height="122">
         <!--SUBREPORTS UNDER HERE-->
         <subreport isUsingCache="true">
            <reportElement positionType="Float" isPrintRepeatedValues="false" x="0" y="0" width="500" height="30"/>
            <dataSourceExpression>$P{FailedTestSteps}</dataSourceExpression>
            <subreportExpression>"subreport:FailedTestStepsReport"</subreportExpression>
         </subreport>
         <subreport isUsingCache="true">
            <reportElement positionType="Float" isPrintRepeatedValues="false" x="0" y="0" width="500" height="30"/>
            <dataSourceExpression>$P{TestCaseCoverage}</dataSourceExpression>
            <subreportExpression>"subreport:TestCaseCoverageChart"</subreportExpression>
         </subreport>
         <subreport isUsingCache="true">
            <reportElement positionType="Float" isPrintRepeatedValues="false" x="0" y="0" width="500" height="30"/>
            <dataSourceExpression>$P{TestStepResults}</dataSourceExpression>
            <subreportExpression>"subreport:TestStepResultsReport"</subreportExpression>
         </subreport>
      </band>
   </detail>
</jasperReport>]]></con:data><con:subreports>FailedTestStepsReport</con:subreports><con:subreports>TestCaseCoverageChart</con:subreports><con:subreports>TestStepResultsReport</con:subreports><con:scope>PROJECT</con:scope></con:reportTemplates><con:reportTemplates>
  <con:name>Changed Offer Test Suite Report</con:name>
  <con:reportType>TESTSUITE</con:reportType>
  <con:reportLevel>SUBREPORT</con:reportLevel>
  <con:nameInReport>FailedTestSteps</con:nameInReport>
  <con:data xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<jasperReport xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="FailedTestSteps" language="groovy" pageWidth="535" pageHeight="842" whenNoDataType="AllSectionsNoDetail" columnWidth="535" leftMargin="0" rightMargin="0" topMargin="0" bottomMargin="0" xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <property name="ireport.encoding" value="UTF-8"/>
   <template>"../../styles.jrtx"</template>
   <parameter name="FlowLayout" class="java.lang.Boolean"/>
   <field name="testStepName" class="java.lang.String"/>
   <field name="messages" class="java.util.List"/>
   <field name="detail" class="java.lang.String"/>
   <field name="icon" class="java.lang.String"/>
   <detail>
      <band height="101">
         <break>
            <reportElement positionType="Float" x="0" y="1" width="100" height="1">
               <printWhenExpression>!$P{FlowLayout}</printWhenExpression>
            </reportElement>
         </break>
         <textField isStretchWithOverflow="true">
            <reportElement style="Code" x="1" y="73" width="535" height="27"/>
            <textElement/>
            <textFieldExpression class="java.lang.String">$F{detail}</textFieldExpression>
         </textField>
         <textField isStretchWithOverflow="true">
            <reportElement style="ColumnHeader" x="1" y="4" width="534" height="30" isRemoveLineWhenBlank="true"/>
            <box bottomPadding="0">
               <pen lineStyle="Double"/>
               <topPen lineStyle="Double"/>
               <leftPen lineStyle="Double"/>
               <bottomPen lineStyle="Double"/>
               <rightPen lineStyle="Double"/>
            </box>
            <textElement verticalAlignment="Middle"/>
            <textFieldExpression class="java.lang.String">"Failed TestStep: " + $F{testStepName}</textFieldExpression>
         </textField>
         <textField>
            <reportElement x="0" y="34" width="535" height="28"/>
            <textElement/>
            <textFieldExpression class="java.lang.String">$F{messages}</textFieldExpression>
         </textField>
         <line>
            <reportElement x="1" y="67" width="534" height="3"/>
         </line>
      </band>
   </detail>
</jasperReport>]]></con:data>
  <con:description>NO DESC</con:description>
  <con:scope>PROJECT</con:scope>
  <con:dataSource>ModelItem Properties</con:dataSource>
</con:reportTemplates><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/><con:environment name="CI"><con:service type="REST" name="SearchOfferAPI"><con:endpoint domain="" incomingWss="" outgoingWss="" password="" username="" wssTimeToLive="" wssType="">http://10.92.41.155:8380</con:endpoint></con:service><con:service type="REST" name="Customization-SpecifiedOfferAPI"><con:endpoint>${#Project#endpoint}</con:endpoint></con:service><con:service type="REST" name="Customization-SearchOfferAPI"><con:endpoint>${#Project#endpoint}</con:endpoint></con:service><con:service type="REST" name="Customization-ChangedOfferAPI"><con:endpoint>${#Project#endpoint}</con:endpoint></con:service><con:property><con:name>endpoint</con:name><con:value>http://csapi-customizationoffer-ci.cloudhub.io</con:value></con:property><con:property><con:name>after</con:name><con:value>2015-06-02T18:00:09Z</con:value></con:property><con:property><con:name>product</con:name><con:value>PA</con:value></con:property><con:property><con:name>ActiveEnv</con:name><con:value>CI</con:value></con:property><con:property><con:name>username</con:name><con:value>rnalluri</con:value></con:property><con:property><con:name>password</con:name><con:value>Welcome1</con:value></con:property><con:property><con:name>afterUpdate</con:name><con:value>2015-02-11T02:43:30Z</con:value></con:property><con:property><con:name>s_after</con:name><con:value>2015-05-11T20:52:51Z</con:value></con:property><con:property><con:name>filepathloaddata</con:name><con:value/></con:property><con:property><con:name>tdFileXLSX</con:name><con:value/></con:property><con:property><con:name>path</con:name><con:value>[:]</con:value></con:property><con:databaseConnectionContainer><con:databaseConnection><con:name>Setup</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUP/APPCAr35ex@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password/></con:databaseConnection><con:databaseConnection><con:name>Snp</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/APPCSun445@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Base</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SetupCIbase/APPC53Bqwz@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Procs</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:setupciprocs/APPC53procs@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>SnpQA</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/APPTA7gSap@//ebsqa-scan.grc-network.net:1521/s_appdbtst</con:connectionString><con:password>sdsd</con:password></con:databaseConnection></con:databaseConnectionContainer></con:environment><con:environment name="QA"><con:service type="REST" name="SearchOfferAPI"><con:endpoint domain="" incomingWss="" outgoingWss="" password="" username="" wssTimeToLive="" wssType="">http://10.92.41.155:8380</con:endpoint></con:service><con:service type="REST" name="Customization-SpecifiedOfferAPI"><con:endpoint/></con:service><con:service type="REST" name="Customization-SearchOfferAPI"><con:endpoint/></con:service><con:service type="REST" name="Customization-ChangedOfferAPI"><con:endpoint/></con:service><con:property><con:name>endpoint</con:name><con:value/></con:property><con:property><con:name>after</con:name><con:value/></con:property><con:property><con:name>product</con:name><con:value/></con:property><con:property><con:name>ActiveEnv</con:name><con:value/></con:property><con:property><con:name>username</con:name><con:value/></con:property><con:property><con:name>password</con:name><con:value/></con:property><con:databaseConnectionContainer><con:databaseConnection><con:name>Setup</con:name><con:connectionString>jdbc:oracle:thin:SETUP/APPCAr35ex@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString></con:databaseConnection><con:databaseConnection><con:name>Snp</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:x</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Base</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Procs</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>SnpQA</con:name><con:driver>COM.cloudscape.core.JDBCDriver</con:driver><con:connectionString>jdbc:cloudscape:sds?user=SETUPSNAPSHOT&amp;password=PASS_VALUE</con:connectionString><con:password>sdsd</con:password></con:databaseConnection></con:databaseConnectionContainer></con:environment></con:soapui-project>