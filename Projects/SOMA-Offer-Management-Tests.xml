<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e649b1a4-8605-44bd-966a-aa197a79d344" activeEnvironment="CI" name="P01 - SOMA Offer Management Automation" resourceRoot="" soapui-version="5.1.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="TestSuite Report"/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\test</con:setting></con:settings><con:interface xsi:type="con:RestService" id="c98b3855-d428-480c-858a-0a47cf31622d" wadlVersion="http://wadl.dev.java.net/2009/02" name="ChangedOfferAPI" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#endpoint}</con:endpoint><con:endpoint>http://GBRREDDY:8080/</con:endpoint></con:endpoints><con:resource name="Web" path="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" id="d80f7076-c4ff-455e-b2e4-c5531f76dc06"><con:settings/><con:parameters><con:parameter><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value><con:style>QUERY</con:style><con:default>2014-08-08T16:51:00</con:default><con:path xsi:nil="true"/><con:option>2014-08-08T16:51:00</con:option><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>filter</con:name><con:value>web</con:value><con:style>TEMPLATE</con:style><con:default>web</con:default></con:parameter><con:parameter><con:name>path</con:name><con:value>soma-ws-qa/ws/rest/v1/snapshot</con:value><con:style>TEMPLATE</con:style><con:default>soma-ws-qa/ws/rest/v1/snapshot</con:default></con:parameter></con:parameters><con:method name="Web" id="208eb527-463a-4278-af46-ffa878355044" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:snapshots</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403 500</con:status><con:params/><con:element xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:error</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:request><con:request name="ChangedOfferAPIReq2" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>svedala</con:username><con:password>SVgr2014</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="2014-09-01T16:51:00"/>
  <con:entry key="path" value="soma-ws-qa"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:inferredSchema><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<inf:schema xmlns:inf="http://www.eviware.com/soapui/InferredSchema"><inf:namespace>http://ws.guthy-renker.com/soma/201407</inf:namespace><inf:particle xsi:type="inf:ElementParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>snapshots</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:_snapshots</inf:reference></inf:type></inf:particle><inf:prefix key="http://www.w3.org/2001/XMLSchema" value="xs"/><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>web_tlmTollFreeNumber</inf:name><inf:content xsi:type="inf:EmptyContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>false</inf:completed></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>web_maxQuantity</inf:name><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>positiveInteger</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>paymentDetail_twoDayShipping</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>available</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>decimal</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_derivation</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>sourceKey-Ref</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:derivation_sourceKey-Ref</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>promotionTemplateCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>offerPanelCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>offerCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>itemCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="ns:promotionTemplateCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:offerPanelCode</inf:other><inf:other>ns:offerCode</inf:other><inf:other>ns:itemCode</inf:other></inf:comesBefore><inf:comesBefore qname="ns:offerPanelCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:offerCode</inf:other><inf:other>ns:itemCode</inf:other></inf:comesBefore><inf:comesBefore qname="ns:offerCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:itemCode</inf:other></inf:comesBefore><inf:comesBefore qname="ns:itemCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/><inf:comesBefore qname="ns:sourceKey-Ref" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:promotionTemplateCode</inf:other><inf:other>ns:offerPanelCode</inf:other><inf:other>ns:offerCode</inf:other><inf:other>ns:itemCode</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>paymentDetail_stdShipping</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>available</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>decimal</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_web</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>cartTitle</inf:name><inf:attribute key="nillable" value="true"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:web_cartTitle</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>cartLanguage</inf:name><inf:attribute key="nillable" value="true"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:web_cartLanguage</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>maxQuantity</inf:name><inf:attribute key="nillable" value="true"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:web_maxQuantity</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>coreItem</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>tlmTollFreeNumber</inf:name><inf:attribute key="nillable" value="true"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:web_tlmTollFreeNumber</inf:reference></inf:type></inf:particle><inf:comesBefore qname="ns:cartTitle" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:cartLanguage</inf:other><inf:other>ns:maxQuantity</inf:other><inf:other>ns:coreItem</inf:other><inf:other>ns:tlmTollFreeNumber</inf:other></inf:comesBefore><inf:comesBefore qname="ns:cartLanguage" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:maxQuantity</inf:other><inf:other>ns:coreItem</inf:other><inf:other>ns:tlmTollFreeNumber</inf:other></inf:comesBefore><inf:comesBefore qname="ns:maxQuantity" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:coreItem</inf:other><inf:other>ns:tlmTollFreeNumber</inf:other></inf:comesBefore><inf:comesBefore qname="ns:coreItem" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:tlmTollFreeNumber</inf:other></inf:comesBefore><inf:comesBefore qname="ns:tlmTollFreeNumber" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>paymentDetail_sameDayShipping</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>available</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>decimal</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>snapshots_marketingOffers</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>marketingOffer</inf:name><inf:attribute key="maxOccurs" value="10"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffers_marketingOffer</inf:reference></inf:type></inf:particle><inf:comesBefore qname="ns:marketingOffer" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_hpData</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>hpKeycode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>hpProductNumber</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>hpMpgCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="ns:hpMpgCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/><inf:comesBefore qname="ns:hpProductNumber" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:hpMpgCode</inf:other></inf:comesBefore><inf:comesBefore qname="ns:hpKeycode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:hpProductNumber</inf:other><inf:other>ns:hpMpgCode</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>_snapshots</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>query</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>mask</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>currentAsOf</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>dateTime</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>marketingOffers</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:snapshots_marketingOffers</inf:reference></inf:type></inf:particle><inf:comesBefore qname="ns:marketingOffers" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/><inf:comesBefore qname="ns:currentAsOf" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:marketingOffers</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_venue</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>code</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>supervenue</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="ns:supervenue" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>marketingOffer_status</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>name</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>string</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_paymentDetail</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>currency</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>unitPrice</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>decimal</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>numberPayments</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>nonNegativeInteger</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>firstPaymentAmount</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>decimal</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>stdShipping</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:paymentDetail_stdShipping</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>rushShipping</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:paymentDetail_rushShipping</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>twoDayShipping</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:paymentDetail_twoDayShipping</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>sameDayShipping</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:paymentDetail_sameDayShipping</inf:reference></inf:type></inf:particle><inf:comesBefore qname="ns:sameDayShipping" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/><inf:comesBefore qname="ns:rushShipping" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:twoDayShipping</inf:other><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore><inf:comesBefore qname="ns:twoDayShipping" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore><inf:comesBefore qname="ns:stdShipping" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:rushShipping</inf:other><inf:other>ns:twoDayShipping</inf:other><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore><inf:comesBefore qname="ns:firstPaymentAmount" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:stdShipping</inf:other><inf:other>ns:rushShipping</inf:other><inf:other>ns:twoDayShipping</inf:other><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore><inf:comesBefore qname="ns:unitPrice" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:numberPayments</inf:other><inf:other>ns:firstPaymentAmount</inf:other><inf:other>ns:stdShipping</inf:other><inf:other>ns:rushShipping</inf:other><inf:other>ns:twoDayShipping</inf:other><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore><inf:comesBefore qname="ns:numberPayments" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:firstPaymentAmount</inf:other><inf:other>ns:stdShipping</inf:other><inf:other>ns:rushShipping</inf:other><inf:other>ns:twoDayShipping</inf:other><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>derivation_sourceKey-Ref</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>entityId</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>code</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>uri</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:EmptyContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>web_cartLanguage</inf:name><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>string</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>web_cartTitle</inf:name><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>string</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_fulfillment</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>ffs</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="ns:ffs" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>paymentDetail_rushShipping</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>available</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>decimal</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>marketingOffers_marketingOffer</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>event</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>entityId</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>intent</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>code</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>productLineCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>hostProductLineCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>status</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_status</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>readyDate</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>dateTime</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>liveDate</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>dateTime</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>endDate</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>dateTime</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>derivation</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_derivation</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>venue</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_venue</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>secureCampaign</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>paymentDetail</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_paymentDetail</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>customerServicePhoneNumber</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>web</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_web</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>fulfillment</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_fulfillment</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>hpData</inf:name><inf:attribute key="minOccurs" value="0"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_hpData</inf:reference></inf:type></inf:particle><inf:comesBefore qname="ns:readyDate" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:productLineCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:hostProductLineCode</inf:other><inf:other>ns:status</inf:other><inf:other>ns:readyDate</inf:other><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:status" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:readyDate</inf:other><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:hostProductLineCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:status</inf:other><inf:other>ns:readyDate</inf:other><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:fulfillment" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:paymentDetail" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:liveDate" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:code" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:productLineCode</inf:other><inf:other>ns:hostProductLineCode</inf:other><inf:other>ns:status</inf:other><inf:other>ns:readyDate</inf:other><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:hpData" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/><inf:comesBefore qname="ns:endDate" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:web" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:intent" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:code</inf:other><inf:other>ns:productLineCode</inf:other><inf:other>ns:hostProductLineCode</inf:other><inf:other>ns:status</inf:other><inf:other>ns:readyDate</inf:other><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:venue" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:derivation" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:customerServicePhoneNumber" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:secureCampaign" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore></inf:content></inf:complexType></inf:schema>]]></con:inferredSchema></con:interface><con:interface xsi:type="con:RestService" id="aef551f9-cf06-4d54-9ce5-aa108dfbcf9c" wadlVersion="http://wadl.dev.java.net/2009/02" name="SearchOfferAPI" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.92.41.155:8380</con:endpoint></con:endpoints><con:resource name="Web" path="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" id="a23188d9-80cb-4587-a4e6-b5fe1eab43cd"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>status:eq(v)</con:value><con:style>QUERY</con:style><con:default>status:eq(v)</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Web" id="1bd5c3ad-884e-4c3a-ab1f-b3515a9fab8c" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:snapshots</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500</con:status><con:params/><con:element xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:error</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="f84ceb16-5a18-48e0-a012-f3e0372a3668" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="745a86f3-d677-4dd6-959d-5868f0a3a4e3" wadlVersion="http://wadl.dev.java.net/2009/02" name="SpecefiedOfferAPI" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.92.41.155:8380</con:endpoint></con:endpoints><con:resource name="Web" path="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffer/{LOC}/{mask}" id="e890249b-cbdd-4146-a02a-e24f4ea04428"><con:settings/><con:parameters><con:parameter><con:name>LOC</con:name><con:value>LOC</con:value><con:style>TEMPLATE</con:style><con:default>LOC</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>mask</con:name><con:value>web</con:value><con:style>TEMPLATE</con:style><con:default>web</con:default></con:parameter></con:parameters><con:method name="Web" id="b3185665-2ad5-4cdb-bb96-452813e53c7f" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:snapshot</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:error</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="4b1d206a-40e6-4ec3-9cbc-f31963135e8c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffer/LOC/web</con:originalUri><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="LOC" value="B9GE3T" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>LOC</con:entry><con:entry>mask</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="a36d11ea-87e3-4fe4-bb4c-22f635aa2c3f" name="TS01 -Changed Offer Dynamic"><con:settings><con:setting id="GeneratableJUnitReport@Folder">R:\SOAP-Reports</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase id="fededa9d-8345-45b1-a0df-a229afcf3704" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC05 - REMOVE AND ADD OFFER TO HIERARCHY" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="d024cd53-54f0-4540-bb82-b3105fef5702"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 
def ohCode = context.td.get (context.row,"OH_CODE")
log.info "OH CODE is: " + ohCode 
def offer = context.td.get (context.row,"Offer_Code")
log.info "offer is: " + offer 

TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
def afterValue=new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
log.info "After.."+afterValue 
testRunner.testCase.testSuite.project.setPropertyValue("after",afterValue)	

	
// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

def row = context.setup.rows('select count(*) from S_LINKED_COMPONENTS')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0] 


 // Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_WEB_MKT_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete Num Of Rows in Setup DB : " + row1.get(0)[0] 


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}


//Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="6a5f9777-994c-4fbd-a8fc-1a905e14319e"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	

</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="c3fe09f3-0718-44f9-9d4c-302074f5a514"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3af7896-9b96-436b-8831-6c8ecd2c035d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response1" id="c0456741-7a56-4b79-a4f5-fdfd5b03c687"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Offer Exist" id="7a1f6e7f-4d0a-42fc-96a8-5b58ac8dd43a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>c3fe09f3-0718-44f9-9d4c-302074f5a514</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def actVal =  testOffers[context.xidx].derivation.offerCode.text()

log.info "actVal.."+actVal

def expVal = context.td.get (context.row,"Offer_Code")
log.info "expVal.."+expVal

log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"
assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Remove offer from Offer Hierarchy" id="81532f99-dba2-4c3c-88a0-7d4eb62ca8b9"><con:settings/><con:config><script>import groovy.sql.Sql


// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 
def ohCode = context.td.get (context.row,"OH_CODE")
log.info "OH CODE is: " + ohCode 
def offer = context.td.get (context.row,"Offer_Code")
log.info "offer is: " + offer 
def SR_UP_DOWN_CODE = context.td.get (context.row,"SR_UP_DOWN_CODE")
log.info "SR_UP_DOWN_CODE is: " + SR_UP_DOWN_CODE 
	


//Remove Offer to OH
context.procs.call("{? = call qa.remove_hierarchy_node(?,?)}", [Sql.VARCHAR,ohCode, SR_UP_DOWN_CODE] ) { result ->
log.info "Oracle Call 'remove_hierarchy_node' result is: " + result
		}
	

//Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq2" id="d0b94ce9-f49d-4f13-a910-7acd83d5f2f7"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq2" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3af7896-9b96-436b-8831-6c8ecd2c035d" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response2" id="cdaa69b7-d49f-4d72-aa27-5eb729751e60"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq2#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Remove offer from Offer Hierarchy" id="28aa1310-43d5-4c39-a9cd-cf638764e68d"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>a88bc877-0c3b-412e-92df-31ea59cd472f</con:id><con:isGroup>false</con:isGroup><con:sourceId>d0b94ce9-f49d-4f13-a910-7acd83d5f2f7</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="6a1abe13-62b5-4268-b30c-5c3b3a1ca5bd"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

if(testOffers.empty)
{
log.info "Offer has been removed Sucessfully from OH"
assert true
} else
{ 
log.info "Offer has not removed from OH"
assert false
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Add offer to Offer Hierarchy" id="1477c938-d64e-4ddb-999d-11c538411056"><con:settings/><con:config><script>import groovy.sql.Sql


// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 
def ohCode = context.td.get (context.row,"OH_CODE")
log.info "OH CODE is: " + ohCode 
def offer = context.td.get (context.row,"Offer_Code")
log.info "offer is: " + offer 
def SR_UP_DOWN_CODE = context.td.get (context.row,"SR_UP_DOWN_CODE")
log.info "SR_UP_DOWN_CODE is: " + SR_UP_DOWN_CODE 

def TR_UP_DOWN_CODE = context.td.get (context.row,"TR_UP_DOWN_CODE")
log.info "TR_UP_DOWN_CODE is: " + TR_UP_DOWN_CODE

def TR_PARENT_UP_DOWN_CODE = context.td.get (context.row,"TR_PARENT_UP_DOWN_CODE")
log.info "TR_PARENT_UP_DOWN_CODE is: " + TR_PARENT_UP_DOWN_CODE

//Add Offer to OH
context.procs.call("{? = call qa.add_offer_to_hierarchy(?,?,?,?,?,?)}", 
[Sql.VARCHAR,ohCode,offer,SR_UP_DOWN_CODE,ohCode,TR_UP_DOWN_CODE,TR_PARENT_UP_DOWN_CODE] ) 
{ result -> log.info "Oracle Call 'add_offer_to_hierarchy' result is: " + result }
	

//Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq3" id="75179aad-02fd-4ef8-b378-3f1ae3ce0f12"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq3" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3af7896-9b96-436b-8831-6c8ecd2c035d" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response3" id="af2d0a93-b609-44ee-a409-face67338803"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq3#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Offer Added to OH" id="a5ad9fab-bb59-408e-9926-a0677ba4cd94"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>abeae977-14b6-48aa-9abd-0038be0355ad</con:id><con:isGroup>false</con:isGroup><con:sourceId>75179aad-02fd-4ef8-b378-3f1ae3ce0f12</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="428eca3e-d284-4b48-b50b-f28651ab8a77"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def actVal =  testOffers[context.xidx].derivation.offerCode.text()

log.info "actVal.."+actVal

def expVal = context.td.get (context.row,"Offer_Code")
log.info "expVal.."+expVal

log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"
assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:properties/><con:reportParameters/></con:testCase><con:testCase id="43e6cef2-bc73-4319-aa43-7c6f0f657cb2" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC02 - VERIFY AND OVERRIDE CARTS LANGUAGE TEXT" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>Description:
Verifies all elements of Carts language text.

Design:
1)	WEB_CART_TEXT mapping:
-	[DB]  WEB_CART_TEXT (vw_offer_items table) 
-	[UI]  Setup Application ==> Offer page ==> Web ==> Expand Item you want ==> Description text box.
-	[API] This element is substring of text present in"web/ cartLanguage " XML element.
2)	WEB_CART_TITLE mapping
-	[DB] WEB_CART_TITLE  (vw_offer_items table) 
-	[UI]  Setup Application ==> Offer page ==> Web ==> Expand Item you want ==> Title.
-	[API] web/cartTitle XML element
3)	Continuity Disclosure mapping
-	First check that CONT_DISCLOSURE_FLAG is enabled for the given offer. If not Continuity Disclosure Text won't show up in the API response
-	If CONT_DISCLOSURE_FLAG = 1 then following is the mapping.
o	[DB] select DISCLOSURE_TEXT from VW_CONT_DISCLOSURE_TEXT_API where OFFER_ID = --'100103663'--'100103576';
(select OFFER_ID from s_legacy_setup_vsd where OFFER_CODE = 'OPAC93GB' and rownum = 1)
o	[UI]  Setup Application ==> Offer page ==> Web ==> Expand Item you want ==> Continuity Disclosure.
o	[API] This element is substring of text present in"web/ cartLanguage " XML element 
			
4)	Product Line Footer mapping
-	[DB] select WEB_CART_TEXT_LEGAL_FOOTER from s_product_line_attributes where PRODUCT_LINE_CODE =substr( 'OPAC93GB',2,2);
-	[UI] ]  Setup Application ==> Offer page ==> Web ==> Expand Item you want ==> String underneath Description.
-	[API] This element is substring of text present in"web/ cartLanguage " XML element.

</con:description><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="f68668a6-fe68-40f1-bf35-fce0de88c407"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 

TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
def afterValue=new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
log.info "After.."+afterValue 
testRunner.testCase.testSuite.project.setPropertyValue("after",afterValue)	
	
// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from S_LINKED_COMPONENTS')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_WEB_MKT_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete Num Of Rows in Setup DB : " + row1.get(0)[0] 


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="390b9d28-a289-4214-9a84-e93475a0982c"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
}	


	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="e9ca59ad-eaf8-4f70-991e-d97e2e33accb"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1bc11808-c1aa-4314-989a-3cbf17fd0ab2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="6a6624bc-2b44-4725-8653-f968f9cbc7bc"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

}

</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify cartTitle" id="4eeebafd-dfa1-43cc-bccb-65ad5a3a97a2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e9ca59ad-eaf8-4f70-991e-d97e2e33accb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Carts language text
def carts = testOffers[context.xidx].web.cartLanguage.text()
// Cart Title
def actVal = testOffers[context.xidx].web.cartTitle.text()

// Strip left characters
carts = carts.stripIndent(12)
// Strip Right characters
carts = carts[0..-8]
// Split the whole string into individual components
//def txts = cartText.split("&lt;/p>&lt;p>")

//def sql = context.base
//def query = "select WEB_CART_TITLE, WEB_CART_TEXT, WEB_CART_MAX_QTY from vw_offer_items where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

def sql = context.snp
def query = "select WEB_CART_TITLE from VW_WEB_MKT_OFFERS where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartTitle = res.get(0)["WEB_CART_TITLE"]

log.info "CART TITLE - EXPECTED = ${webCartTitle} -- ACTUAL = ${actVal}"
if (webCartTitle != null || webCartTitle != ""){
	assert actVal.contains(webCartTitle) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + webCartTitle + "' | ACTUAL - '" + actVal +"'"
}


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify maxQuantity" id="a72ca76f-6d85-4b85-a509-0a575fdb7efb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e9ca59ad-eaf8-4f70-991e-d97e2e33accb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()

def actVal = testOffers[context.xidx].web.maxQuantity.text()
// Strip left characters
carts = carts.stripIndent(12)
// Strip Right characters
carts = carts[0..-8]
// Split the whole string into individual components
//def txts = cartText.split("&lt;/p>&lt;p>")

def sql = context.snp
def query = "select WEB_CART_TITLE, WEB_CART_MAX_QTY from VW_WEB_MKT_OFFERS where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartTitle = res.get(0)["WEB_CART_TITLE"]
def maxQty = res.get(0)["WEB_CART_MAX_QTY"].toString()

log.info "MAX QUANTITY - [EXPECTED AND ACTUALS] - Expected = $maxQty | Actual = $actVal "
if (maxQty != null || maxQty != ""){
	assert actVal == maxQty : "[EXPECTED AND ACTUALS] - EXPECTED - '" + maxQty + "' | ACTUAL - '" + actVal +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Cart Language(Footer,Disclosure)" id="bafb4422-3018-4989-a15e-71e8ae050ca0"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e9ca59ad-eaf8-4f70-991e-d97e2e33accb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()

// Strip left characters
carts = carts.stripIndent(9)
// Strip Right characters
carts = carts[0..-4]
// This is the actual value
def actVal = carts

def sql = context.snp
def query = "select CART_LANGUAGE from VW_WEB_MKT_OFFERS where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartText = res.get(0)["CART_LANGUAGE"]

log.info "CART LANGUAGE - EXPECTED - '" + webCartText?.asciiStream.text + "' | ACTUAL - '" + actVal +"'"

// Note: On 'Setup - Shopping Cart Info' you see 'Description' which maps to 'Setup DB' field 'WEB_CART_TEXT'  
if (webCartText?.asciiStream.text != null || webCartText?.asciiStream.text != ""){
	assert actVal.contains(webCartText?.asciiStream.text): "[EXPECTED AND ACTUALS] - EXPECTED - '" + webCartText?.asciiStream.text + "' | ACTUAL - '" + actVal +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Update Cart Language" id="d87f9147-735d-44a5-aeb0-4feb8af0f485"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

def Offer_Code = context.td.get (context.row,"Offer_Code")
log.info "Offer_Code is: " + Offer_Code 

// Update Cart language text
context.procs.call("{? = call qa.OVERRIDE_CART_LANGUAGE(?,?,?,?,?,?,?)}", [Sql.VARCHAR,'HDT1NJT',Offer_Code,'DT0020','This is Title','This is Web Cart Text','1','ENGLISH'] ) { result ->
log.info "Oracle Call 'OVERRIDE_CART_LANGUAGE' result is: " + result
		}
	

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq2" id="b0a59bc1-aa01-4452-bb79-064e9bf5407a"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq2" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1bc11808-c1aa-4314-989a-3cbf17fd0ab2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response updated" id="e5e636b3-387f-45f4-ab4c-72e3fbe21185"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq2#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

}

</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Updtaed cartTitle" id="7b972f94-dfdf-4425-b3cf-42f95a12b606"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b0a59bc1-aa01-4452-bb79-064e9bf5407a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Carts language text
def carts = testOffers[context.xidx].web.cartLanguage.text()
// Cart Title
def actVal = testOffers[context.xidx].web.cartTitle.text()

// Strip left characters
carts = carts.stripIndent(12)
// Strip Right characters
carts = carts[0..-8]
// Split the whole string into individual components
//def txts = cartText.split("&lt;/p>&lt;p>")

//def sql = context.base
//def query = "select WEB_CART_TITLE, WEB_CART_TEXT, WEB_CART_MAX_QTY from vw_offer_items where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

def sql = context.snp
def query = "select WEB_CART_TITLE from VW_WEB_MKT_OFFERS where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartTitle = res.get(0)["WEB_CART_TITLE"]

log.info "CART TITLE - EXPECTED = ${webCartTitle} -- ACTUAL = ${actVal}"
if (webCartTitle != null || webCartTitle != ""){
	assert actVal.contains(webCartTitle) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + webCartTitle + "' | ACTUAL - '" + actVal +"'"
}


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Updated maxQuantity" id="f7abb134-7508-4e07-8872-d158783943e2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b0a59bc1-aa01-4452-bb79-064e9bf5407a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()

def actVal = testOffers[context.xidx].web.maxQuantity.text()
// Strip left characters
carts = carts.stripIndent(12)
// Strip Right characters
carts = carts[0..-8]
// Split the whole string into individual components
//def txts = cartText.split("&lt;/p>&lt;p>")

def sql = context.snp
def query = "select WEB_CART_TITLE, WEB_CART_MAX_QTY from VW_WEB_MKT_OFFERS where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartTitle = res.get(0)["WEB_CART_TITLE"]
def maxQty = res.get(0)["WEB_CART_MAX_QTY"].toString()

log.info "MAX QUANTITY - [EXPECTED AND ACTUALS] - Expected = $maxQty | Actual = $actVal "
if (maxQty != null || maxQty != ""){
	assert actVal == maxQty : "[EXPECTED AND ACTUALS] - EXPECTED - '" + maxQty + "' | ACTUAL - '" + actVal +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Updated Cart Language(Footer,Disclosure)" id="31b0b504-3ecd-4513-9508-2e82e456782a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b0a59bc1-aa01-4452-bb79-064e9bf5407a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()

// Strip left characters
carts = carts.stripIndent(9)
// Strip Right characters
carts = carts[0..-4]
// This is the actual value
def actVal = carts

def sql = context.snp
def query = "select CART_LANGUAGE from VW_WEB_MKT_OFFERS where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartText = res.get(0)["CART_LANGUAGE"]

log.info "CART LANGUAGE - EXPECTED - '" + webCartText?.asciiStream.text + "' | ACTUAL - '" + actVal +"'"

// Note: On 'Setup - Shopping Cart Info' you see 'Description' which maps to 'Setup DB' field 'WEB_CART_TEXT'  
if (webCartText?.asciiStream.text != null || webCartText?.asciiStream.text != ""){
	assert actVal.contains(webCartText?.asciiStream.text): "[EXPECTED AND ACTUALS] - EXPECTED - '" + webCartText?.asciiStream.text + "' | ACTUAL - '" + actVal +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
//context.rep.close()

context.td = null
//context.rep = null

//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeebafd-dfa1-43cc-bccb-65ad5a3a97a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a72ca76f-6d85-4b85-a509-0a575fdb7efb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafb4422-3018-4989-a15e-71e8ae050ca0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe57832d-ef1f-4f2e-be0d-6d40aae718e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f68668a6-fe68-40f1-bf35-fce0de88c407</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0a59bc1-aa01-4452-bb79-064e9bf5407a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="e82ddbae-1fcd-4b1c-84e9-68c46f1e7f5d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC11 - VERIFY EVENT FOR UPDATED OFFER" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test script verifies correctness of "Event" description for a newly created Offer.

1) Initializes (refreshes) Setup database instance
2) Adds a new "offer" by calling "exec qa.add_sk" function which will copy specified legacy script code from "BASE" to "SETUP"
3) Calls Setup to  Snapshot replication trigger
4) Calls Changed Offer API
5) Verifies "Event" of the specified Offer_Code</con:description><con:settings/><con:testStep type="groovy" name="SetupTestData" id="4de3b006-2252-447a-9daa-111c594a8835"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.util.*
import java.util.Calendar
import java.text.DateFormat;
import java.text.SimpleDateFormat

// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 

def VENUE_CODE = context.td.get (context.row,"VENUE_CODE")
log.info "VENUE_CODE is: " + VENUE_CODE 

// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

 // Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 


// Confirm database cleanup is complete
def row = context.setup.rows('select count(*) from s_offers')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0]  


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
			log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}

// current time in UTC format
TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
def beforeUpdateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
log.info "BeforeUpdateTime .."+ beforeUpdateTime	

try {
    Thread.sleep(60000);                 //1000 milliseconds is one second.
} catch(InterruptedException ex) {
    Thread.currentThread().interrupt();
}

//Update offer status 
context.procs.call("{? = call qa.set_sk_venue(?,?)}", [Sql.VARCHAR,oldScriptCode, VENUE_CODE] ) { result ->
		log.info "Oracle Call 'set_sk_venue' result is: " + result
		}

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}

def afterUpdateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
log.info "AfterUpdateTime .."+ afterUpdateTime	

DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")

//Subtract 15 seconds from current date
Calendar cal = Calendar.getInstance()
cal.add(Calendar.SECOND, -20)
log.info "After -20 sec "+ dateFormat.format(cal.getTime())
		
// Set Current time to get the udpated offer detials
testRunner.testCase.testSuite.project.setPropertyValue("afterUpdate",dateFormat.format(cal.getTime()))	
//log.info "Test Case - After Update value: " + afterUpdateTime

</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="408da999-6f96-4ea2-ac2d-52c0f4f96b43"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	



	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="2096c338-436d-4ceb-adea-3444a01aa9de"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a3053a1a-52b2-4dc8-b06d-acc8b1178d60" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#afterUpdate}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response1" id="38c6e654-24bf-4af7-b269-4bd05f0eaa84"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Event is set to Updated" id="7a233481-6901-4732-82d5-715e164b9b00"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>2096c338-436d-4ceb-adea-3444a01aa9de</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def actVal =  testOffers[0].'@event'.text()
log.info "actVal.."+actVal

def expVal = context.td.get (context.row,"Exp_Event")

log.info "expVal.."+expVal

log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"
assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>// Close Test Data
context.td.close()
context.iter = 0
// Close Test Data

//context.rep.close()

context.td = null
//context.rep = null

//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()


/* 
 *  Closing Connections in following ways WONT work. 
 *  Probably these local connection objects wont appear to "DBConnection" as that's in different domain. 
*/
//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cc6cd89c-3098-4ba3-aded-c2ea890e80e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05396d18-a02e-4daa-b9eb-6f17d4665723</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38c6e654-24bf-4af7-b269-4bd05f0eaa84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a233481-6901-4732-82d5-715e164b9b00</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="e365a0c3-af04-47b2-b7bb-3aa113026521" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC10 - VERIFY EVENT FOR NEW OFFER" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test script verifies correctness of "Event" description for a newly created Offer.

1) Initializes (refreshes) Setup database instance
2) Adds a new "offer" by calling "exec qa.add_sk" function which will copy specified legacy script code from "BASE" to "SETUP"
3) Calls Setup to  Snapshot replication trigger
4) Calls Changed Offer API
5) Verifies "Event" of the specified Offer_Code</con:description><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="dd8101ab-8d6b-4e2f-b2ff-f750c81e7f17"><con:settings/><con:config><script>// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 


TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
def afterValue=new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
log.info "After.."+afterValue 
testRunner.testCase.testSuite.project.setPropertyValue("after",afterValue)	


try{
// Initialize “Setup” Schema
context.procs.call("{call qa.initialize_setup}") 
// Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 
}
catch (Exception e){
log.error "Framework thrown error - "+e.getMessage()	
}

// Confirm database cleanup is complete
def row = context.setup.rows('select count(*) from s_offers')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Copy desired Offer from Base to Setup
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
			log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="e9b6e44b-5f6e-4260-8c67-9a709fb5dec5"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
}	


</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="a31b0400-9d8a-4e0e-afc5-c4b3d2b8efff"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2f2758ea-a46f-4259-8f70-b0885061e897" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response1" id="c36b2e73-6ae7-4edb-8f15-cd39fd0fdbc3"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Event is set to New" id="3735864c-1cbf-4cbe-924b-5e60ac716b1d"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>a31b0400-9d8a-4e0e-afc5-c4b3d2b8efff</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def actVal =  testOffers[0].'@event'.text()
log.info "actVal.."+actVal

def expVal = context.td.get (context.row,"Exp_Event")

log.info "expVal.."+expVal

log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"
assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.td = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()


/* 
 *  Closing Connections in following ways WONT work. 
 *  Probably these local connection objects wont appear to "DBConnection" as that's in different domain. 
*/
//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cc6cd89c-3098-4ba3-aded-c2ea890e80e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d28a78b3-a7db-421e-a9ec-adef45df7db7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f75228ed-6387-448d-b1b7-b21e8352afcc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="b17fe82f-17f0-46e6-84c4-ec78c444443d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC06 - ADD AND REMOVE OH FROM PT" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data AND Add OH to PT" id="e86b80fa-4f18-4315-adf7-3b2542f38585"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def OSC_BASE = context.td.get (context.row,"OSC_BASE")
log.info "Old script code base: " + OSC_BASE 
def OSC_OH= context.td.get (context.row,"OSC_OH")
log.info "Old script code OH: " + OSC_OH
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 
def ohCode = context.td.get (context.row,"OH_CODE")
log.info "OH CODE is: " + ohCode 
def offer = context.td.get (context.row,"Offer_Code")
log.info "offer is: " + offer 

TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
def afterValue=new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
log.info "After.."+afterValue 
testRunner.testCase.testSuite.project.setPropertyValue("after",afterValue)	

	
// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

def row = context.setup.rows('select count(*) from S_LINKED_COMPONENTS')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0] 


 // Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_WEB_MKT_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete Num Of Rows in Setup DB : " + row1.get(0)[0] 


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [OSC_BASE , label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

context.procs.call("{call qa.add_sk(?,?)}", [OSC_OH , label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Add OH to PT
context.procs.call("{? = call qa.add_hierarchy_to_pt(?,?)}", [Sql.VARCHAR,OSC_BASE,ohCode ] ) { result ->
log.info "Oracle Call 'Add OH to PT' result is: " + result
		}
	

//Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="75c6de80-b1b4-481e-b15e-cc68f136801f"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	

</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="18c4f0fc-677d-4191-aad6-fecac8e202af"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3af7896-9b96-436b-8831-6c8ecd2c035d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response1" id="fcfe8b71-4f0f-4bdc-87c8-2d8102c6d6c2"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Add OH to PT" id="12c844d4-6522-4ab8-ae8c-980017d61ad7"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>27afe133-5893-4987-b0a1-c4a28b68f9c0</con:id><con:isGroup>false</con:isGroup><con:sourceId>18c4f0fc-677d-4191-aad6-fecac8e202af</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebc08f0d-8241-40f8-a9ce-696c10219a84"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerPanelCode.text().equals(context.td.get (context.row,"OH_CODE")) }   


def actVal =  testOffers[context.xidx].derivation.offerPanelCode.text()
log.info "actVal.."+actVal

def expVal = context.td.get (context.row,"OH_CODE")
log.info "expVal.."+expVal

log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"
assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Remove OH from PT" id="9ac176f8-a9d3-462f-b0af-e5c409f83ec0"><con:settings/><con:config><script>import groovy.sql.Sql


// Get test data from data source
def OSC_BASE = context.td.get (context.row,"OSC_BASE")
log.info "Old script code base: " + OSC_BASE 
def ohCode = context.td.get (context.row,"OH_CODE")
log.info "OH CODE is: " + ohCode 

//Remove Offer to OH
context.procs.call("{? = call qa.remove_hierarchy_from_pt(?,?)}", [Sql.VARCHAR,OSC_BASE, ohCode] ) { result ->
log.info "Oracle Call 'remove_hierarchy_from_pt' result is: " + result
		}
	

//Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq2" id="780b4581-b2ae-4328-99eb-0884248e2fa1"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq2" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3af7896-9b96-436b-8831-6c8ecd2c035d" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response2" id="b18ca54c-8672-4182-b2bc-dc01ee8a8679"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq2#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Remove OH from PT" id="f2f2720b-95b0-4d6b-9fb3-5a68140c12aa"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>a88bc877-0c3b-412e-92df-31ea59cd472f</con:id><con:isGroup>false</con:isGroup><con:sourceId>780b4581-b2ae-4328-99eb-0884248e2fa1</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="6a1abe13-62b5-4268-b30c-5c3b3a1ca5bd"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerPanelCode.text().equals(context.td.get (context.row,"OH_CODE")) }   //Z34B33

if(testOffers.empty)
{
log.info "Offer Hierarchy has been removed Sucessfully from PT"
assert true
} else
{ 
log.info "Offer Hierarchy has not been removed from PT"
assert false
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.td = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()

</con:tearDownScript><con:properties/><con:reportParameters/></con:testCase><con:testCase id="c88244f9-02c8-4b4f-aea7-d47b45a57665" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC08 - ADD AND UPDATE PT TO SK" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data AND Add PT to SK" id="a0333703-bf05-4541-94ca-2d8193559c1a"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def OSC_BASE = context.td.get (context.row,"OSC_BASE")
log.info "Old script code base: " + OSC_BASE 
def OSC_PT= context.td.get (context.row,"OSC_PT")
log.info "Old script code PT: " + OSC_PT
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 
def ADD_PT = context.td.get (context.row,"ADD_PT")
log.info "ADD_PT is: " + ADD_PT 
def UPDATE_PT = context.td.get (context.row,"UPDATE_PT")
log.info "UPDATE_PT is: " + UPDATE_PT

TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
def afterValue=new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
log.info "After.."+afterValue 
testRunner.testCase.testSuite.project.setPropertyValue("after",afterValue)	

	
// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

def row = context.setup.rows('select count(*) from S_LINKED_COMPONENTS')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0] 


 // Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_WEB_MKT_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete Num Of Rows in Setup DB : " + row1.get(0)[0] 


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [OSC_BASE , label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

context.procs.call("{call qa.add_sk(?,?)}", [OSC_PT , label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Add PT to SK
context.procs.call("{? = call qa.add_pt_to_sk(?,?)}", [Sql.VARCHAR,OSC_PT,ADD_PT ] ) { result ->
log.info "Oracle Call 'Add PT to SK' result is: " + result
		}
	

//Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="6f8124f7-e4cb-475d-8b61-029c8589169a"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	

</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="0802e907-4ca6-477a-9b5b-129ac9b233ea"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3af7896-9b96-436b-8831-6c8ecd2c035d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response1" id="2c95bb1e-a693-4f0f-a55c-924ee28b4b55"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

}

</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Add PT to SK" id="a40bda27-0b9a-4739-b540-78192e7e48b2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>27afe133-5893-4987-b0a1-c4a28b68f9c0</con:id><con:isGroup>false</con:isGroup><con:sourceId>0802e907-4ca6-477a-9b5b-129ac9b233ea</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebc08f0d-8241-40f8-a9ce-696c10219a84"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.code.text().equals(context.td.get (context.row,"VERIFY_OSC")) }   

def actVal =  testOffers[0].derivation.promotionTemplateCode.text()
log.info "actVal.."+actVal

def expVal = context.td.get (context.row,"ADD_PT")
log.info "expVal.."+expVal

log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"
assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Update PT from SK" id="324d8618-4c23-4062-b204-6ea85e7a0cf8"><con:settings/><con:config><script>import groovy.sql.Sql


// Get test data from data source
def OSC_PT= context.td.get (context.row,"OSC_PT")
log.info "Old script code PT: " + OSC_PT
def UPDATE_PT = context.td.get (context.row,"UPDATE_PT")
log.info "UPDATE_PT is: " + UPDATE_PT

// Add PT to SK
context.procs.call("{? = call qa.add_pt_to_sk(?,?)}", [Sql.VARCHAR,OSC_PT,UPDATE_PT ] ) { result ->
log.info "Oracle Call 'Update PT to SK' result is: " + result
		}
	

//Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq2" id="892033d2-8ee7-468a-aa1d-590e7efb2b24"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq2" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3af7896-9b96-436b-8831-6c8ecd2c035d" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response2" id="8bcb334c-a1ac-48e6-99b3-75b01188e9b8"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq2#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

}

</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify PT updated for SK" id="07b99d95-9b98-401e-8a6c-1b3df769f01e"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>a88bc877-0c3b-412e-92df-31ea59cd472f</con:id><con:isGroup>false</con:isGroup><con:sourceId>892033d2-8ee7-468a-aa1d-590e7efb2b24</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="6a1abe13-62b5-4268-b30c-5c3b3a1ca5bd"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.code.text().equals(context.td.get (context.row,"VERIFY_U_OSC")) }   

def actVal =  testOffers[0].derivation.promotionTemplateCode.text()
log.info "actVal.."+actVal

def expVal = context.td.get (context.row,"UPDATE_PT")
log.info "expVal.."+expVal

log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"
assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.td = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()

</con:tearDownScript><con:properties/><con:reportParameters/></con:testCase><con:testCase id="ee632279-6406-40b5-9247-2e57ca261252" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC09 - CHANGE ASH CODE" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup Test Data AND Change ASH Code" id="d051a7b9-f83b-41c6-85d5-fc7cf5db06b8"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def OSC_BASE = context.td.get (context.row,"OSC")
log.info "Old script code base: " + OSC_BASE 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 
def OFFER_CODE = context.td.get (context.row,"OFFER_CODE")
log.info "OFFER_CODE is: " + OFFER_CODE
def OH_CODE = context.td.get (context.row,"OH_CODE")
log.info "OH_CODE is: " + OH_CODE
def UP_DOWN_CODE = context.td.get (context.row,"UP_DOWN_CODE")
log.info "UP_DOWN_CODE is: " + UP_DOWN_CODE
def ASH_CODE = context.td.get (context.row,"ASH_CODE")
ASH_CODE = '0'+ASH_CODE
log.info "ASH_CODE is: " + ASH_CODE

TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
def afterValue=new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
log.info "After.."+afterValue 
testRunner.testCase.testSuite.project.setPropertyValue("after",afterValue)	

	
// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

def row = context.setup.rows('select count(*) from S_LINKED_COMPONENTS')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0] 


 // Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_WEB_MKT_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete Num Of Rows in Setup DB : " + row1.get(0)[0] 


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [OSC_BASE , label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Change ASH code
context.procs.call("{? = call qa.set_ash_code(?,?,?,?)}", [Sql.VARCHAR,OH_CODE,OFFER_CODE,UP_DOWN_CODE,ASH_CODE] ) { result ->
log.info "Oracle Call set_ash_code' result is: " + result
		}
	

//Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="b119fc7c-ef97-4c5f-9f1e-b7ba5b2a5911"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	

</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="92a4d5bb-dd92-473d-97dc-e50a7113d907"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3af7896-9b96-436b-8831-6c8ecd2c035d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response1" id="523e5bee-9cdf-4f5a-950f-e30729a076f6"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

}

</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify RUSH ASH Code" id="07ec08d6-a196-4f47-8376-de0d5a3a6e03"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>27afe133-5893-4987-b0a1-c4a28b68f9c0</con:id><con:isGroup>false</con:isGroup><con:sourceId>92a4d5bb-dd92-473d-97dc-e50a7113d907</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebc08f0d-8241-40f8-a9ce-696c10219a84"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

def ASH_CODE = context.td.get (context.row,"ASH_CODE")
ASH_CODE = '0'+ASH_CODE
log.info "ASH_CODE is: " + ASH_CODE

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.code.text().equals(context.td.get(context.row,"OSC_CODE")) }   

def actstdShipping =  testOffers[0].paymentDetail.stdShipping.text()
log.info "actstdShipping.."+actstdShipping

def actrushShipping =  testOffers[0].paymentDetail.rushShipping.text()
log.info "actrushShipping.."+actrushShipping

def sql = context.setup
def query1 = "select * from setup.s_ash_code_details where ash_id =('" +ASH_CODE+"') and shipping_handling_type_code='RUSH'"

// Run query
def res = sql.rows(query1)

// From DB get values for all components
def SHIPPING_AMOUNT = res.get(0)["SHIPPING_AMOUNT"].toString()

if(SHIPPING_AMOUNT.size() == 1)
{
	SHIPPING_AMOUNT = SHIPPING_AMOUNT+".00"
}

log.info "RUSH SHIPPING - EXPECTED = ${SHIPPING_AMOUNT} -- ACTUAL = ${actrushShipping}"
assert actrushShipping == SHIPPING_AMOUNT : "Expected = $SHIPPING_AMOUNT | Actual = $actrushShipping"


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify SAME DAY ASH Code" id="c0724066-abaf-49aa-93b2-3e63e1bb8c5e"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>27afe133-5893-4987-b0a1-c4a28b68f9c0</con:id><con:isGroup>false</con:isGroup><con:sourceId>92a4d5bb-dd92-473d-97dc-e50a7113d907</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ebc08f0d-8241-40f8-a9ce-696c10219a84"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

def ASH_CODE = context.td.get (context.row,"ASH_CODE")
ASH_CODE = '0'+ASH_CODE
log.info "ASH_CODE is: " + ASH_CODE

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.code.text().equals(context.td.get(context.row,"OSC_CODE")) }   

def actstdShipping =  testOffers[0].paymentDetail.stdShipping.text()
log.info "actstdShipping.."+actstdShipping

def actsameDayShipping =  testOffers[0].paymentDetail.sameDayShipping.text()
log.info "actsameDayShipping.."+actsameDayShipping

def sql = context.setup

def query1 = "select * from setup.s_ash_code_details where ash_id =('" +ASH_CODE+"') and shipping_handling_type_code='SDS'"
// Run query
def res = sql.rows(query1)

// From DB get values for all components
def SAMEDAY_SHIPPING = res.get(0)["SHIPPING_AMOUNT"].toString()

if(SAMEDAY_SHIPPING.size() == 1)
{
	SAMEDAY_SHIPPING = SAMEDAY_SHIPPING+".00"
}

log.info "SAME DAY SHIPPING - EXPECTED = ${SAMEDAY_SHIPPING} -- ACTUAL = ${actsameDayShipping}"
assert actsameDayShipping == SAMEDAY_SHIPPING : "Expected = $SAMEDAY_SHIPPING | Actual = $actsameDayShipping"


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.td = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()



</con:tearDownScript><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:setupScript/><con:reportParameters/></con:testSuite><con:testSuite id="e92de52c-c505-4f1c-b375-4da7b803f5d5" name="TS02 -Changed Offer - General"><con:description> </con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\test</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase id="23088b4e-31ab-4ee1-a126-72b15fe2d955" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC00 - LOAD DATA" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>Description:
Load Data into Setup Snapshot</con:description><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="3d8911de-7d3f-4168-b76e-a6d30012d58d"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 

// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from S_LINKED_COMPONENTS')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_WEB_MKT_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete Num Of Rows in Setup DB : " + row1.get(0)[0] 


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="da610e46-d6ee-4426-8c55-cfb078b5244e"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	


	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="30759a2c-d9de-4e88-b36f-58739cb9019f"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7e6ad02b-76a9-4bdd-9206-94fd4ac3ca90" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
//context.rep.close()

context.td = null
//context.rep = null

//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeebafd-dfa1-43cc-bccb-65ad5a3a97a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a72ca76f-6d85-4b85-a509-0a575fdb7efb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafb4422-3018-4989-a15e-71e8ae050ca0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62121887-abfc-4a19-9a10-1ab3e34c3458</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>04725136-a83f-4c35-b2a5-90f05b939e30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe57832d-ef1f-4f2e-be0d-6d40aae718e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>28eed18c-f120-463b-8b64-b6c8767b1095</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f68668a6-fe68-40f1-bf35-fce0de88c407</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="9f9b8be2-a493-4ac1-9866-9e1ba2330054" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC01 - STANDARDS VALIDATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="1c47b8a1-e1df-46ff-856e-08be16312ad7"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	

	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="6e387731-f2c1-411e-8c58-e302b753775e"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="AutoInferSchemas">false</con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d218afd4-cc56-4350-b682-3ce8bfde464f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="b59eccf0-8988-48ec-abc4-56d28a36fa2a"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )

//put reposne in contex
context.setProperty("xmlResponse", response)

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response) 

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

//to get name space
def nsRoot = new XmlParser(false, false).parseText(response)

// set name space in contect
context.setProperty("grNameSpace", nsRoot.@'xmlns')

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

// Now get all 'marketingOffers' nodes
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Name Space" id="722e5577-0831-4b78-b54a-00c0df26d6c9"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>6e387731-f2c1-411e-8c58-e302b753775e</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// SRAVAN - THIS IS NOT DONE
// None of Slurper, Xpath, XQuery was able to gove 'Name Space' content.
// Will have to research on this.

def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

def actVal = context.grNameSpace

def expVal ='http://ws.guthy-renker.com/soma/201407'

log.info " [EXPECTED | ACTUAL] - [Element: NameSPace]  - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify ISO 4217 Currency" id="a0e4aece-16fe-4db1-ab63-5cbfd07f283b"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>6e387731-f2c1-411e-8c58-e302b753775e</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

def offerCode = context.td.get (context.row,"Offer_Code")

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(offerCode) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

// Get actual 'paymentDetail.currency' from the parsed response
def actVal = testOffers[context.xidx].paymentDetail.@currency 

def query = "select CURRENCY_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get expected 'paymentDetail.currency' value from Snapshot DB
def expVal = sql.rows(query).get(0)["CURRENCY_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: paymentDetail.currency] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"
assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Current As Of is in UTC" id="6ed428b9-f359-41a4-a48b-7e166df08b69"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>6e387731-f2c1-411e-8c58-e302b753775e</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code'
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(offerCode) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

// Get actual 'currentAsOf' from the parsed response
def actVal = root.currentAsOf.text()

// Define expected value
def expVal = "Z"

log.info " [EXPECTED | ACTUAL] - [Element: currentAsOf] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal.endsWith('Z'): "Expected = Z | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Default Response Content Type" id="c833d237-4f0d-4700-975d-3c9f4539c337"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>6e387731-f2c1-411e-8c58-e302b753775e</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// To validate API response headers
// def val = testRunner.testCase.testSteps['Web - ChangedOfferAPIReq1'].testRequest.response.getResponseHeaders()["Content-Type"][0]
def expVal =  messageExchange.modelItem.testCase.testSteps['Web - ChangedOfferAPIReq1'].testRequest.response.getResponseHeaders()["Content-Type"][0]
def actVal = "application/xml"
log.info " [EXPECTED | ACTUAL] - [Default Content Type] - [Expected = $expVal | Actual = $actVal ]"
assert expVal == actVal : "Default Content Type Not Valid"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>context.iter = 0

// Close Test Data
context.td.close()

context.td = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7602166f-822e-4638-8529-1123ae45bf25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480e23a3-4b9b-4b0a-955b-c4dcee367029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0add6e9c-e26f-4eea-8157-89ef1f4a44b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c833d237-4f0d-4700-975d-3c9f4539c337</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="3d16c925-6044-4fa1-90c8-b938f407954d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC02 - NEGATIVE TESTS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test script is intended to verify error messages and HTTP error codes when an invalid date paraemeter is passed to Changed Offer API.

This script verifies following:
1) Error message and HTTP code when an invalid date is passed.
2) Error message and HTTP code when a too-old date is passed.
3) Error message and HTTP code when a future date is passed.</con:description><con:settings/><con:testStep type="groovy" name="Set Invalid Date Parameter" id="f42e54b7-694c-4178-a6df-630f2d590dcc"><con:settings/><con:config><script>def found = false
for (context.row; context.row &lt; context.rowCount; context.row++){

	if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
				if (context.td.get(context.row, "Type") ==  "INVALID_DATE"){
					found = true
					log.info "Props step : " + context.td.get(context.row, "Filter")
					testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
					
					log.info "Props step : " + context.td.get(context.row, "After")
					testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
			}
	}
}
if (! found)
	testRunner.gotoStepByName("Iterator")
</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="b3d88d8f-a051-4f28-846c-6badb264f13c"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b694b057-2fb8-47ed-a9a4-bf66773f823e" name="Expected HTTP Error Status Codes"><con:configuration><codes>400,404,500</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Invalid Date error message" id="e63f8e66-4a0e-417d-9da0-44dfedcbc21c"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>cc211874-dfb5-4de1-a98b-2c032321e740</con:id><con:isGroup>false</con:isGroup><con:sourceId>b3d88d8f-a051-4f28-846c-6badb264f13c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f1502ad8-7918-41e2-bcfe-11ea955e45fc"><con:configuration><scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Obtain holder for the rsponse
def holder = groovyUtils.getXmlHolder( "Web - ChangedOfferAPIReq1#Response" )

// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"

// Get the actual message
def actVal = holder.getNodeValue("ns1:error/ns1:message")

assert actVal.equals ("The query string is missing or improperly composed, or the timestamp is improperly formatted.")
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Set Too Old Date Parameter" id="60036c22-cef8-41a3-8013-f292cced9802"><con:settings/><con:config><script>def found = false
context.row = 1
for (; context.row &lt; context.rowCount; context.row++){

	if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
				if (context.td.get(context.row, "Type") ==  "OLDER_DATE"){
					found = true
					log.info "Props step : " + context.td.get(context.row, "Filter")
					testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
					
					log.info "Props step : " + context.td.get(context.row, "After")
					testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
			}
	}
}
if (! found)
	testRunner.gotoStepByName("Set Future Date Parameter")
else
	log.info "OLDER DATE RUN started."	
</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq2" id="ab9ca7f0-ecfd-43cc-a689-6e46aa7c6113"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq2" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b99bacd0-83e3-4b57-8f62-ad3ec5a032e4" name="Expected HTTP Error Status Codes"><con:configuration><codes>400,404,500</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Too Old Date error message" id="d61cdf79-615e-4c76-9fe9-b5b4f1dc08c1"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>cc211874-dfb5-4de1-a98b-2c032321e740</con:id><con:isGroup>false</con:isGroup><con:sourceId>b3d88d8f-a051-4f28-846c-6badb264f13c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f1502ad8-7918-41e2-bcfe-11ea955e45fc"><con:configuration><scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Obtain holder for the rsponse
def holder = groovyUtils.getXmlHolder( "Web - ChangedOfferAPIReq2#Response" )

// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"

// Get the actual message
def actVal = holder.getNodeValue("ns1:error/ns1:message")


assert actVal.equals ("The timestamp is further in the past than is maintained by the change records (currently 60 days).")
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Set Future Date Parameter" id="2f66f591-3b96-4ae6-aeff-9e313e7e6843"><con:settings/><con:config><script>def found = false
context.row = 1
for (; context.row &lt; context.rowCount; context.row++){

	if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
				if (context.td.get(context.row, "Type") ==  "FUTURE_DATE"){
					found = true
					log.info "Props step : " + context.td.get(context.row, "Filter")
					testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
					
					log.info "Props step : " + context.td.get(context.row, "After")
					testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
			}
	}
}
if (! found)
	testRunner.gotoStepByName("Log Error Messages")
else
	log.info "FUTURE DATE RUN started."	
</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - Changed Offer API Future Date Reqest" id="94cb0460-e1c9-46a5-86ff-61a9177ad082"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - Changed Offer API Future Date Reqest" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify API response for Future Date" id="744ab92a-5e71-4135-a6ef-258061061a1f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>cc211874-dfb5-4de1-a98b-2c032321e740</con:id><con:isGroup>false</con:isGroup><con:sourceId>94cb0460-e1c9-46a5-86ff-61a9177ad082</con:sourceId><con:propertyName>ResponseAsXml</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f1502ad8-7918-41e2-bcfe-11ea955e45fc"><con:configuration><scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Obtain holder for the rsponse
def holder = groovyUtils.getXmlHolder( "Web - Changed Offer API Future Date Reqest#Response" )

// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"

// Get count of 'marketingOffer' nodes under 'marketingOffers' node.
def actVal = holder["count(//ns1:snapshots//ns1:marketingOffers/ns1:marketingOffer)"]
assert actVal.equals ("0") : "Expected = 0 | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Log Error Messages" id="d87d8973-a73e-43f8-ba28-a5e78fd6ad2e"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "Web - ChangedOfferAPIReq1#Response" )
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"
def x = holder.getNodeValue("ns1:error/ns1:message")
log.info "XML Holder: " + x

holder = groovyUtils.getXmlHolder( "Web - ChangedOfferAPIReq2#Response" )
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"
x = holder.getNodeValue("ns1:error/ns1:message")
log.info "XML Holder: " + x

// Obtain holder for the rsponse
holder = groovyUtils.getXmlHolder( "Web - Changed Offer API Future Date Reqest#Response" )
// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"
// Get count of 'marketingOffer' nodes under 'marketingOffers' node.
def actVal = holder["count(//ns1:snapshots//ns1:marketingOffers/ns1:marketingOffer)"]
log.info "Count of MarketingOffer nodes: " + actVal
//assert actVal.equals ("0")

// loop item nodes in response message
//for( item in holder.getNodeValues( "//item" ))
//    log.info "Item : [$item]" 

</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()

context.td = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7602166f-822e-4638-8529-1123ae45bf25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480e23a3-4b9b-4b0a-955b-c4dcee367029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0add6e9c-e26f-4eea-8157-89ef1f4a44b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>60036c22-cef8-41a3-8013-f292cced9802</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab9ca7f0-ecfd-43cc-a689-6e46aa7c6113</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d61cdf79-615e-4c76-9fe9-b5b4f1dc08c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e63f8e66-4a0e-417d-9da0-44dfedcbc21c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f66f591-3b96-4ae6-aeff-9e313e7e6843</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94cb0460-e1c9-46a5-86ff-61a9177ad082</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>744ab92a-5e71-4135-a6ef-258061061a1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="56b5b7dd-f36b-4a3f-aab9-0a06e2e33d31" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC03 - POSITIVE TESTS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test script verifies that when a proper date is passed to SOMA Changed Offer API, the response will have HTTP 200OK message in the header.</con:description><con:settings/><con:testStep type="groovy" name="Set Valid Date Parameter" id="c6b33b38-71dd-4964-81ab-6159c6383bda"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
					log.info "Props step : " + context.td.get(context.row, "Filter")
					testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="06e53123-c78f-4f79-ac3e-60aaa6153704"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a3c53e5-8f0d-4ec7-8d8e-6a24717e6b4e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Rest Response" id="b7d1bcc0-df98-4810-b890-9c89c63df1d4"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )

//put reposne in contex
context.setProperty("xmlResponse", response)

}

</script></con:config></con:testStep><con:testStep type="assertionteststep" name="ChangedOfferSchemaValidation" id="aef14b56-1bba-4904-901c-318a634d4be5"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>b5411d2f-7357-45a5-b42a-158eaed5383f</con:id><con:isGroup>false</con:isGroup><con:sourceId>b7d1bcc0-df98-4810-b890-9c89c63df1d4</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0fab27d2-3956-474a-af6c-8249046f913c"><con:configuration><scriptText>import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory
import groovy.util.*
import java.io.File	// You need Java File utils

String response = context.xmlResponse

// Get XSD File Location
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

def xsdFile = sourcePath.toString() + "/XSD/changedOfferAPI.xsd"
log.info "XSD File Name is: " + xsdFile

try{
new File(xsdFile).withReader { xsd ->
  SchemaFactory.newInstance( XMLConstants.W3C_XML_SCHEMA_NS_URI )
               .newSchema( new StreamSource( xsd ) )
               .newValidator()
               .validate( new StreamSource( new StringReader( response ) ) )               
     log.info "Changed Offer API Schema Validation Success"
     assert true 
} } catch (Throwable e)
	{
		log.info "Exception while validating Schema ..."+e
		assert false : "Expected = Changed Offer API Schema Validation Success | Actual = $e"
	}


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
context.td = null


context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7602166f-822e-4638-8529-1123ae45bf25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480e23a3-4b9b-4b0a-955b-c4dcee367029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0add6e9c-e26f-4eea-8157-89ef1f4a44b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>60036c22-cef8-41a3-8013-f292cced9802</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab9ca7f0-ecfd-43cc-a689-6e46aa7c6113</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d61cdf79-615e-4c76-9fe9-b5b4f1dc08c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e63f8e66-4a0e-417d-9da0-44dfedcbc21c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="f9919693-ecaf-41d8-9d80-4e644b6accb6" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC04 - OP MASK ELEMENTS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>1) This Test Case calls SOMA Changed Offer API with mask set to OP
2) Checks the response to ensure all applicable elements for OP mask will show in the respons and all not applicable elements for OP mask will not show.

</con:description><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="df954f22-1006-485c-8857-26a2a3b73391"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	


</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="75a9ba14-af8a-49fd-aeac-622254de752c"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="XPath Match" id="fb931da6-263e-4203-868c-a946d18d4145" name="Check for existence of [intent]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:intent)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="36881971-3733-4725-82f6-fffcf34fd8cf" name="Check for existence of [code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d1697f4d-86ba-4913-9ddf-ee0914bf7899" name="Check for existence of [productLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:productLineCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="59ffb655-c65e-4b4d-8e5e-fa9b163ff844" name="Check for existence of [hostProductLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:hostProductLineCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="4e04fcaa-e6fb-4622-858b-bbfe26c825bf" name="Check for existence of [status]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:status)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9872607f-99a2-48bb-9531-2e7708b581cd" name="Check for existence of [readyDate]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:readyDate)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9c98c73f-8d7d-4b55-bb04-1669f31b4a92" name="Check count of [liveDate]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
count( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:liveDate)</path><content>20</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="60e77da2-b594-4ea9-bb53-4dacbbd5de7a" name="Check for existence of [endDate]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:endDate)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="2eb12e99-74b2-492f-a4ff-289fb74020e6" name="Check for existence of [derivation]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="5f12b7c1-6a03-47e3-acc2-fd5e88068523" name="Check for existence of [@entityId]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@entityId)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="a28c7ad8-19a1-4116-beb8-5fda8eebe9f7" name="Check for existence of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="dda039b0-991e-491e-9a9a-e0d838cd6aed" name="Check for existence of [@uri]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@uri)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="b8e8608c-ecdf-4094-a2d8-91fe77170b6d" name="Check for existence of [promotionTemplateCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:promotionTemplateCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="16f72e1a-be73-459f-9a6d-c766a2641ae5" name="Check for existence of [offerPanelCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:offerPanelCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="cbe35ea0-828b-4d2b-ac86-96aa944e2710" name="Check for existence of [offerCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:offerCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d4ce01ed-350a-478e-990b-c4487239783e" name="Check for existence of [itemCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:itemCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f8865fb4-b8a8-4a07-8d69-88eb1995dc38" name="Check for existence of [venue]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="98d4ac5d-eecb-4248-b657-6f1807147903" name="Check for existence of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue/@code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="1d134000-4485-407b-9d81-8afd36895f43" name="Check for existence of [supervenue]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue/ns1:supervenue)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d6dc5d19-a90b-45c8-ab26-1d809408b7de" name="Check for existence of [paymentDetail]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="eade6b03-0c16-499f-bee9-1c4a566e3941" name="Check for existence of [@currency]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/@currency)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="ce3e9a4b-f376-43a8-9ef8-58312b658105" name="Check for existence of [unitPrice]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:unitPrice)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="019ec9da-7cd2-4486-8daf-e697db8b291f" name="Check for existence of [firstPaymentAmount]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:firstPaymentAmount)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="b7f7caa4-4eb2-4114-8785-72973df7df5e" name="Check for existence of [firstShippingAmount]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:firstShippingAmount)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="aa590bb0-3ddc-437e-8d54-ae1fea781b75" name="Check for existence of [stdShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:stdShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9c32004f-6ffb-414c-8ad3-cafcc5666469" name="Check for existence of [rushShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:rushShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="866a087d-c221-4115-ab30-0bb4fa0a7baa" name="Check for existence of [twoDayShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:twoDayShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d586cf9a-6dcd-4eb1-b74b-f957cb0d5de4" name="Check for existence of [sameDayShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:sameDayShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="99e75155-005c-4446-95af-1551274382c7" name="Check for existence of [cartTitle]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:cartTitle)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="61547a6a-948d-4911-b055-591e5e293d30" name="Check for existence of [maxQuantity]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:maxQuantity)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f62e2d91-4fd3-44d7-859c-1548fad805b8" name="Check for existence of [coreItem]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:coreItem)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="61547a6a-948d-4911-b055-591e5e293d30" name="Check for NOT existence of cartLanguage"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:cartLanguage)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="61547a6a-948d-4911-b055-591e5e293d30" name="Check for NOT existence of tlmTollFreeNumber"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:tlmTollFreeNumber)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="a5cf28f5-bb60-4a9a-a5f4-de476d3631fa"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

	// Obtain API response into a variable
	def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
	
	// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
	def root = new XmlSlurper().parseText(response)  
	
	// Put the root in the 'context'
	context.setProperty("xmlRoot", root)

}

</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of intent" id="16c3d788-ffb3-4d24-ac86-baa1cebeda7c"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - INTENT] = Element presence: "+ testOffer.intent.size() + " | Element Data: "+ testOffer.intent.text()

// Check if the element is present 
assert 1 == testOffer.intent.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of code" id="f8ee2d47-b8f9-4af8-9f22-bfef6d235717"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - CODE] = Element presence: "+ testOffer.code.size() + " | Element Data: "+ testOffer.code.text()

// Check if the element is present 
assert 1 == testOffer.code.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of productLineCode" id="9510f3ed-bd44-4ca0-85dc-add6ccd8172c"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - productLineCode] = Element presence: "+ testOffer.productLineCode.size() + " | Element Data: "+ testOffer.productLineCode.text()

// Check if the element is present 
assert 1 == testOffer.productLineCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of hostProductLineCode" id="3db58539-0232-49b0-b4ad-afef43a450d5"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - hostProductLineCode] = Element presence: "+ testOffer.hostProductLineCode.size() + " | Element Data: "+ testOffer.hostProductLineCode.text()

// Check if the element is present 
assert 1 == testOffer.hostProductLineCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of status" id="95ccaab9-06fc-4983-afb3-6665e61617bb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - status] = Element presence: "+ testOffer.status.size() + " | Element Data: "+ testOffer.status.text()

// Check if the element is present 
assert 1 == testOffer.status.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of readyDate" id="9b5019ea-4972-49f6-9bef-2bb42aa2a0cb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - readyDate] = Element presence: "+ testOffer.readyDate.size() + " | Element Data: "+ testOffer.readyDate.text()

// Check if the element is present 
assert 1 == testOffer.readyDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of liveDate" id="463650de-cc16-4c39-8720-ebcea730026a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - liveDate] = Element presence: "+ testOffer.liveDate.size() + " | Element Data: "+ testOffer.liveDate.text()

// Check if the element is present 
assert 1 == testOffer.liveDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of endDate" id="097a0288-81bc-4a68-8bcc-8069537539f2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - endDate] = Element presence: "+ testOffer.endDate.size() + " | Element Data: "+ testOffer.endDate.text()

// Check if the element is present 
assert 1 == testOffer.endDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of promotionTemplateCode" id="0226ccfb-bd6d-4e2b-a51e-1d5e9a649b01"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - promotionTemplateCode] = Element presence: "+ testOffer.derivation.promotionTemplateCode.size() + " | Element Data: "+ testOffer.derivation.promotionTemplateCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.promotionTemplateCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of offerPanelCode" id="de690592-9288-4ce5-8304-efedeb09427e"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - offerPanelCode] = Element presence: "+ testOffer.derivation.offerPanelCode.size() + " | Element Data: "+ testOffer.derivation.offerPanelCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.offerPanelCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of offerCode" id="ca65351f-a54c-4c12-bd99-e46c95cc74f1"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - offerCode] = Element presence: "+ testOffer.derivation.offerCode.size() + " | Element Data: "+ testOffer.derivation.offerCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.offerCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()


context.td = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()
//context.db.close("Setup")

//context.db = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7602166f-822e-4638-8529-1123ae45bf25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480e23a3-4b9b-4b0a-955b-c4dcee367029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0add6e9c-e26f-4eea-8157-89ef1f4a44b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c833d237-4f0d-4700-975d-3c9f4539c337</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>16c3d788-ffb3-4d24-ac86-baa1cebeda7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8ee2d47-b8f9-4af8-9f22-bfef6d235717</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9510f3ed-bd44-4ca0-85dc-add6ccd8172c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3db58539-0232-49b0-b4ad-afef43a450d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95ccaab9-06fc-4983-afb3-6665e61617bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b5019ea-4972-49f6-9bef-2bb42aa2a0cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>463650de-cc16-4c39-8720-ebcea730026a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>097a0288-81bc-4a68-8bcc-8069537539f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0226ccfb-bd6d-4e2b-a51e-1d5e9a649b01</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de690592-9288-4ce5-8304-efedeb09427e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ca65351f-a54c-4c12-bd99-e46c95cc74f1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="c526df03-a6bf-4e51-9ea1-1ec2a4e29d54" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC05 - WEB MASK ELEMENTS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>1) This Test Case calls SOMA Changed Offer API with mask set to WEB
2) Checks the response to ensure all applicable elements for WEB mask are present in the respons and all not applicable elements for WEB mask are not present.
</con:description><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="7e51fcfb-45e8-41f9-a444-6130fff1d57d"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	
</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="e5a8b81a-9199-4786-9273-63759e0393ba"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="XPath Match" id="fb931da6-263e-4203-868c-a946d18d4145" name="Check for existence of [intent]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:intent)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="36881971-3733-4725-82f6-fffcf34fd8cf" name="Check for existence of [code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d1697f4d-86ba-4913-9ddf-ee0914bf7899" name="Check for existence of [productLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:productLineCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="59ffb655-c65e-4b4d-8e5e-fa9b163ff844" name="Check for existence of [hostProductLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:hostProductLineCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="4e04fcaa-e6fb-4622-858b-bbfe26c825bf" name="Check for existence of [status]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:status)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9872607f-99a2-48bb-9531-2e7708b581cd" name="Check for existence of [readyDate]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:readyDate)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="60e77da2-b594-4ea9-bb53-4dacbbd5de7a" name="Check for existence of [endDate]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:endDate)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="2eb12e99-74b2-492f-a4ff-289fb74020e6" name="Check for existence of [derivation]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="5f12b7c1-6a03-47e3-acc2-fd5e88068523" name="Check for existence of [@entityId]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@entityId)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="a28c7ad8-19a1-4116-beb8-5fda8eebe9f7" name="Check for existence of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="dda039b0-991e-491e-9a9a-e0d838cd6aed" name="Check for existence of [@uri]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@uri)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="b8e8608c-ecdf-4094-a2d8-91fe77170b6d" name="Check for existence of [promotionTemplateCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:promotionTemplateCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="16f72e1a-be73-459f-9a6d-c766a2641ae5" name="Check for existence of [offerPanelCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:offerPanelCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="cbe35ea0-828b-4d2b-ac86-96aa944e2710" name="Check for existence of [offerCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:offerCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d4ce01ed-350a-478e-990b-c4487239783e" name="Check for existence of [itemCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:itemCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f8865fb4-b8a8-4a07-8d69-88eb1995dc38" name="Check for existence of [venue]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="98d4ac5d-eecb-4248-b657-6f1807147903" name="Check for existence of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue/@code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="1d134000-4485-407b-9d81-8afd36895f43" name="Check for existence of [supervenue]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue/ns1:supervenue)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d6dc5d19-a90b-45c8-ab26-1d809408b7de" name="Check for existence of [paymentDetail]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="eade6b03-0c16-499f-bee9-1c4a566e3941" name="Check for existence of [@currency]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/@currency)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="ce3e9a4b-f376-43a8-9ef8-58312b658105" name="Check for existence of [unitPrice]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:unitPrice)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="019ec9da-7cd2-4486-8daf-e697db8b291f" name="Check for existence of [firstPaymentAmount]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:firstPaymentAmount)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="b7f7caa4-4eb2-4114-8785-72973df7df5e" name="Check for NOT existence of [firstShippingAmount]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:firstShippingAmount)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="aa590bb0-3ddc-437e-8d54-ae1fea781b75" name="Check for existence of [stdShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:stdShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9c32004f-6ffb-414c-8ad3-cafcc5666469" name="Check for existence of [rushShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:rushShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="866a087d-c221-4115-ab30-0bb4fa0a7baa" name="Check for existence of [twoDayShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:twoDayShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d586cf9a-6dcd-4eb1-b74b-f957cb0d5de4" name="Check for existence of [sameDayShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:sameDayShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="99e75155-005c-4446-95af-1551274382c7" name="Check for existence of [cartTitle]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:cartTitle)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="61547a6a-948d-4911-b055-591e5e293d30" name="Check for existence of [maxQuantity]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:maxQuantity)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f62e2d91-4fd3-44d7-859c-1548fad805b8" name="Check for existence of [coreItem]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:coreItem)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="2401f0cf-6af1-4690-9e50-24a31954cecd" name="Check for existence of [cartLanguage]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:cartLanguage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f13652af-c262-4a7e-b9e2-a3c5079c9153" name="Check for existence of [tlmTollFreeNumber]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:tlmTollFreeNumber)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="07a5dfb1-6445-45de-87c8-243cdad1c191"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

	// Obtain API response into a variable
	def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
	
	// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
	def root = new XmlSlurper().parseText(response)  
	
	// Put the root in the 'context'
	context.setProperty("xmlRoot", root)

}

</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of intent" id="610f6aad-23a9-44ba-ab31-c2ba882436b5"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - INTENT] = Element presence: "+ testOffer.intent.size() + " | Element Data: "+ testOffer.intent.text()

// Check if the element is present 
assert 1 == testOffer.intent.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of code" id="1f9de880-8251-4ccf-94ed-c4751a273808"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - CODE] = Element presence: "+ testOffer.code.size() + " | Element Data: "+ testOffer.code.text()

// Check if the element is present 
assert 1 == testOffer.code.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of productLineCode" id="0a371f82-52e2-4621-afe0-77b146b0c9c0"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - productLineCode] = Element presence: "+ testOffer.productLineCode.size() + " | Element Data: "+ testOffer.productLineCode.text()

// Check if the element is present 
assert 1 == testOffer.productLineCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of hostProductLineCode" id="0cd17035-35fb-46d4-97a9-8eab5f1419b7"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - hostProductLineCode] = Element presence: "+ testOffer.hostProductLineCode.size() + " | Element Data: "+ testOffer.hostProductLineCode.text()

// Check if the element is present 
assert 1 == testOffer.hostProductLineCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of status" id="8bb5eea6-d4bf-4095-9de4-4c730d338427"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - status] = Element presence: "+ testOffer.status.size() + " | Element Data: "+ testOffer.status.text()

// Check if the element is present 
assert 1 == testOffer.status.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of readyDate" id="d7a5c8ed-bdf6-4107-9cae-1d009abceab9"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - readyDate] = Element presence: "+ testOffer.readyDate.size() + " | Element Data: "+ testOffer.readyDate.text()

// Check if the element is present 
assert 1 == testOffer.readyDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of liveDate" id="da95595a-3ae4-476e-85ef-c710964081f7"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - liveDate] = Element presence: "+ testOffer.liveDate.size() + " | Element Data: "+ testOffer.liveDate.text()

// Check if the element is present 
assert 1 == testOffer.liveDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of endDate" id="baebe9e5-9851-4bc2-8ecf-1512aac1233e"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - endDate] = Element presence: "+ testOffer.endDate.size() + " | Element Data: "+ testOffer.endDate.text()

// Check if the element is present 
assert 1 == testOffer.endDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of promotionTemplateCode" id="903095c5-f245-4762-bfd3-929abd9dff57"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - promotionTemplateCode] = Element presence: "+ testOffer.derivation.promotionTemplateCode.size() + " | Element Data: "+ testOffer.derivation.promotionTemplateCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.promotionTemplateCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of offerPanelCode" id="fd77e578-fb16-4270-8734-c77b8790057f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - offerPanelCode] = Element presence: "+ testOffer.derivation.offerPanelCode.size() + " | Element Data: "+ testOffer.derivation.offerPanelCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.offerPanelCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of offerCode" id="39128e0a-b5b9-40f7-9449-6756c1e1aafe"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [WEB mask - offerCode] = Element presence: "+ testOffer.derivation.offerCode.size() + " | Element Data: "+ testOffer.derivation.offerCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.offerCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()

context.td = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7602166f-822e-4638-8529-1123ae45bf25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480e23a3-4b9b-4b0a-955b-c4dcee367029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0add6e9c-e26f-4eea-8157-89ef1f4a44b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c833d237-4f0d-4700-975d-3c9f4539c337</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>16c3d788-ffb3-4d24-ac86-baa1cebeda7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8ee2d47-b8f9-4af8-9f22-bfef6d235717</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9510f3ed-bd44-4ca0-85dc-add6ccd8172c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3db58539-0232-49b0-b4ad-afef43a450d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95ccaab9-06fc-4983-afb3-6665e61617bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b5019ea-4972-49f6-9bef-2bb42aa2a0cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>463650de-cc16-4c39-8720-ebcea730026a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>097a0288-81bc-4a68-8bcc-8069537539f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0226ccfb-bd6d-4e2b-a51e-1d5e9a649b01</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de690592-9288-4ce5-8304-efedeb09427e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ca65351f-a54c-4c12-bd99-e46c95cc74f1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="07fb916c-9555-4a83-a0bb-89073a950a4b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC06 - VERIFY ALL LEGACY OFFERS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>Description:
Verifies all legacy marketing offers of a given "Offer_Code".
Performs following steps.
1) Finds all marketing offers that belong to an offer_code from the Changed Offer API response.
2) Loop thru each marketing offer and validates each field inside marketing offer by comparing against database
3) Use this as a base or model test case. This is just reference implementation for the developer to refer as needed and does not have proper test requirements to map to.</con:description><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="ab6220e1-fc1d-4b36-bdb3-4470bcbe1029"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Project Property - filter: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	


</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="112036a4-a38a-41ad-9d41-9ee7aaa995c6"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="1e09e84c-5819-4c17-b7d0-0d3f95fc6647"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

}

</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify intent" id="5687e696-8d61-4859-8223-cefe91a24519"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

/* Obtain the 'marketing offer' that is associated with the supplied 'offer code' */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INTENT from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'intent' from the parsed response
def actVal =  testOffers[context.xidx].intent.text()

// Get expected 'intent' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INTENT"]

log.info " [EXPECTED | ACTUAL] - [Element: intent] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal - Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify productLineCode" id="82949023-f956-4335-b11e-8cfe76f83084"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code'
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select PRODUCT_LINE_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'productLineCode' from the parsed response
def actVal =  testOffers[context.xidx].productLineCode.text()

// Get expected 'productLineCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["PRODUCT_LINE_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: productLineCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify promotionTemplateCode" id="9a98aa68-3de1-41dd-bc04-88bbb84483cb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select PT_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'promotionTemplateCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.promotionTemplateCode.text()

// Get expected 'promotionTemplateCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["PT_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: promotionTemplateCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify offerPanelCode" id="18432997-6c8d-404c-8bfb-e8020fb596f8"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select OFFER_PANEL_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'offerPanelCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.offerPanelCode.text()

// Get expected 'offerPanelCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["OFFER_PANEL_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: offerPanelCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify itemCode" id="ce37b58d-258c-4015-ab04-8691c25c9b99"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select ITEM_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'itemCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.itemCode.text()

// Get expected 'itemCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["ITEM_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: itemCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify supervenue Code" id="1fa36936-c2d8-4165-9bd3-9b81d1c8a421"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select SUPERVENUE_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'supervenue' from the parsed response
def actVal =  testOffers[context.xidx].venue.supervenue.text()

// Get expected 'supervenue' value from Snapshot DB
def expVal = sql.rows(query).get(0)["SUPERVENUE_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: supervenue] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify secureCampaign Flag" id="af0b0d45-09fc-4e7c-8569-015ac54d0e69"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select SECURE_CAMPAIGN_FLAG from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'secureCampaign' from the parsed response
def actVal =  testOffers[context.xidx].secureCampaign.text()

// Get expected 'secureCampaign' value from Snapshot DB
def expVal = sql.rows(query).get(0)["SECURE_CAMPAIGN_FLAG"]
expVal = (expVal == "0" )? "false" : "true"

log.info " [EXPECTED | ACTUAL] - [Element: secureCampaign] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify unitPrice" id="d2a4c42e-3460-4a2b-849f-038139da3a22"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_UNIT_PRICE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'unitPrice' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.unitPrice.text()

// Get expected 'unitPrice' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_UNIT_PRICE"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: unitPrice] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify numberPayments" id="46a6acf1-7b4b-482e-b602-0b4e669fa8da"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_NUMBER_OF_PAYMENTS from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'numberPayments' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.numberPayments.text()

// Get expected 'numberPayments' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_NUMBER_OF_PAYMENTS"]
expVal = String.valueOf(expVal)

log.info " [EXPECTED | ACTUAL] - [Element: numberPayments] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Intial stdShipping" id="c5fb2c9f-bd7a-4ab8-8d8c-1105ff43f2f2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_STD_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'stdShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.stdShipping.text()

// Get expected 'stdShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_STD_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: stdShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()

context.td = null

//context.db.close("Setup")
//context.db.close("Setup_SnapShot")
//context.db = null // Out Of memory error
context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()

/* 
 *  Closing Connections in following ways WONT work. 
 *  Probably these local connection objects wont appear to "DBConnection" as that's in different domain. 
*/
//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="755f3071-5ded-4186-b1de-c4a55fc508fa" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC07 - FFS - LOGIC" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>Description:

Verifies FFS logic by validating correct elements are present when the fulfillment center is "EDS"</con:description><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="ec581a8d-0c3a-4256-94f2-868f1af93395"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
}	

	</script></con:config></con:testStep><con:testStep type="restrequest" name="Changed Offer API Request1" id="b5036dab-093a-4ee2-9aee-3c184b379f3b"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Changed Offer API Request1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="35b22bc4-b923-47f4-a9e1-87d7a50d304c"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Changed Offer API Request1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

}

</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify hpData exists" id="d1665bb1-b6c9-4a6e-a0e4-21040bfcd1ed"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b5036dab-093a-4ee2-9aee-3c184b379f3b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

if (testOffers[context.xidx].fulfillment.ffs.text() == "EDS"){
	log.info "Fulfillment center is EDS"
	assert 1 == testOffers[context.xidx].hpData.size()
}
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify hpKeycode exists" id="479d3e86-af84-43de-969f-739953634531"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b5036dab-093a-4ee2-9aee-3c184b379f3b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33


if (testOffers[context.xidx].fulfillment.ffs.text() == "EDS"){
	log.info "Fulfillment center is EDS"
	assert 1 == testOffers[context.xidx].hpData.hpKeycode.size()
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="VerifyhpProductNumber exists" id="70eb26b0-9c2c-4ec9-8ab7-01444a4d1acb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b5036dab-093a-4ee2-9aee-3c184b379f3b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp
// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33


if (testOffers[context.xidx].fulfillment.ffs.text() == "EDS"){
	log.info "Fulfillment center is EDS"
	assert 1 == testOffers[context.xidx].hpData.hpProductNumber.size()
}
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify hpMpgCode exists" id="b7f81fbb-5c62-48f5-9e06-e64be22adeda"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b5036dab-093a-4ee2-9aee-3c184b379f3b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33


if (testOffers[context.xidx].fulfillment.ffs.text() == "EDS"){
	log.info "Fulfillment center is EDS"
	assert 1 == testOffers[context.xidx].hpData.hpMpgCode.size()
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()

context.td = null

//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="a467161a-7b4f-4434-b376-b7339d889d78" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC08 - VERIFY CHANGED MARKET OFFERS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="7b3cc4bc-bc6f-4925-aa3b-5d966e13e842"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.setPropertyValue( "after",context.expand( '${#Project#s_after}' ))
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Project Property - filter: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
}	



	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="9777eafe-d99d-492f-8d89-08355edeaf4a"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="8c54e43f-0762-49f1-a407-642ff29fa4e2"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify intent" id="9089e3e6-73db-4d4f-8ed6-f96410c11a57"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

/* Obtain the 'marketing offer' that is associated with the supplied 'offer code' */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INTENT from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'intent' from the parsed response
def actVal =  testOffers[context.xidx].intent.text()

// Get expected 'intent' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INTENT"]

log.info " [EXPECTED | ACTUAL] - [Element: intent] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal - Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify productLineCode" id="4ecd14fe-7c5e-4908-a192-fb5bc82d99d5"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code'
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select PRODUCT_LINE_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'productLineCode' from the parsed response
def actVal =  testOffers[context.xidx].productLineCode.text()

// Get expected 'productLineCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["PRODUCT_LINE_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: productLineCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify promotionTemplateCode" id="cfe0d450-0907-4e78-aad4-c9cc9d459e1e"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select PT_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'promotionTemplateCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.promotionTemplateCode.text()

// Get expected 'promotionTemplateCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["PT_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: promotionTemplateCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify offerPanelCode" id="f841cc0d-f757-4fe1-b136-e37f18f08a48"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select OFFER_PANEL_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'offerPanelCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.offerPanelCode.text()

// Get expected 'offerPanelCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["OFFER_PANEL_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: offerPanelCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify itemCode" id="6087c494-26f6-40ce-9e13-b1ef7733b6b3"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select ITEM_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'itemCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.itemCode.text()

// Get expected 'itemCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["ITEM_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: itemCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify supervenue Code" id="63cdd2cb-5360-48ce-b0cb-10ade0da0420"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select SUPERVENUE_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'supervenue' from the parsed response
def actVal =  testOffers[context.xidx].venue.supervenue.text()

// Get expected 'supervenue' value from Snapshot DB
def expVal = sql.rows(query).get(0)["SUPERVENUE_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: supervenue] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify secureCampaign Flag" id="9c4aff61-0e60-49d1-92d3-644ccd0b03aa"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select SECURE_CAMPAIGN_FLAG from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'secureCampaign' from the parsed response
def actVal =  testOffers[context.xidx].secureCampaign.text()

// Get expected 'secureCampaign' value from Snapshot DB
def expVal = sql.rows(query).get(0)["SECURE_CAMPAIGN_FLAG"]
expVal = (expVal == "0" )? "false" : "true"

log.info " [EXPECTED | ACTUAL] - [Element: secureCampaign] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify unitPrice" id="5dceeff8-1b0b-4079-af92-1fd1d7b2b007"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_UNIT_PRICE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'unitPrice' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.unitPrice.text()

// Get expected 'unitPrice' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_UNIT_PRICE"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: unitPrice] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify numberPayments" id="735970d6-8ae4-410f-82a0-b6f9fb2e6f04"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_NUMBER_OF_PAYMENTS from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'numberPayments' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.numberPayments.text()

// Get expected 'numberPayments' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_NUMBER_OF_PAYMENTS"]
expVal = String.valueOf(expVal)

log.info " [EXPECTED | ACTUAL] - [Element: numberPayments] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Intial stdShipping" id="9e74f231-448f-4b0e-bb55-7303dd82b400"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_STD_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'stdShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.stdShipping.text()

// Get expected 'stdShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_STD_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: stdShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = sourcePath
log.info " [USER MSG] - Test Data Path is: "+ sourcePath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 


if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()

context.td = null

//context.db.close("Setup")
//context.db.close("Setup_SnapShot")
//context.db = null // Out Of memory error
context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()


/* 
 *  Closing Connections in following ways WONT work. 
 *  Probably these local connection objects wont appear to "DBConnection" as that's in different domain. 
*/
//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d8911de-7d3f-4168-b76e-a6d30012d58d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="TS03 -Load Data-Search-Specified" id="0092524d-b5a0-4159-9812-b671f7a00b18"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS04-TC00 - LOAD DATA SEARCH" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5cef7c60-b469-4920-b751-46fbcdc1b1f7"><con:description>Description:
Load Data into Setup Snapshot</con:description><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="2bfe6ba3-4502-4680-90f9-04c62eb337e9"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat


// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from S_LINKED_COMPONENTS')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_WEB_MKT_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete Num Of Rows in Setup DB : " + row1.get(0)[0] 

</script></con:config></con:testStep><con:testStep type="groovy" name="SetTestDataInputFile" id="d8ae945a-cc56-44f9-8277-58ae16170859"><con:settings/><con:config><script>context.testDataLoadMOfferSearch </script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="726dec93-394e-423b-9f2b-7d3f62b3435e"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>loaddata</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>OLD_SCRIPT_CODE</con:property><con:property>LABEL</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="AddSK" id="2f5a7fd2-4ffb-450c-bc93-c4a2d0fb215e"><con:settings/><con:config><script>// Get test data from data source
def oldScriptCode =  context.expand( '${DataSource#OLD_SCRIPT_CODE}' )

log.info "Old script code is: " + oldScriptCode 
def label =  context.expand( '${DataSource#LABEL}' )
log.info "Label is: " + label 

// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="cb1198ed-f2a4-4379-aae9-bb7ce97509df"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>AddSK</targetStep></con:config></con:testStep><con:testStep type="groovy" name="ReplicateToSepUpSnapShot" id="ba9da779-11b4-4355-b9fa-891eb3145e83"><con:settings/><con:config><script>

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

def tcName = testRunner.testCase.name 
context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\" + tcName+ ".xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
//context.td.close()
//context.td = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeebafd-dfa1-43cc-bccb-65ad5a3a97a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a72ca76f-6d85-4b85-a509-0a575fdb7efb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafb4422-3018-4989-a15e-71e8ae050ca0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62121887-abfc-4a19-9a10-1ab3e34c3458</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>04725136-a83f-4c35-b2a5-90f05b939e30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe57832d-ef1f-4f2e-be0d-6d40aae718e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>28eed18c-f120-463b-8b64-b6c8767b1095</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f68668a6-fe68-40f1-bf35-fce0de88c407</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b130ea4-9080-4055-96ee-dd808516502b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bda28d90-eaee-41bd-9f41-9254d19364ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1c743a55-2f4e-4a19-a204-3d952f1c02e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>298d6b38-ee1a-43e5-82df-739421d14c6e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d8ae945a-cc56-44f9-8277-58ae16170859</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2bfe6ba3-4502-4680-90f9-04c62eb337e9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:tearDownScript>
context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()

</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="TS04 -Search General Tests" id="4b73d581-541a-46bc-a716-9f17ef8af63d"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Basic Tests" searchProperties="true" id="0dc88283-c308-40a3-a162-14286669b23b"><con:settings/><con:testStep type="restrequest" name="REST Test Request" id="b9ce6352-7e17-4752-8ac3-496010105932"><con:settings/><con:config service="SearchOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Test Request" mediaType="application/json" id="1fc834ac-db71-475c-99c2-e9b0ffa98ac4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="XPath Match" name="Match content of [@mask]" id="5d27d48e-68c6-44b2-9271-ad6a98214a81"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshots[1]/@mask</path><content>web</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [currentAsOf]" id="aa2a79d6-3180-4e85-8a74-74c172d7dea2"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:currentAsOf)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="587b2cc9-dae8-4e57-b6df-83786a391fff"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check count of [marketingOffers]" id="1fea2bf5-a8df-4c37-9d7a-f73d3196fd83"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
count( //ns1:snapshots/ns1:marketingOffers)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@query]" id="3ba9b4c3-d78a-4818-bf48-aa3818484b82"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshots[1]/@query</path><content>filter=status:eq(A)</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="status:eq(A)"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>import com.eviware.soapui.impl.wsdl.teststeps.*


// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }</con:setupScript><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC02 - Duplicate Filters" searchProperties="true" id="c9307f46-d630-4c6b-b266-c94052845469"><con:settings/><con:testStep type="groovy" name="Groovy Script" disabled="true" id="0a9143ce-b516-49b5-b41b-d1dd59d04662"><con:settings/><con:config><script>def websearchstring = context.expand( '${DataSource#websearchstring}' )

log.info websearchstring</script></con:config></con:testStep><con:testStep type="restrequest" name="Search Offer - Status Op And" id="b153b2f2-5c80-4b82-b8ca-c864c8ca8a5a"><con:settings/><con:config service="SearchOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Search Offer - Status Op And" mediaType="application/json" id="c252b7df-a93f-48f8-a39f-bd4b73d3bca8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="XPath Match" name="Match content of [status]" id="3f74f1d0-fb58-4ac0-8782-7c4f05489e69"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshots[1]/ns1:marketingOffers[1]/ns1:marketingOffer[1]/ns1:status[1]/text()</path><content>A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="status:eq(A);status:eq(A)"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Search Offer - Status Op Or" id="32044230-3576-4994-aba7-4c0546700b26"><con:settings/><con:config service="SearchOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Search Offer - Status Op Or" mediaType="application/json" id="0a48003f-af3b-4cf4-b752-25307cde154c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="752c0569-ea93-4622-979a-9fed8f189ea6"><con:configuration><scriptText>def responseAsXml = context.expand( '${Search Offer - Status Op Or#ResponseAsXml#declare namespace ns1=\'http://ws.guthy-renker.com/soma/201407\'; //ns1:snapshots[1]}' )
def webdata = new XmlParser().parseText(responseAsXml)
assert  webdata.marketingOffers.marketingOffer.size() > 0</scriptText></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="status:eq(A)||status:eq(P)||status:eq(V)"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Search Offer- Status A and Operator" id="e8005bee-ce29-4b16-be3a-ff309b99cfef"><con:settings/><con:config service="SearchOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Search Offer- Status A and Operator" mediaType="application/json" id="31d44fe7-695d-4582-a025-aaa38dd6aef6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0bc7f8d1-03ce-4506-809c-510a0f00d80c"><con:configuration><scriptText>def responseAsXml = context.expand( '${Search Offer- Status A and Operator#ResponseAsXml#declare namespace ns1=\'http://ws.guthy-renker.com/soma/201407\'; //ns1:snapshots[1]}' )
def webdata = new XmlParser().parseText(responseAsXml)
assert  webdata.marketingOffers.marketingOffer.size() ==0</scriptText></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="status:eq(A);status:eq(V)"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>import com.eviware.soapui.impl.wsdl.teststeps.*


// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>41dfd849-b970-47bc-bbdd-e7d2a5db067e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:setupScript/><con:reportParameters/></con:testSuite><con:testSuite name="TS05 -Search Negative Tests" id="0000f552-c371-4494-945e-dfa5ac2c2951"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Negative Tests" searchProperties="true" id="4972a863-474a-4486-9e36-96c5865081e2"><con:settings/><con:testStep type="groovy" name="SetUpInputTestFile" id="93b24a0b-cbc9-4173-af6a-9d18ab0e9870"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="dcb93965-1274-4bef-9fde-58038cb75a6b"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>Negative</worksheet><cell>D2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>websearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="restrequest" name="REST Test Request" id="7e1f2ecb-f870-4f45-9a23-264e40f233d3"><con:settings/><con:config service="SearchOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Test Request" mediaType="application/json" id="24f55fdb-4ff2-45d0-889f-d643aff8f75a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="XPath Match" name="Match content of [code]" id="f09d3372-ddc2-4701-b4a2-1bb332e47199"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:error[1]/ns1:code[1]/text()</path><content>InvalidQueryString</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]" id="e27f9e94-f3b3-48fa-94fc-162adffdfb8a"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:error[1]/ns1:message[1]/text()</path><content>The query string is missing or improperly composed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes" id="17e4743e-0848-4a3a-b3b2-fad01b90479a"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ffadeca0-d40c-494a-9934-f881fbab1fd1"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${DataSource#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="879f8c65-f26f-444c-9be0-066ce0a4d485"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>REST Test Request</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\" + "OfferManagement-Search-TestData"+ ".xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>93b24a0b-cbc9-4173-af6a-9d18ab0e9870</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="TS06 -Search-SingleFieldSingleValue" id="ae11cb24-34af-4997-85f3-ea417cf5e6bd"><con:description>TestSuite generated for REST Service [SearchOfferAPI]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Search String Fields" searchProperties="true" id="767baefb-f6f2-41f4-b461-3f873a8c775c" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [Web] located at [/{path}/ws/rest/v1/snapshot/marketingoffers/web]</con:description><con:settings><con:setting id="GeneratableJUnitReport@Folder">C:\test</con:setting></con:settings><con:testStep type="groovy" name="SetUpInputTestFile" id="a849b07f-d87e-4d0d-a43c-f47bd21bde60"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="GetTestData" id="a15bdb39-ef00-488b-95b0-7317aaae57ec"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>SingleFieldSingleValue</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>field</con:property><con:property>operation</con:property><con:property>dbfield</con:property><con:property>value</con:property><con:property>websearchstring</con:property><con:property>dbsearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="jdbc" name="GetdbResults" id="39d41556-dd7c-408f-8740-35c805f080a1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName>setup snapshot</con:dbConnectionName><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/PASS_VALUE@guthsc9sl11.grc-network.net:1521:appdbci</con:connectionString><con:password>APPCSun445</con:password><con:query>select count(1) as DB_Count
from vw_web_mkt_offers ${GetTestData#dbsearchstring}</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="SearchOffer" id="928e451b-ae0e-4d14-b049-4556d92354ae"><con:settings/><con:config service="SearchOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOffer" mediaType="application/json" id="cb4fefa7-26ba-4540-977c-93fbfc309ad7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="XPath Match" id="775a835a-ec97-4cc4-84ff-1a250462e7ae" name="Check count of [marketingOffer]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
count( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer)</path><content>${GetdbResults#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/DB_COUNT[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="bf494e60-8aff-4ba9-8c01-08bf548d8a8a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${GetTestData#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Data" id="78ae96fb-8a4b-4749-8a83-739a5d6ed04b"><con:settings/><con:config><script>def value = context.expand( '${GetTestData#value}' )
def websearchstring = context.expand( '${GetTestData#websearchstring}' )
def field = context.expand( '${GetTestData#field}' )

def webresponseAsXml = context.expand( '${SearchOffer#ResponseAsXml#declare namespace ns1=\'http://ws.guthy-renker.com/soma/201407\'; //ns1:snapshots[1]}' )

def webdata = new XmlParser().parseText(webresponseAsXml)
 //log.info webdata.marketingOffers.marketingOffer[1].status.text()
//log.info webdata.marketingOffers.marketingOffer[1].hostProductLineCode
if(  webdata.marketingOffers.marketingOffer.size() >0)
{	
 webdata.marketingOffers.marketingOffer.each { marketingOffer ->
switch (field)
{
		case 'status':
		     // log.info 'status'
			 assert marketingOffer.status.text() == value, "Status invalid: Expected =" +value +" Actual = "+ marketingOffer.status.text()			 
			 break;
		case 'productLineCode':
			//log.info 'product line code'
			 assert marketingOffer.productLineCode.text() == value, "prodcut line code invalid: Expected =" +value +" Actual = "+ marketingOffer.productLineCode.text()
			 break;

		case 'hostProductLineCode':
			//log.info 'host'
			assert marketingOffer.hostProductLineCode.text() == value, "hostProductLineCode invalid: Expected =" +value +" Actual = "+marketingOffer.hostProductLineCode.text()
//			 if ( marketingOffer.productLineCode.text() == value) assert true
//			 else assert false
			 break;
//		case 'readyDate':
//			//log.info 'product line code'
//			 assert marketingOffer.readyDate.text() == value
//			 break;
//
//		case 'hostProductLineCode':
//			//log.info 'host'
//			assert marketingOffer.hostProductLineCode.text() == value
////			 if ( marketingOffer.productLineCode.text() == value) assert true
////			 else assert false
//			 break;

}
 }
}
else
{
	log.info  "Search Criteria -> "+ websearchstring+".No records found this search criteria"
}
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="d443b607-9bd5-4a42-bbda-6bc37cec2870"><con:settings/><con:config><dataSourceStep>GetTestData</dataSourceStep><targetStep>GetdbResults</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\" + "OfferManagement-Search-TestData"+ ".xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>74034483-1b9f-4ec2-9275-fd9835a98738</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5992b2da-464b-4171-9764-27a36f50fa1c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a849b07f-d87e-4d0d-a43c-f47bd21bde60</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC02 - Search Date Fields" searchProperties="true" id="6fb63c33-3845-4d7c-8379-ba83263d5a58" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [Web] located at [/{path}/ws/rest/v1/snapshot/marketingoffers/web]</con:description><con:settings><con:setting id="GeneratableJUnitReport@Folder">C:\test</con:setting></con:settings><con:testStep type="groovy" name="SetUpInputTestFile" id="f5a5a805-e11a-43c9-8ef8-45e5a164d80e"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="GetTestData" id="d24c1d2b-db1c-474e-b537-a3ca6a05a323"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>DateFields</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>field</con:property><con:property>operation</con:property><con:property>dbfield</con:property><con:property>value</con:property><con:property>websearchstring</con:property><con:property>dbsearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="jdbc" name="GetdbResults" id="14bdbbfd-73d2-45d7-83cb-89a7a19a73f9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName>setup snapshot</con:dbConnectionName><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/PASS_VALUE@guthsc9sl11.grc-network.net:1521:appdbci</con:connectionString><con:password>APPCSun445</con:password><con:query>select count(1) as DB_Count
from vw_web_mkt_offers ${DataSource#dbsearchstring}</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="SearchOffer" id="b9a3bb01-435f-49a8-a5a4-cb7fca838912"><con:settings/><con:config service="SearchOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOffer" mediaType="application/json" id="cb4fefa7-26ba-4540-977c-93fbfc309ad7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1f9d99f2-721d-4c19-ad65-121625a16062" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${GetTestData#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Data" id="6134d349-f749-451e-9b30-ddb97660253d"><con:settings/><con:config><script>import groovy.time.TimeCategory

def value = context.expand( '${GetTestData#value}' )
def websearchstring = context.expand( '${GetTestData#websearchstring}' )
def field = context.expand( '${GetTestData#field}' )
def operation = context.expand( '${GetTestData#operation}' )


def webresponseAsXml = context.expand( '${SearchOffer#ResponseAsXml#declare namespace ns1=\'http://ws.guthy-renker.com/soma/201407\'; //ns1:snapshots[1]}' )

def webdata = new XmlParser().parseText(webresponseAsXml)
 //log.info webdata.marketingOffers.marketingOffer[1].status.text()
//log.info webdata.marketingOffers.marketingOffer[1].hostProductLineCode
if(  webdata.marketingOffers.marketingOffer.size() >0)
{		
 webdata.marketingOffers.marketingOffer.each { marketingOffer ->
 //log.info marketingOffer.endDate.text().substring(0,10)
switch (field)
{		
	
		case 'readyDate':
			//log.info 'product line code'
			switch(operation)
			{
				case 'gt':
				log.info 'gt'
				 assert marketingOffer.readyDate.text() > value, "ReadyDate invalid(ready date is less than the actual value): Expected =" +value +" Actual = " +marketingOffer.readyDate.text()		
				 break;
				case 'eq':			
				 assert marketingOffer.readyDate.text() == value, "hostProductLineCode invalid: Expected =" +value +" Actual = "	+marketingOffer.readyDate.text()	
				 break;
				case 'ge':	
				log.info 'ge'	
				//log.info 	String.format('%tF',marketingOffer.readyDate.text().tostring())+ ' - '+ value
				 assert marketingOffer.readyDate.text() >= value	, "ReadyDate invalid(ready date is less than or equal to the actual value): Expected =" +value +" Actual = " +marketingOffer.readyDate.text()			
				 break;
				case 'lt':	
				log.info 'lt'		
				 assert marketingOffer.readyDate.text() &lt; value, "ReadyDate invalid(ready date is greater than the actual value): Expected =" +value +" Actual = " +marketingOffer.readyDate.text()				
				 break;
				case 'le':	
				log.info 'le'	
	 			log.info marketingOffer.readyDate.text().substring(0,10)
				 assert marketingOffer.readyDate.text().substring(0,10) &lt;= value	, "ReadyDate invalid(ready date is greater than or equal to the actual value): Expected =" +value +" Actual = " +marketingOffer.readyDate.text()			
				 break;
			}
			 break;

		case 'endDate':
			//log.info 'host'
			switch(operation)
			{
				case 'gt':
				log.info 'gt'
				 assert marketingOffer.endDate.text() > value, "End date invalid(end date is less than the actual value): Expected =" +value +" Actual = " +marketingOffer.endDate.text()
				 break;
				case 'eq':			
				 assert marketingOffer.endDate.text() == value, "End date invalid: Expected =" +value +" Actual = "	+marketingOffer.endDate.text()			
				 break;
				case 'ge':	
				log.info 'ge'	
				//log.info 	String.format('%tF',marketingOffer.readyDate.text().tostring())+ ' - '+ value
				 assert marketingOffer.endDate.text() >= value, "End date invalid(end date is less than or equal to the actual value): Expected =" +value +" Actual = "	+marketingOffer.endDate.text()					
				 break;
				case 'lt':	
				log.info 'lt'		
				 assert marketingOffer.endDate.text() &lt; value, "End date invalid(end date is greater than the actual value): Expected =" +value +" Actual = "+marketingOffer.endDate.text()						
				 break;
				case 'le':	
				log.info 'le'		 			
				 assert marketingOffer.endDate.text().substring(0,10) &lt;= value, "End date invalid(end date is greater than or equal to the actual value): Expected =" +value +" Actual = "+marketingOffer.endDate.text()						
				 break;
			}
					
//			 if ( marketingOffer.productLineCode.text() == value) assert true
//			 else assert false
			 break;

}
 }
}
else
{
	log.info  "Search Criteria -> "+ websearchstring+".No records found this search criteria"
}
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="16bd799e-6dba-49d8-9ea6-540882474605"><con:settings/><con:config><dataSourceStep>GetTestData</dataSourceStep><targetStep>GetdbResults</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\" + "OfferManagement-Search-TestData"+ ".xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>74034483-1b9f-4ec2-9275-fd9835a98738</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5992b2da-464b-4171-9764-27a36f50fa1c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f5a5a805-e11a-43c9-8ef8-45e5a164d80e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="TS07 -Search-SingleFieldMultiValue" id="4655127c-3271-4018-aaec-4242a42bec3b"><con:description>TestSuite generated for REST Service [SearchOfferAPI]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Search with Multiple Values" searchProperties="true" id="35f9f658-2190-49a4-99a4-1a7d645f075a" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [Web] located at [/{path}/ws/rest/v1/snapshot/marketingoffers/web]</con:description><con:settings/><con:testStep type="groovy" name="SetUpInputTestFile" id="2b99397f-4bf7-491a-822e-418393adb8d7"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="f50080ac-7552-4068-a310-0cce5f2a6a74"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>SingleFieldMultiValue</worksheet><cell>C2</cell><ignoreEmpty>false</ignoreEmpty></con:configuration></con:dataSource><con:property>value</con:property><con:property>websearchstring</con:property><con:property>dbsearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request" id="cb617840-1936-4b0b-8115-33f0541e36f7"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName>setup snapshot</con:dbConnectionName><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/PASS_VALUE@guthsc9sl11.grc-network.net:1521:appdbci</con:connectionString><con:password>APPCSun445</con:password><con:query>select count(1) as DB_Count
from vw_web_mkt_offers ${DataSource#dbsearchstring}</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="SearchOffer" id="5e96e1f5-87ec-4dfc-b6b7-fd5f2b4147dd"><con:settings/><con:config service="SearchOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOffer" mediaType="application/json" id="4ea980ad-f4d8-41e2-bff8-fcab581f64e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${DataSource#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Data" id="56131263-b6a8-4426-9c28-9458c48bccee"><con:settings/><con:config><script>def value = context.expand( '${DataSource#value}' )
def websearchstring = context.expand( '${DataSource#websearchstring}' )
def field = context.expand( '${DataSource#field}' )

def webresponseAsXml = context.expand( '${SearchOffer#ResponseAsXml#declare namespace ns1=\'http://ws.guthy-renker.com/soma/201407\'; //ns1:snapshots[1]}' )

def webdata = new XmlParser().parseText(webresponseAsXml)
 //log.info webdata.marketingOffers.marketingOffer[1].status.text()

//log.info webdata.marketingOffers.marketingOffer.size()
if(  webdata.marketingOffers.marketingOffer.size() >0)
{
 webdata.marketingOffers.marketingOffer.each { marketingOffer ->
//
 log.info marketingOffer.status.text()
 log.info value
		 assert value.contains(marketingOffer.status.text()),"Status invalid(In Operation): Expected =" +value +" Actual = "	+marketingOffer.status.text()
 }
}
else
{
	log.info  "Search Criteria -> "+ websearchstring+".No records found this search criteria"
}
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="3863469f-7da6-4b04-8f9d-62652fe8826b"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>JDBC Request</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\" + "OfferManagement-Search-TestData"+ ".xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a49e8d8c-2909-4d35-b699-b64f12e63c89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f167bc6e-7bd6-4e55-8433-55331b112faa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>93cf3605-1d73-42bd-84f4-cc7555411424</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2b99397f-4bf7-491a-822e-418393adb8d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="TS08 -Search-MultiFieldSingleValue" id="6741e2ce-2137-4bf3-b2f5-8794218b4cc1"><con:description>TestSuite generated for REST Service [SearchOfferAPI]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Search MultiFields" searchProperties="true" id="bbd53a36-ec29-4341-b86e-7cfb4bea41f3" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [Web] located at [/{path}/ws/rest/v1/snapshot/marketingoffers/web]</con:description><con:settings><con:setting id="GeneratableJUnitReport@Folder">C:\test</con:setting><con:setting id="GeneratableJUnitReport@Style">Multiple Pages</con:setting></con:settings><con:testStep type="groovy" name="SetUpInputTestFile" id="45827054-c933-462d-b405-e673e2553045"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="GetTestData" id="08c442f5-8a53-4c09-b777-acf98a9a5eaa"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>MultiFieldSingleValue</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>status</con:property><con:property>readydate</con:property><con:property>enddate</con:property><con:property>entityid</con:property><con:property>productlinecode</con:property><con:property>hostproductlinecode</con:property><con:property>websearchstring</con:property><con:property>dbsearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="jdbc" name="GetdbResults" id="f84c5269-e755-4800-9cde-b354493b88f3"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName>setup snapshot</con:dbConnectionName><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/PASS_VALUE@guthsc9sl11.grc-network.net:1521:appdbci</con:connectionString><con:password>APPCSun445</con:password><con:query>select count(1) as DB_Count
from vw_web_mkt_offers ${GetTestData#dbsearchstring}</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="SearchOffer" id="a26eac4e-09df-4560-a298-cffa2e93cc59"><con:settings/><con:config service="SearchOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOffer" mediaType="application/json" id="cb4fefa7-26ba-4540-977c-93fbfc309ad7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${GetTestData#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Data" id="de08b728-d6ab-429a-a5af-9ad4592cfdbc"><con:settings/><con:config><script>def value = context.expand( '${GetTestData#value}' )
def websearchstring = context.expand( '${GetTestData#websearchstring}' )
//def field = context.expand( '${GetTestData#field}' )
def status = context.expand( '${GetTestData#status}' )
def productlinecode = context.expand( '${GetTestData#productlinecode}' )
def hostproductlinecode = context.expand( '${GetTestData#hostproductlinecode}' )
def entityid = context.expand( '${GetTestData#entityid}' )
def readydate = context.expand( '${GetTestData#readydate}' )
def enddate = context.expand( '${GetTestData#enddate}' )


def webresponseAsXml = context.expand( '${SearchOffer#ResponseAsXml#declare namespace ns1=\'http://ws.guthy-renker.com/soma/201407\'; //ns1:snapshots[1]}' )

def webdata = new XmlParser().parseText(webresponseAsXml)
//log.info webdata.marketingOffers.marketingOffer.size()
filterArray = websearchstring.split(";")

filterArray.each{array ->
	field = array.split(":")
   if(  webdata.marketingOffers.marketingOffer.size() >0)
{
   webdata.marketingOffers.marketingOffer.each { marketingOffer ->
	switch (field[0])
		{	
		case 'status':
		      log.info 'status'
			 assert marketingOffer.status.text() == status,"Status invalid: Expected =" +status +" Actual = " +marketingOffer.status.text()
			 break;
		case 'productLineCode':
			log.info 'product line code'
			 assert marketingOffer.productLineCode.text() == productlinecode,"product line code invalid: Expected =" +productlinecode +" Actual = " +marketingOffer.productLineCode.text()
			 break;
		case 'hostProductLineCode':
			log.info 'host'
			assert marketingOffer.hostProductLineCode.text() == hostproductlinecode,"hostProductLineCode invalid: Expected =" +hostproductlinecode +" Actual = " + marketingOffer.hostProductLineCode.text()
			 break;		
		case 'readyDate':
			log.info 'readyDate'
			 assert marketingOffer.readyDate.text() &lt; readydate ,"readydate filtered by less than operation: Expected =" +readydate +" Actual = " + marketingOffer.readyDate.text()
			 break;
		case 'endDate':
			log.info 'endDate'
			 assert marketingOffer.endDate.text() &lt; enddate ,"enddate filtered by less than operation: Expected =" +enddate +" Actual = " +marketingOffer.endDate.text()
			 break;
		}
		
		}
}
else
{
	log.info  "Search Criteria -> "+ websearchstring+".No records found this search criteria"
	//assert 1=2,"No records found from web search string."
}


}

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="a4154ac0-7fac-4070-bc5e-a85d39c4adf0"><con:settings/><con:config><dataSourceStep>GetTestData</dataSourceStep><targetStep>GetdbResults</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\" + "OfferManagement-Search-TestData"+ ".xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>74034483-1b9f-4ec2-9275-fd9835a98738</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5992b2da-464b-4171-9764-27a36f50fa1c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>45827054-c933-462d-b405-e673e2553045</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:setupScript/><con:reportParameters/></con:testSuite><con:testSuite name="TS09 -Search-MultiFieldMultiValue" id="b50c2373-759a-4f20-b97c-e195a62dac48"><con:description>TestSuite generated for REST Service [SearchOfferAPI]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Search MultiFields" searchProperties="true" id="60394b1d-52ea-42fb-b907-e75187f5b605" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [Web] located at [/{path}/ws/rest/v1/snapshot/marketingoffers/web]</con:description><con:settings><con:setting id="GeneratableJUnitReport@Folder">C:\test</con:setting><con:setting id="GeneratableJUnitReport@Style">Multiple Pages</con:setting></con:settings><con:testStep type="groovy" name="SetUpInputTestFile" id="6fa46a32-3ff4-4af8-96b3-59b750602037"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="GetTestData" id="5910916b-cc82-4233-ba01-888bd780231a"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputTestFile#result}</file><worksheet>MultiFieldMultiValue</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>status</con:property><con:property>readydate</con:property><con:property>enddate</con:property><con:property>entityid</con:property><con:property>productlinecode</con:property><con:property>hostproductlinecode</con:property><con:property>websearchstring</con:property><con:property>dbsearchstring</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="jdbc" name="GetdbResults" id="245d22b4-8909-4913-86bd-d56a5b08e5d4"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName>setup snapshot</con:dbConnectionName><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/PASS_VALUE@guthsc9sl11.grc-network.net:1521:appdbci</con:connectionString><con:password>APPCSun445</con:password><con:query>select count(1) as DB_Count
from vw_web_mkt_offers ${GetTestData#dbsearchstring}</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="SearchOffer" id="90c351e6-16c6-4146-9a02-c179bf954f20"><con:settings/><con:config service="SearchOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchOffer" mediaType="application/json" id="cb4fefa7-26ba-4540-977c-93fbfc309ad7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-ws-ci/ws/rest/v1/snapshot/marketingoffers/web</con:originalUri><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${GetTestData#websearchstring}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Data" id="97029316-743d-4f77-9946-6274798c724f"><con:settings/><con:config><script>def value = context.expand( '${GetTestData#value}' )
def websearchstring = context.expand( '${GetTestData#websearchstring}' )
//def field = context.expand( '${GetTestData#field}' )
def status = context.expand( '${GetTestData#status}' )
def productlinecode = context.expand( '${GetTestData#productlinecode}' )
def hostproductlinecode = context.expand( '${GetTestData#hostproductlinecode}' )
def entityid = context.expand( '${GetTestData#entityid}' )
def readydate = context.expand( '${GetTestData#readydate}' )
def enddate = context.expand( '${GetTestData#enddate}' )


def webresponseAsXml = context.expand( '${SearchOffer#ResponseAsXml#declare namespace ns1=\'http://ws.guthy-renker.com/soma/201407\'; //ns1:snapshots[1]}' )

def webdata = new XmlParser().parseText(webresponseAsXml)
//log.info webdata.marketingOffers.marketingOffer.size()
filterArray = websearchstring.split(";")


filterArray.each{array ->
	field = array.split(":")
   if(  webdata.marketingOffers.marketingOffer.size() >0)
{
   webdata.marketingOffers.marketingOffer.each { marketingOffer ->
	switch (field[0])
		{	
		case 'status':
		      log.info 'status'
			 assert status.contains(marketingOffer.status.text()),"Status invalid(In Operation): Expected =" +status +" Actual = " +	marketingOffer.status.text()		 
			 break;
		case 'productLineCode':
			log.info 'product line code'
			 assert marketingOffer.productLineCode.text() == productlinecode,"product line code invalid: Expected =" +productlinecode +" Actual = " +marketingOffer.productLineCode.text()
			 break;
		case 'hostProductLineCode':
			log.info 'host'
			assert marketingOffer.hostProductLineCode.text() == hostproductlinecode,"hostproductlinecode invalid: Expected =" +hostproductlinecode +" Actual = " +marketingOffer.hostProductLineCode.text()
			 break;		
		case 'readyDate':
			log.info 'readyDate'
			 assert marketingOffer.readyDate.text() &lt; readydate,"ready Date invalid(Less than operation): Expected =" +readydate +" Actual = " +marketingOffer.readyDate.text()
			 break;
		case 'endDate':
			log.info 'endDate'
			 assert marketingOffer.endDate.text() &lt; enddate,"enddate invalid(less than Operation): Expected =" +enddate +" Actual = " +marketingOffer.endDate.text()
			 break;
		}
		
		}
}
else
{
	log.info  "Search Criteria -> "+ websearchstring+".No records found this search criteria"
}


}

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="cca75052-8306-4c4d-ba09-65397b3eebcf"><con:settings/><con:config><dataSourceStep>GetTestData</dataSourceStep><targetStep>GetdbResults</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\" + "OfferManagement-Search-TestData"+ ".xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>74034483-1b9f-4ec2-9275-fd9835a98738</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5992b2da-464b-4171-9764-27a36f50fa1c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6fa46a32-3ff4-4af8-96b3-59b750602037</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="TS10 -Specified Offer Call" id="f9d46f1a-b4bd-4c86-b51e-04d35aac6ac4"><con:description>TestSuite generated for REST Service [http://10.92.41.155:8380]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Validate Offer Info - WEB Masking" searchProperties="true" id="b9a7aece-4aed-49d2-80f8-e752f2336b51" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [Web] located at [/soma-WS-ci/ws/rest/v1/snapshot/marketingoffer/B6FE33/web]</con:description><con:settings/><con:testStep type="groovy" name="SetTestDataInputFile" id="e56be6ba-6d6c-4369-8875-566eba156434"><con:settings/><con:config><script>context.testDataLoadMOfferSearch</script></con:config></con:testStep><con:testStep type="datasource" name="GetOffers" id="f3788faa-acc6-4181-9697-7f8b4453c3dc"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetTestDataInputFile#result}</file><worksheet>specificiedoffersWeb</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>LegacyOfferCode</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="VerifyOfferData" id="190bc92a-5ee6-45f5-894e-6e7d4c3d5c99"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*

def sql = context.snp

def legacyOfferCode = context.expand( '${GetOffers#LegacyOfferCode}' )

log.info "legacyOfferCode.."+ legacyOfferCode

def query = "Select count(*) as COUNT From vw_web_mkt_offers Where vw_web_mkt_offers.LEGACY_OFFER_CODE = '" + legacyOfferCode  +"'"

log.info "query.." + query


// Run query
def res = sql.rows(query)
// From DB get values for all components
def actualcount = res.get(0)["COUNT"]

context.actualcount = actualcount

if(actualcount == 1)
{
	log.info "Offer Code "+legacyOfferCode+ " Found"
	assert true
} else if (actualcount == 0)
{
	log.info "Offer Code "+legacyOfferCode+ " Does not exist in setup snapshot Database"
	assert false,"Offer Code "+legacyOfferCode+ " Does not exist in setup snapshot Database"
}

</script></con:config></con:testStep><con:testStep type="groovy" name="SkipValidationOnlyIfDataDoesNotExists" id="eb65b80e-60b6-431f-ae0f-6b8440e5eeda"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*

if(context.actualcount ==1)
 {
	testRunner.gotoStepByName("GetdbOffer")	
 }
 else
 {
 	testRunner.gotoStepByName("DataSource Loop")	
 }
</script></con:config></con:testStep><con:testStep type="jdbc" name="GetdbOffer" id="a46109fd-58ca-4bb1-bb0a-c63328229029"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName>Snp</con:dbConnectionName><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/APPCSun445@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>y</con:password><con:query>
 Select vw_web_mkt_offers.INTENT, vw_web_mkt_offers.LEGACY_OFFER_CODE,
      vw_web_mkt_offers.PRODUCT_LINE_CODE, vw_web_mkt_offers.STATUS,
      vw_web_mkt_offers.READY_DATE, vw_web_mkt_offers.END_DATE,
      vw_web_mkt_offers.SOURCE_KEY_UID, vw_web_mkt_offers.SOURCE_KEY_CODE,
      vw_web_mkt_offers.PT_CODE, vw_web_mkt_offers.OFFER_PANEL_CODE,
      vw_web_mkt_offers.OFFER_CODE, vw_web_mkt_offers.ITEM_CODE,
      vw_web_mkt_offers.VENUE_CODE, vw_web_mkt_offers.SUPERVENUE_CODE,
      vw_web_mkt_offers.CURRENCY_CODE,
      trim(To_char(vw_web_mkt_offers.INITIAL_UNIT_PRICE, '99990.99')) As
      INITIAL_UNIT_PRICE, vw_web_mkt_offers.INITIAL_NUMBER_OF_PAYMENTS,
      trim(To_char(vw_web_mkt_offers.INITIAL_FIRST_PAYMENT_AMOUNT,
      '99990.99')) INITIAL_FIRST_PAYMENT_AMOUNT,
      trim(To_char(vw_web_mkt_offers.INITIAL_FIRST_SHIPPING_AMOUNT,'99990.99')) As INITIAL_FIRST_SHIPPING_AMOUNT,
      trim(To_char(vw_web_mkt_offers.INITIAL_STD_SHIPPING ,'99990.99'))INITIAL_STD_SHIPPING ,
      case INITIAL_STD_SHIP_AVAILABLE  when '1' then 'true' else 'false' end INITIAL_STD_SHIP_AVAILABLE,
      trim(To_char(vw_web_mkt_offers.INITIAL_RUSH_SHIPPING,'99990.99')) INITIAL_RUSH_SHIPPING,
      case INITIAL_RUSH_SHIP_AVAILABLE  when '1' then 'true' else 'false' end INITIAL_RUSH_SHIP_AVAILABLE,
      trim(To_char(vw_web_mkt_offers.INITIAL_2DAY_SHIPPING,'99990.99')) INITIAL_2DAY_SHIPPING,
      case INITIAL_2DAY_SHIP_AVAILABLE  when '1' then 'true' else 'false' end INITIAL_2DAY_SHIP_AVAILABLE,
      trim(To_char(vw_web_mkt_offers.INITIAL_SDAY_SHIPPING,'99990.99')) INITIAL_SDAY_SHIPPING,
      case INITIAL_SDay_SHIP_AVAILABLE  when '1' then 'true' else 'false' end INITIAL_SDay_SHIP_AVAILABLE,
      vw_web_mkt_offers.TENANT_ID,
      vw_web_mkt_offers.WEB_CART_TITLE, vw_web_mkt_offers.WEB_CART_MAX_QTY,
      vw_web_mkt_offers.CART_LANGUAGE, vw_web_mkt_offers.CORE_ITEM_FLAG,
      vw_web_mkt_offers.HOST_PRODUCT_LINE_CODE, vw_web_mkt_offers.FFS_CODE,
      vw_web_mkt_offers.HP_KEY_CODE, vw_web_mkt_offers.HP_PRODUCT_NUMBER,
      vw_web_mkt_offers.HP_MPG_CODE,case SECURE_CAMPAIGN_FLAG  when '1' then 'true' else 'false' end as SECURE_CAMPAIGN_FLAG,
      CUSTOMER_SERVICE_PHONE_NUMBER,TFN,
      case CORE_ITEM_FLAG  when '1' then 'true' else 'false' end CORE_ITEM_FLAG
    From vw_web_mkt_offers
    Where vw_web_mkt_offers.LEGACY_OFFER_CODE = '${GetOffers#LegacyOfferCode}'</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="GetwebOffer" id="95476c2d-e9c1-4cc5-a04d-34c15dc5cafa"><con:settings/><con:config service="SpecefiedOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffer/{LOC}/{mask}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetwebOffer" mediaType="application/json" id="270e38b5-bafd-4e36-a8e0-8e90cf407da4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-WS-ci/ws/rest/v1/snapshot/marketingoffer/B6FE33/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1566734d-d1cb-4b5d-a3bb-22898746c4d7" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MASK" value="WEB"/>
  <con:entry key="LOC" value="${GetOffers#LegacyOfferCode}"/>
</con:parameters><con:parameterOrder><con:entry>LOC</con:entry><con:entry>mask</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ValidateGetwebOffer" id="f5fea96a-4870-4f7e-8cc9-136c4ec47785"><con:settings/><con:config service="SpecefiedOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffer/{LOC}/{mask}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ValidateGetwebOffer" mediaType="application/json" id="270e38b5-bafd-4e36-a8e0-8e90cf407da4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-WS-ci/ws/rest/v1/snapshot/marketingoffer/B6FE33/web</con:originalUri><con:assertion type="XPath Match" id="d002316e-fb86-4fd2-9cf4-afe4d101425c" name="Match content of [intent]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:intent[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INTENT[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="dca53495-d6cb-4f42-925e-7bff74e15305" name="Match content of [productLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:productLineCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/PRODUCT_LINE_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="71bb2433-368b-4663-92ff-72fe2329745c" name="Match content of [hostProductLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:hostProductLineCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/HOST_PRODUCT_LINE_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="8ca14a60-4a3b-495c-8454-72e88a2774e8" name="Match content of [status]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:status[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/STATUS[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="e99d38a2-c863-435d-892c-54334ab24220" name="Match content of [@entityId]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:sourceKey-Ref[1]/@entityId</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SOURCE_KEY_UID[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="02e59fad-d381-49cf-b2f6-878f84574261" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:sourceKey-Ref[1]/@code</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SOURCE_KEY_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="80da4ffd-a323-4ef2-b20b-23595b9fc185" name="Match content of [promotionTemplateCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:promotionTemplateCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/PT_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="2ae212e8-fc5d-4ab1-9384-35904b29e5e3" name="Match content of [offerPanelCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:offerPanelCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/OFFER_PANEL_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="55ed6f53-8d03-4bef-bd9d-867325479013" name="Match content of [offerCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:offerCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/OFFER_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="8581f44c-31f5-4a0d-a929-fe7da32b3747" name="Match content of [itemCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:itemCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/ITEM_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9adc9804-88d4-46e8-b180-0be64c989faf" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:venue[1]/@code</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/VENUE_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="eebf3b28-7ee8-41c5-974a-6b6fa5f2f35c" name="Match content of [supervenue]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:venue[1]/ns1:supervenue[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SUPERVENUE_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="1c858e6f-910a-4450-9fe5-b49d8a3fc709" name="Match content of [secureCampaign]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:secureCampaign[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SECURE_CAMPAIGN_FLAG[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="ea229a6a-eb22-4463-8a08-fe8c5ac53df2" name="Match content of [@currency]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:paymentDetail[1]/@currency</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CURRENCY_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="58f47478-0d98-4135-acd7-71c9a53152a0" name="Match content of [unitPrice]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:paymentDetail[1]/ns1:unitPrice[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITIAL_UNIT_PRICE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="eda66f08-923f-4073-ad60-57a197491510" name="Match content of [numberPayments]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:paymentDetail[1]/ns1:numberPayments[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITIAL_NUMBER_OF_PAYMENTS[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="98417f94-5be5-4623-bfc4-87e81d2c826f" name="Match content of [firstPaymentAmount]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:paymentDetail[1]/ns1:firstPaymentAmount[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITIAL_FIRST_PAYMENT_AMOUNT[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="46016541-dc1f-42d4-83f0-398556e7ed2f" name="Match content of [customerServicePhoneNumber]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:customerServicePhoneNumber[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CUSTOMER_SERVICE_PHONE_NUMBER[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="a76e8548-54bb-48c6-8199-5322c420cd54" name="Match content of [coreItem]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:web[1]/ns1:coreItem[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CORE_ITEM_FLAG[2]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="019ba54b-85b4-48bf-8ad4-bb70a2893a89" name="Match content of [ffs]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:fulfillment[1]/ns1:ffs[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/FFS_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="43f11802-e5ae-4c71-9549-e65a0b974741" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dd731899-686e-40ac-a600-d2a43ac2b817" name="Script Assertion"><con:configuration/></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MASK" value="WEB"/>
  <con:entry key="LOC" value="${GetOffers#LegacyOfferCode}"/>
</con:parameters><con:parameterOrder><con:entry>LOC</con:entry><con:entry>mask</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DataValidation" id="9fee7d9c-e0d1-4432-a8e0-42f048685b5c"><con:settings/><con:config><script>//def dbresponse = context.expand( '${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]}' )
def legacyOfferCode = context.expand( '${GetOffers#LegacyOfferCode}' )

def dbresponse = context.expand( '${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]}' )
def webresponse = context.expand( '${GetwebOffer#ResponseAsXml#declare namespace ns1=\'http://ws.guthy-renker.com/soma/201407\'; //ns1:snapshot[1] }' )
def dbdata = new XmlParser().parseText(dbresponse)
def webdata = new XmlParser().parseText(webresponse)
//log.info dbdata.TFN.text()
//log.info webdata.marketingOffer.web.tlmTollFreeNumber.text()
assert dbdata.TFN.text()== webdata.marketingOffer.web.tlmTollFreeNumber.text(),"Offer Code: "+legacyOfferCode+ ". TLM Toll Free Number Invalid: Expected =" +dbdata.TFN.text() +"; Actual = " +webdata.marketingOffer.web.tlmTollFreeNumber.text()
assert dbdata.CUSTOMER_SERVICE_PHONE_NUMBER.text()== webdata.marketingOffer.customerServicePhoneNumber.text(),"Offer Code: "+legacyOfferCode+ ". customerServicePhoneNumber Invalid: Expected =" +dbdata.CUSTOMER_SERVICE_PHONE_NUMBER.text() +"; Actual = "+webdata.marketingOffer.customerServicePhoneNumber.text()
//All Shipping Fields validation
assert dbdata.INITIAL_UNIT_PRICE.text()==webdata.marketingOffer.paymentDetail.unitPrice.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - unitPrice Invalid: Expected =" +dbdata.INITIAL_UNIT_PRICE.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.unitPrice.text()
assert dbdata.INITIAL_NUMBER_OF_PAYMENTS.text()==webdata.marketingOffer.paymentDetail.numberPayments.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - numberPayments Invalid: Expected =" +dbdata.INITIAL_NUMBER_OF_PAYMENTS.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.numberPayments.text()
assert dbdata.INITIAL_FIRST_PAYMENT_AMOUNT.text()==webdata.marketingOffer.paymentDetail.firstPaymentAmount.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - firstPaymentAmount Invalid: Expected =" +dbdata.INITIAL_FIRST_PAYMENT_AMOUNT.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.firstPaymentAmount.text()
//assert dbdata.INITIAL_FIRST_SHIPPING_AMOUNT.text()==webdata.marketingOffer.paymentDetail.firstShippingAmount.text()

//log.info webdata.marketingOffer.paymentDetail.rushShipping.@available[0]
if(webdata.marketingOffer.paymentDetail.rushShipping.@available[0] =='true')
{
	assert dbdata.INITIAL_RUSH_SHIPPING.text()==webdata.marketingOffer.paymentDetail.rushShipping.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - rushShipping  Invalid: Expected =" +dbdata.INITIAL_RUSH_SHIPPING.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.rushShipping.text()
}
if(webdata.marketingOffer.paymentDetail.twoDayShipping.@available[0] =='true')
{
	assert dbdata.INITIAL_2DAY_SHIPPING.text()==webdata.marketingOffer.paymentDetail.twoDayShipping.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - twoDayShipping  Invalid: Expected =" +dbdata.INITIAL_2DAY_SHIPPING.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.twoDayShipping.text()
}
if(webdata.marketingOffer.paymentDetail.sameDayShipping.@available[0] =='true')
{
	assert dbdata.INITIAL_SDAY_SHIPPING.text()==webdata.marketingOffer.paymentDetail.sameDayShipping.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - sameDayShipping  Invalid: Expected =" +dbdata.INITIAL_SDAY_SHIPPING.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.sameDayShipping.text()
}
if(webdata.marketingOffer.paymentDetail.stdShipping.@available[0] =='true')
{
	assert dbdata.INITIAL_STD_SHIPPING.text()==webdata.marketingOffer.paymentDetail.stdShipping.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - stdShipping  Invalid: Expected =" +dbdata.INITIAL_STD_SHIPPING.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.stdShipping.text()
}
//All Shippping available validation.
assert dbdata.INITIAL_STD_SHIP_AVAILABLE.text()==webdata.marketingOffer.paymentDetail.stdShipping.@available[0],"Offer Code: "+legacyOfferCode+ ".paymentDetail - stdShipping  Invalid: Expected =" +dbdata.INITIAL_STD_SHIP_AVAILABLE.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.stdShipping.@available[0]
assert dbdata.INITIAL_RUSH_SHIP_AVAILABLE.text()==webdata.marketingOffer.paymentDetail.rushShipping.@available[0],"Offer Code: "+legacyOfferCode+ ".paymentDetail - rushShipping  Invalid: Expected =" +dbdata.INITIAL_RUSH_SHIP_AVAILABLE.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.rushShipping.@available[0]
assert dbdata.INITIAL_2DAY_SHIP_AVAILABLE.text()==webdata.marketingOffer.paymentDetail.twoDayShipping.@available[0],"Offer Code: "+legacyOfferCode+ ".paymentDetail - twoDayShipping  Invalid: Expected =" +dbdata.INITIAL_2DAY_SHIP_AVAILABLE.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.twoDayShipping.@available[0]
assert dbdata.INITIAL_SDAY_SHIP_AVAILABLE.text()==webdata.marketingOffer.paymentDetail.sameDayShipping.@available[0],"Offer Code: "+legacyOfferCode+ ".paymentDetail - sameDayShipping  Invalid: Expected =" +dbdata.INITIAL_SDAY_SHIP_AVAILABLE.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.sameDayShipping.@available[0]

//assert  dbdata.WEB_CART_TITLE.text() == webdata.marketingOffer.web.cartTitle.text(),"Cart Title Invalid: Expected =" +dbdata.WEB_CART_TITLE.text() +"; Actual = " +webdata.marketingOffer.web.cartTitle.text()
//assert  dbdata.WEB_CART_TITLE.text()== webdata.marketingOffer.web.cartTitle.text(),"Offer Code: "+legacyOfferCode+ ". Cart title Invalid." +"Expected =" +dbdata.WEB_CART_TITLE.text() +" Actual = " +webdata.marketingOffer.web.cartTitle.text()
//log.info dbdata.WEB_CART_TITLE.text()
//log.info webdata.marketingOffer.web.cartTitle.text()
//assert  dbdata.WEB_CART_TITLE.text().contains(webdata.marketingOffer.web.cartTitle.text())


//log.info dbdata.WEB_CART_TITLE.text()
//log.info webdata.marketingOffer.web.cartTitle.text().replaceAll("Â","")
assert  dbdata.WEB_CART_MAX_QTY.text()== webdata.marketingOffer.web.maxQuantity.text(),"Offer Code: "+legacyOfferCode+ ".maxQuantity Invalid: Expected =" +dbdata.WEB_CART_MAX_QTY.text() +"; Actual = " +webdata.marketingOffer.web.maxQuantity.text()
//Cart lang validation removing CData
webcartlang= webdata.marketingOffer.web.cartLanguage.text().replaceAll( "&lt;!\\[CDATA\\[", "" ).replaceAll( "]]&gt;", "" )
dbcartlang =dbdata.CART_LANGUAGE.text()
//log.info webcartlang
//log.info dbcartlang
//assert webcartlang == dbcartlang


fsscode= dbdata.FFS_CODE.text()

if(fsscode =='EDS')
{
	//log.info 'inside HP'
	assert  dbdata.HP_KEY_CODE.text()== webdata.marketingOffer.hpData.hpKeycode.text(),"Offer Code: "+legacyOfferCode+ ".hpKeycode Invalid: Expected =" +dbdata.HP_KEY_CODE.text() +"; Actual = " +webdata.marketingOffer.hpData.hpKeycode.text()
	assert  dbdata.HP_PRODUCT_NUMBER.text()== webdata.marketingOffer.hpData.hpProductNumber.text(),"Offer Code: "+legacyOfferCode+ ".hpProductNumber Invalid: Expected =" +dbdata.HP_PRODUCT_NUMBER.text() +"; Actual = " + webdata.marketingOffer.hpData.hpProductNumber.text()
	assert  dbdata.HP_MPG_CODE.text()== webdata.marketingOffer.hpData.hpMpgCode.text(),"Offer Code: "+legacyOfferCode+ ".hpMpgCode Invalid: Expected =" +dbdata.HP_MPG_CODE.text() +"; Actual = " +webdata.marketingOffer.hpData.hpMpgCode.text()

}
else if(fsscode =='OMX')
{
	//log.info 'inside OMX'	
	assert  dbdata.OMX_CID.text()== webdata.marketingOffer.omxData.omxCID.text(),"Offer Code: "+legacyOfferCode+ ".maxQuantity Invalid: Expected =" +dbdata.OMX_CID.text() +"; Actual = " + webdata.marketingOffer.omxData.omxCID.text()
	assert  dbdata.OMX_KEYCODE.text()== webdata.marketingOffer.omxData.omxKeycode.text(),"Offer Code: "+legacyOfferCode+ ".maxQuantity Invalid: Expected =" +dbdata.OMX_KEYCODE.text() +"; Actual = " +webdata.marketingOffer.omxData.omxKeycode.text()
	assert  dbdata.OMX_PAYMENT_PLAN_ID.text()== webdata.marketingOffer.omxData.omxPaymentPlanID.text(),"Offer Code: "+legacyOfferCode+ ".maxQuantity Invalid: Expected =" +dbdata.OMX_PAYMENT_PLAN_ID.text() +"; Actual = " +webdata.marketingOffer.omxData.omxPaymentPlanID.text()
	assert  dbdata.OMX_SOC_CONFIGURATION_ID.text()== webdata.marketingOffer.omxData.omxStandingOrderConfigurationID.text(),"Offer Code: "+legacyOfferCode+ ".maxQuantity Invalid: Expected =" +dbdata.OMX_SOC_CONFIGURATION_ID.text() +"; Actual = " +webdata.marketingOffer.omxData.omxStandingOrderConfigurationID.text()
}

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="336a80ee-c850-4f74-b47b-263a52745815"><con:settings/><con:config><dataSourceStep>GetOffers</dataSourceStep><targetStep>VerifyOfferData</targetStep></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

 // Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\" + "OfferManagement-Search-TestData"+ ".xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>92672212-4e6f-4284-8ecd-dad7c72b00f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e82be0f-60e9-4770-9fb8-5d552583ff01</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d445ffc-ce00-4eef-85bd-48113eb65210</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a46109fd-58ca-4bb1-bb0a-c63328229029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f5fea96a-4870-4f7e-8cc9-136c4ec47785</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>190bc92a-5ee6-45f5-894e-6e7d4c3d5c99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e56be6ba-6d6c-4369-8875-566eba156434</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f3788faa-acc6-4181-9697-7f8b4453c3dc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01 - Validate Offer Info - OP Masking" searchProperties="true" id="afe0e896-1341-406f-9c1d-0f635bc7cc59" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [Web] located at [/soma-WS-ci/ws/rest/v1/snapshot/marketingoffer/B6FE33/web]</con:description><con:settings/><con:testStep type="groovy" name="SetUpInputFilePath" id="9bd06975-f662-4f1f-94de-3594cdfcf39d"><con:settings/><con:config><script>context.testDataLoadMOfferSearch

</script></con:config></con:testStep><con:testStep type="datasource" name="GetOffers" id="28286cc0-8226-4bf6-b0f4-0c5628cdeee2"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>${SetUpInputFilePath#result}</file><worksheet>specificiedoffersOp</worksheet><cell>A2</cell><ignoreEmpty>true</ignoreEmpty></con:configuration></con:dataSource><con:property>LegacyOfferCode</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="VerifyOfferData" id="bc501749-f5c0-4ae0-a36a-201918708ea1"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*

def sql = context.snp
def legacyOfferCode = context.expand( '${GetOffers#LegacyOfferCode}' )

def query = "Select count(*) as COUNT From vw_op_mkt_offers Where vw_op_mkt_offers.LEGACY_OFFER_CODE = '" + legacyOfferCode  +"'"
// Run query
def res = sql.rows(query)
// From DB get values for all components
def actualcount = res.get(0)["COUNT"]

context.actualcount = actualcount

if(actualcount == 1)
{
	log.info "Offer Code "+legacyOfferCode+ " Found"
	assert true
} else if (actualcount == 0)
{
	log.info "Offer Code "+legacyOfferCode+ " Does not exist in setup snapshot Database"
	assert false,"Offer Code "+legacyOfferCode+ " Does not exist in setup snapshot Database"
}

</script></con:config></con:testStep><con:testStep type="groovy" name="SkipValidationOnlyIfDataDoesNotExists" id="ef601999-8fdb-4131-9dce-738e51aca90c"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*

if(context.actualcount ==1)
 {
	testRunner.gotoStepByName("GetdbOffer")	
 }
 else
 {
 	testRunner.gotoStepByName("DataSource Loop")	
 }
</script></con:config></con:testStep><con:testStep type="jdbc" name="GetdbOffer" id="8c225eac-3769-4b70-b5fd-d2e3a0db9065"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName>setup snapshot</con:dbConnectionName><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/PASS_VALUE@guthsc9sl11.grc-network.net:1521:appdbci</con:connectionString><con:password>APPCSun445</con:password><con:query>Select INTENT, LEGACY_OFFER_CODE,
      PRODUCT_LINE_CODE, STATUS,
      READY_DATE, END_DATE,
      SOURCE_KEY_UID, SOURCE_KEY_CODE,
      PT_CODE, OFFER_PANEL_CODE,
      OFFER_CODE, ITEM_CODE,
      VENUE_CODE, SUPERVENUE_CODE,
      CURRENCY_CODE,
      trim(To_char(INITIAL_UNIT_PRICE, '99990.99')) As
      INITIAL_UNIT_PRICE, INITIAL_NUMBER_OF_PAYMENTS,
      trim(To_char(INITIAL_FIRST_PAYMENT_AMOUNT,
      '99990.99')) INITIAL_FIRST_PAYMENT_AMOUNT,
      trim(To_char(INITIAL_FIRST_SHIPPING_AMOUNT,'99990.99')) As INITIAL_FIRST_SHIPPING_AMOUNT,
      trim(To_char(INITIAL_STD_SHIPPING ,'99990.99'))INITIAL_STD_SHIPPING ,
      case INITIAL_STD_SHIP_AVAILABLE  when '1' then 'true' else 'false' end INITIAL_STD_SHIP_AVAILABLE,
      trim(To_char(INITIAL_RUSH_SHIPPING,'99990.99')) INITIAL_RUSH_SHIPPING,
      case INITIAL_RUSH_SHIP_AVAILABLE  when '1' then 'true' else 'false' end INITIAL_RUSH_SHIP_AVAILABLE,
      trim(To_char(INITIAL_2DAY_SHIPPING,'99990.99')) INITIAL_2DAY_SHIPPING,
      case INITIAL_2DAY_SHIP_AVAILABLE  when '1' then 'true' else 'false' end INITIAL_2DAY_SHIP_AVAILABLE,
      trim(To_char(INITIAL_SDAY_SHIPPING,'99990.99')) INITIAL_SDAY_SHIPPING,
      case INITIAL_SDay_SHIP_AVAILABLE  when '1' then 'true' else 'false' end INITIAL_SDay_SHIP_AVAILABLE,
      TENANT_ID,
      WEB_CART_TITLE, WEB_CART_MAX_QTY,
      CART_LANGUAGE, CORE_ITEM_FLAG,
      HOST_PRODUCT_LINE_CODE, FFS_CODE,
      HP_KEY_CODE,HP_PRODUCT_NUMBER,HP_MPG_CODE,
      OMX_CID,OMX_KEYCODE,OMX_PAYMENT_PLAN_ID,OMX_SOC_CONFIGURATION_ID,     
      case CORE_ITEM_FLAG  when '1' then 'true' else 'false' end CORE_ITEM_FLAG
    From vw_op_mkt_offers
     Where LEGACY_OFFER_CODE = '${GetOffers#LegacyOfferCode}'</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="GetwebOffer" id="ca14f9bb-148c-4ba3-b2d7-678e493a8102"><con:settings/><con:config service="SpecefiedOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffer/{LOC}/{mask}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetwebOffer" mediaType="application/json" id="270e38b5-bafd-4e36-a8e0-8e90cf407da4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-WS-ci/ws/rest/v1/snapshot/marketingoffer/B6FE33/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6770f712-9d4f-4ec0-83ee-f9629c013720" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MASK" value="op"/>
  <con:entry key="mask" value="op"/>
  <con:entry key="LOC" value="${GetOffers#LegacyOfferCode}"/>
</con:parameters><con:parameterOrder><con:entry>LOC</con:entry><con:entry>mask</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="assertionteststep" name="Assertion TestStep" id="0f61460d-c4c7-4af7-b416-1d211e197111"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>00b5b6ae-6664-4615-9629-3feee41b0d6c</con:id><con:isGroup>false</con:isGroup><con:sourceId>ca14f9bb-148c-4ba3-b2d7-678e493a8102</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="MessageContentAssertion" name="Message Content Assertion" id="d3dd31fb-6456-4c39-a998-f6a5a944bb16"><con:configuration xsi:type="con:MessageContentAssertion"><con:elements><con:xpath>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:productLineCode[1]</con:xpath><con:element>productLineCode</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>true</con:enabled><con:expectedValue>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/PRODUCT_LINE_CODE[1]}</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:elements><con:xpath>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:status[1]</con:xpath><con:element>status</con:element><con:type xsi:nil="true"/><con:operator>=</con:operator><con:enabled>false</con:enabled><con:expectedValue>A</con:expectedValue><con:hasValue>false</con:hasValue><con:numberType>false</con:numberType></con:elements><con:originalMessage><![CDATA[<snapshot mask="op" xmlns="http://ws.guthy-renker.com/soma/201407" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <currentAsOf>2015-03-11T22:51:34Z</currentAsOf>
   <marketingOffer xsi:type="wsMarketingOfferOP" entityId="ATGW4G">
      <intent>WEB</intent>
      <code>ATGW4G</code>
      <productLineCode>DT</productLineCode>
      <hostProductLineCode>DT</hostProductLineCode>
      <status name="Active">A</status>
      <readyDate>2014-09-25T00:00:00-04:00</readyDate>
      <liveDate>2014-10-09T00:00:00-04:00</liveDate>
      <endDate>2015-04-30T23:59:59-04:00</endDate>
      <derivation>
         <sourceKey-Ref entityId="36EUL" code="KDT214C36EUL" uri="/snapshot/sourcekey/36EUL"/>
         <promotionTemplateCode>PDTM3E</promotionTemplateCode>
         <offerPanelCode>HDT6N4P</offerPanelCode>
         <offerCode>ODTC94BK</offerCode>
         <itemCode>DT1039</itemCode>
      </derivation>
      <venue code="AM">
         <supervenue>2</supervenue>
      </venue>
      <paymentDetail currency="USD">
         <unitPrice>79.85</unitPrice>
         <numberPayments>1</numberPayments>
         <firstPaymentAmount>79.85</firstPaymentAmount>
         <firstShippingAmount>0.00</firstShippingAmount>
         <stdShipping available="true">0.00</stdShipping>
         <rushShipping available="false" xsi:nil="true"/>
         <twoDayShipping available="false" xsi:nil="true"/>
         <sameDayShipping available="false" xsi:nil="true"/>
      </paymentDetail>
      <web>
         <cartTitle xsi:nil="true"/>
         <maxQuantity xsi:nil="true"/>
         <coreItem>true</coreItem>
      </web>
      <fulfillment>
         <ffs>EDS</ffs>
         <multiNodeShippingLocation xsi:nil="true"/>
      </fulfillment>
      <hpData>
         <legacyScriptCode>ATGW</legacyScriptCode>
         <hpKeycode>262968</hpKeycode>
         <hpProductNumber>050682</hpProductNumber>
         <hpMpgCode>967</hpMpgCode>
      </hpData>
   </marketingOffer>
</snapshot>]]></con:originalMessage></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="restrequest" name="ValidteGetwebOffer" id="34863df4-5324-4c5c-89a7-12572e0b6949"><con:settings/><con:config service="SpecefiedOfferAPI" resourcePath="/soma-ws-ci/ws/rest/v1/snapshot/marketingoffer/{LOC}/{mask}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ValidteGetwebOffer" mediaType="application/json" id="270e38b5-bafd-4e36-a8e0-8e90cf407da4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:request/><con:originalUri>http://10.92.41.155/soma-WS-ci/ws/rest/v1/snapshot/marketingoffer/B6FE33/web</con:originalUri><con:assertion type="XPath Match" id="d002316e-fb86-4fd2-9cf4-afe4d101425c" name="Match content of [intent]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:intent[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INTENT[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="dca53495-d6cb-4f42-925e-7bff74e15305" name="Match content of [productLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:productLineCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/PRODUCT_LINE_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="71bb2433-368b-4663-92ff-72fe2329745c" name="Match content of [hostProductLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:hostProductLineCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/HOST_PRODUCT_LINE_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="8ca14a60-4a3b-495c-8454-72e88a2774e8" name="Match content of [status]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:status[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/STATUS[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="e99d38a2-c863-435d-892c-54334ab24220" name="Match content of [@entityId]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:sourceKey-Ref[1]/@entityId</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SOURCE_KEY_UID[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="02e59fad-d381-49cf-b2f6-878f84574261" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:sourceKey-Ref[1]/@code</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SOURCE_KEY_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="80da4ffd-a323-4ef2-b20b-23595b9fc185" name="Match content of [promotionTemplateCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:promotionTemplateCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/PT_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="2ae212e8-fc5d-4ab1-9384-35904b29e5e3" name="Match content of [offerPanelCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:offerPanelCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/OFFER_PANEL_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="55ed6f53-8d03-4bef-bd9d-867325479013" name="Match content of [offerCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:offerCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/OFFER_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="8581f44c-31f5-4a0d-a929-fe7da32b3747" name="Match content of [itemCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:derivation[1]/ns1:itemCode[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/ITEM_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9adc9804-88d4-46e8-b180-0be64c989faf" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:venue[1]/@code</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/VENUE_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="eebf3b28-7ee8-41c5-974a-6b6fa5f2f35c" name="Match content of [supervenue]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:venue[1]/ns1:supervenue[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/SUPERVENUE_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="ea229a6a-eb22-4463-8a08-fe8c5ac53df2" name="Match content of [@currency]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:paymentDetail[1]/@currency</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CURRENCY_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="58f47478-0d98-4135-acd7-71c9a53152a0" name="Match content of [unitPrice]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:paymentDetail[1]/ns1:unitPrice[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITIAL_UNIT_PRICE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="eda66f08-923f-4073-ad60-57a197491510" name="Match content of [numberPayments]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:paymentDetail[1]/ns1:numberPayments[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITIAL_NUMBER_OF_PAYMENTS[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="98417f94-5be5-4623-bfc4-87e81d2c826f" name="Match content of [firstPaymentAmount]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:paymentDetail[1]/ns1:firstPaymentAmount[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITIAL_FIRST_PAYMENT_AMOUNT[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="a76e8548-54bb-48c6-8199-5322c420cd54" name="Match content of [coreItem]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:web[1]/ns1:coreItem[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CORE_ITEM_FLAG[2]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="019ba54b-85b4-48bf-8ad4-bb70a2893a89" name="Match content of [ffs]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
//ns1:snapshot[1]/ns1:marketingOffer[1]/ns1:fulfillment[1]/ns1:ffs[1]/text()</path><content>${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/FFS_CODE[1]}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="0f04e7d8-0417-4490-993a-5c2483084223" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>rnalluri</con:username><con:password>Welcome1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MASK" value="op"/>
  <con:entry key="mask" value="op"/>
  <con:entry key="LOC" value="${GetOffers#LegacyOfferCode}"/>
</con:parameters><con:parameterOrder><con:entry>LOC</con:entry><con:entry>mask</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DataValidation" id="896e5386-2d2e-43b2-80e0-58d00f921597"><con:settings/><con:config><script>//def dbresponse = context.expand( '${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]}' )
def legacyOfferCode = context.expand( '${GetOffers#LegacyOfferCode}' )
def dbresponse = context.expand( '${GetdbOffer#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]}' )
def webresponse = context.expand( '${GetwebOffer#ResponseAsXml#declare namespace ns1=\'http://ws.guthy-renker.com/soma/201407\'; //ns1:snapshot[1] }' )
def dbdata = new XmlParser().parseText(dbresponse)
def webdata = new XmlParser().parseText(webresponse)
//log.info webdata.marketingOffer.web.cartTitle.text()
//log.info dbdata.WEB_CART_TITLE.text()
//assert  dbdata.WEB_CART_TITLE.text()== webdata.marketingOffer.web.cartTitle.text(),"Offer Code: "+legacyOfferCode+ ". Cart title Invalid." +"Expected =" +dbdata.WEB_CART_TITLE.text() +" Actual = " +webdata.marketingOffer.web.cartTitle.text()
assert  dbdata.WEB_CART_MAX_QTY.text()== webdata.marketingOffer.web.maxQuantity.text(),"Offer Code: "+legacyOfferCode+ ".maxQuantity Invalid: Expected =" +dbdata.WEB_CART_MAX_QTY.text() +"; Actual = " +webdata.marketingOffer.web.maxQuantity.text()
//All Shipping Fields validation
assert dbdata.INITIAL_UNIT_PRICE.text()==webdata.marketingOffer.paymentDetail.unitPrice.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - unitPrice Invalid: Expected =" +dbdata.INITIAL_UNIT_PRICE.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.unitPrice.text()
assert dbdata.INITIAL_NUMBER_OF_PAYMENTS.text()==webdata.marketingOffer.paymentDetail.numberPayments.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - numberPayments Invalid: Expected =" +dbdata.INITIAL_NUMBER_OF_PAYMENTS.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.numberPayments.text()
assert dbdata.INITIAL_FIRST_PAYMENT_AMOUNT.text()==webdata.marketingOffer.paymentDetail.firstPaymentAmount.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - firstPaymentAmount Invalid: Expected =" +dbdata.INITIAL_FIRST_PAYMENT_AMOUNT.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.firstPaymentAmount.text()

assert dbdata.INITIAL_FIRST_SHIPPING_AMOUNT.text()==webdata.marketingOffer.paymentDetail.firstShippingAmount.text()
//assert dbdata.INITIAL_STD_SHIPPING.text()==webdata.marketingOffer.paymentDetail.stdShipping.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - stdShipping  Invalid: Expected =" +dbdata.INITIAL_STD_SHIPPING.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.stdShipping.text()
//log.info webdata.marketingOffer.paymentDetail.rushShipping.@available[0]
if(webdata.marketingOffer.paymentDetail.rushShipping.@available[0] =='true')
{
	assert dbdata.INITIAL_RUSH_SHIPPING.text()==webdata.marketingOffer.paymentDetail.rushShipping.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - rushShipping  Invalid: Expected =" +dbdata.INITIAL_RUSH_SHIPPING.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.rushShipping.text()
}
if(webdata.marketingOffer.paymentDetail.twoDayShipping.@available[0] =='true')
{
	assert dbdata.INITIAL_2DAY_SHIPPING.text()==webdata.marketingOffer.paymentDetail.twoDayShipping.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - twoDayShipping  Invalid: Expected =" +dbdata.INITIAL_2DAY_SHIPPING.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.twoDayShipping.text()
}
if(webdata.marketingOffer.paymentDetail.sameDayShipping.@available[0] =='true')
{
	assert dbdata.INITIAL_SDAY_SHIPPING.text()==webdata.marketingOffer.paymentDetail.sameDayShipping.text(),"Offer Code: "+legacyOfferCode+ ".paymentDetail - sameDayShipping  Invalid: Expected =" +dbdata.INITIAL_SDAY_SHIPPING.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.sameDayShipping.text()
}
if(webdata.marketingOffer.paymentDetail.stdShipping.@available[0] =='true')
{
	assert dbdata.INITIAL_STD_SHIPPING.text()==webdata.marketingOffer.paymentDetail.stdShipping.text(),"Offer Code: "+legacyOfferCode+ ".Offer Code: "+legacyOfferCode+ ".paymentDetail - stdShipping  Invalid: Expected =" +dbdata.INITIAL_STD_SHIPPING.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.stdShipping.text()
}
//All Shippping available validation.
assert dbdata.INITIAL_STD_SHIP_AVAILABLE.text()==webdata.marketingOffer.paymentDetail.stdShipping.@available[0],"Offer Code: "+legacyOfferCode+ ".paymentDetail - stdShipping  Invalid: Expected =" +dbdata.INITIAL_STD_SHIP_AVAILABLE.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.stdShipping.@available[0]
assert dbdata.INITIAL_RUSH_SHIP_AVAILABLE.text()==webdata.marketingOffer.paymentDetail.rushShipping.@available[0],"Offer Code: "+legacyOfferCode+ ".paymentDetail - rushShipping  Invalid: Expected =" +dbdata.INITIAL_RUSH_SHIP_AVAILABLE.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.rushShipping.@available[0]
assert dbdata.INITIAL_2DAY_SHIP_AVAILABLE.text()==webdata.marketingOffer.paymentDetail.twoDayShipping.@available[0],"Offer Code: "+legacyOfferCode+ ".paymentDetail - twoDayShipping  Invalid: Expected =" +dbdata.INITIAL_2DAY_SHIP_AVAILABLE.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.twoDayShipping.@available[0]
assert dbdata.INITIAL_SDAY_SHIP_AVAILABLE.text()==webdata.marketingOffer.paymentDetail.sameDayShipping.@available[0],"Offer Code: "+legacyOfferCode+ ".paymentDetail - sameDayShipping  Invalid: Expected =" +dbdata.INITIAL_SDAY_SHIP_AVAILABLE.text() +"; Actual = " +webdata.marketingOffer.paymentDetail.sameDayShipping.@available[0]


fsscode= dbdata.FFS_CODE.text()

if(fsscode =='EDS')
{
	log.info 'inside HP'
	assert  dbdata.HP_KEY_CODE.text()== webdata.marketingOffer.hpData.hpKeycode.text(),"Offer Code: "+legacyOfferCode+ ".hpKeycode Invalid: Expected =" +dbdata.HP_KEY_CODE.text() +"; Actual = " +webdata.marketingOffer.hpData.hpKeycode.text()
	assert  dbdata.HP_PRODUCT_NUMBER.text()== webdata.marketingOffer.hpData.hpProductNumber.text(),"Offer Code: "+legacyOfferCode+ ".hpProductNumber Invalid: Expected =" +dbdata.HP_PRODUCT_NUMBER.text() +"; Actual = " + webdata.marketingOffer.hpData.hpProductNumber.text()
	assert  dbdata.HP_MPG_CODE.text()== webdata.marketingOffer.hpData.hpMpgCode.text(),"Offer Code: "+legacyOfferCode+ ".hpMpgCode Invalid: Expected =" +dbdata.HP_MPG_CODE.text() +"; Actual = " +webdata.marketingOffer.hpData.hpMpgCode.text()


}
else if(fsscode =='OMX')
{
	log.info 'inside OMX'	
	assert  dbdata.OMX_CID.text()== webdata.marketingOffer.omxData.omxCID.text(),"Offer Code: "+legacyOfferCode+ ".maxQuantity Invalid: Expected =" +dbdata.OMX_CID.text() +"; Actual = " + webdata.marketingOffer.omxData.omxCID.text()
	assert  dbdata.OMX_KEYCODE.text()== webdata.marketingOffer.omxData.omxKeycode.text(),"Offer Code: "+legacyOfferCode+ ".maxQuantity Invalid: Expected =" +dbdata.OMX_KEYCODE.text() +"; Actual = " +webdata.marketingOffer.omxData.omxKeycode.text()
	assert  dbdata.OMX_PAYMENT_PLAN_ID.text()== webdata.marketingOffer.omxData.omxPaymentPlanID.text(),"Offer Code: "+legacyOfferCode+ ".maxQuantity Invalid: Expected =" +dbdata.OMX_PAYMENT_PLAN_ID.text() +"; Actual = " +webdata.marketingOffer.omxData.omxPaymentPlanID.text()
	assert  dbdata.OMX_SOC_CONFIGURATION_ID.text()== webdata.marketingOffer.omxData.omxStandingOrderConfigurationID.text(),"Offer Code: "+legacyOfferCode+ ".maxQuantity Invalid: Expected =" +dbdata.OMX_SOC_CONFIGURATION_ID.text() +"; Actual = " +webdata.marketingOffer.omxData.omxStandingOrderConfigurationID.text()
}

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="7dee3b5b-25cc-433c-b751-604709f72600"><con:settings/><con:config><dataSourceStep>GetOffers</dataSourceStep><targetStep>VerifyOfferData</targetStep></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="fa294f02-dd46-4556-8686-bef76849971f" disabled="true"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Groovy"><con:configuration><script>

  SELECT * FROM
( SELECT 
LEGACY_OFFER_CODE as LegacyOfferCode
from vw_web_mkt_offers
--where LEGACY_OFFER_CODE='D6M73F'
ORDER BY dbms_random.value )
WHERE rownum &lt; 51</script></con:configuration></con:dataSource><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:setupScript>context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile().getAbsolutePath()

 // Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

context.testDataLoadMOfferSearch = sourcePath.toString() + "\\TestData\\" + "OfferManagement-Search-TestData"+ ".xls"
log.info "Test DATA File name ... "+context.testDataLoadMOfferSearch 







</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>92672212-4e6f-4284-8ecd-dad7c72b00f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e82be0f-60e9-4770-9fb8-5d552583ff01</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d445ffc-ce00-4eef-85bd-48113eb65210</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34863df4-5324-4c5c-89a7-12572e0b6949</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f61460d-c4c7-4af7-b416-1d211e197111</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bc501749-f5c0-4ae0-a36a-201918708ea1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ef601999-8fdb-4131-9dce-738e51aca90c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bd06975-f662-4f1f-94de-3594cdfcf39d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>28286cc0-8226-4bf6-b0f4-0c5628cdeee2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">${#Project#endpoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>endpoint</con:name><con:value>http://10.92.41.155:8380</con:value></con:property><con:property><con:name>path</con:name><con:value>soma-ws-ci</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-09-08T16:51:00</con:value></con:property><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>product</con:name><con:value>PA</con:value></con:property><con:property><con:name>ActiveEnv</con:name><con:value>CI</con:value></con:property><con:property><con:name>username</con:name></con:property><con:property><con:name>password</con:name></con:property></con:properties><con:afterLoadScript>import groovy.util.*
import java.io.File	// You need Java File utils

// Get projects active environment
log.info "Active Environment set to : "+ project.activeEnvironment.name 
def active_env = context.expand( '${#Project#ActiveEnv}')

// Set this as active environment
project.setActiveEnvironment(active_env)
log.info "Confirm Active Env name: " + project.activeEnvironment.name

// Get SoapUI Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//Get Project path
def project = com.eviware.soapui.model.support.ModelSupport.getModelItemProject(context.getModelItem())
def projectFilePath = project.getPath()
def parentPath = new File(projectFilePath).getParentFile()
def projectPath = parentPath.toString()
def sourcePath = new File(projectPath).getParentFile()


// Get Confg File Location
def confFile = sourcePath.toString() + "/Config/soapui.properties.groovy"
log.info "Config File Name is: " + confFile

// Find active environment and get the endpoint URL
def config = new ConfigSlurper().parse(new File(confFile).toURL())
def env = config.active_env
log.info " - Active Environment is: " + env
def endpoint = config.endpoints."$env".endpoint
def path = config.endpoints."$env".path

// Set project level property
project.setPropertyValue( "endpoint",endpoint.toString() )
project.setPropertyValue( "path",path.toString() )

def username = config.http_auth.username
def password = config.http_auth.password
log.info " - HTTP Authentication user name/password : " + username + " / "+ password
project.setPropertyValue( "username",username.toString() )
project.setPropertyValue( "password",password.toString() )
//def  projectPath = groovyUtils.projectPath
//log.info projectPath
//def tdPath = new File(projectPath).getParentFile().getAbsolutePath() + "\\TestData\\Offer Management - Search - Test Data.xls"
//log.info " [USER MSG] - Test Data Parh is: "+ tdPath
//def filepath = config.variables.testdatafilepath
//project.setPropertyValue( "filepath",tdPath )
//log.info tdPath

//def tdPathload = new File(projectPath).getParentFile().getAbsolutePath() + "\\TestData\\TS04-TC00 - LOAD DATA SEARCH.xls"
//project.setPropertyValue( "filepathloaddata",tdPathload )

TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
def afterValue=new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")
//log.info "After at load.."+afterValue 

// Set default values for 'filter' and 'after'
project.setPropertyValue( "after",afterValue.toString())
project.setPropertyValue( "filter","web" )
project.setPropertyValue( "product","PA" )

project.setPropertyValue( "s_after",afterValue.toString())

</con:afterLoadScript><con:wssContainer/><con:databaseConnectionContainer><con:databaseConnection><con:name>Setup</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUP/APPCAr35ex@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>c</con:password></con:databaseConnection><con:databaseConnection><con:name>Snp</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:x</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Base</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Procs</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection></con:databaseConnectionContainer><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:reportTemplates><con:name>Changed Offer Report</con:name><con:reportType>TESTSUITE</con:reportType><con:reportLevel>MAINREPORT</con:reportLevel><con:data><![CDATA[<jasperReport xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="ReportTemplate" language="groovy" pageWidth="595" pageHeight="842" columnWidth="555" leftMargin="20" rightMargin="20" topMargin="30" bottomMargin="30" xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <property name="ireport.encoding" value="UTF-8"/>
   <template>"../../styles.jrtx"</template>
   <!--FIELDS & PARAMS-->
   <title>
      <band height="70">
         <textField>
            <reportElement x="159" y="13" width="229" height="42"/>
            <textElement>
               <font size="26"/>
            </textElement>
            <textFieldExpression class="java.lang.String">$F{name} + " Report"</textFieldExpression>
         </textField>
      </band>
   </title>
   <pageHeader>
      <band/>
   </pageHeader>
   <detail>
      <band height="122">
         <!--SUBREPORTS UNDER HERE-->
         <subreport isUsingCache="true">
            <reportElement positionType="Float" isPrintRepeatedValues="false" x="0" y="0" width="500" height="30"/>
            <dataSourceExpression>$P{FailedTestSteps}</dataSourceExpression>
            <subreportExpression>"subreport:FailedTestStepsReport"</subreportExpression>
         </subreport>
         <subreport isUsingCache="true">
            <reportElement positionType="Float" isPrintRepeatedValues="false" x="0" y="0" width="500" height="30"/>
            <dataSourceExpression>$P{TestCaseCoverage}</dataSourceExpression>
            <subreportExpression>"subreport:TestCaseCoverageChart"</subreportExpression>
         </subreport>
         <subreport isUsingCache="true">
            <reportElement positionType="Float" isPrintRepeatedValues="false" x="0" y="0" width="500" height="30"/>
            <dataSourceExpression>$P{TestStepResults}</dataSourceExpression>
            <subreportExpression>"subreport:TestStepResultsReport"</subreportExpression>
         </subreport>
      </band>
   </detail>
</jasperReport>]]></con:data><con:subreports>FailedTestStepsReport</con:subreports><con:subreports>TestCaseCoverageChart</con:subreports><con:subreports>TestStepResultsReport</con:subreports><con:scope>PROJECT</con:scope></con:reportTemplates><con:reportTemplates>
  <con:name>Changed Offer Test Suite Report</con:name>
  <con:reportType>TESTSUITE</con:reportType>
  <con:reportLevel>SUBREPORT</con:reportLevel>
  <con:nameInReport>FailedTestSteps</con:nameInReport>
  <con:data xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<jasperReport xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="FailedTestSteps" language="groovy" pageWidth="535" pageHeight="842" whenNoDataType="AllSectionsNoDetail" columnWidth="535" leftMargin="0" rightMargin="0" topMargin="0" bottomMargin="0" xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <property name="ireport.encoding" value="UTF-8"/>
   <template>"../../styles.jrtx"</template>
   <parameter name="FlowLayout" class="java.lang.Boolean"/>
   <field name="testStepName" class="java.lang.String"/>
   <field name="messages" class="java.util.List"/>
   <field name="detail" class="java.lang.String"/>
   <field name="icon" class="java.lang.String"/>
   <detail>
      <band height="101">
         <break>
            <reportElement positionType="Float" x="0" y="1" width="100" height="1">
               <printWhenExpression>!$P{FlowLayout}</printWhenExpression>
            </reportElement>
         </break>
         <textField isStretchWithOverflow="true">
            <reportElement style="Code" x="1" y="73" width="535" height="27"/>
            <textElement/>
            <textFieldExpression class="java.lang.String">$F{detail}</textFieldExpression>
         </textField>
         <textField isStretchWithOverflow="true">
            <reportElement style="ColumnHeader" x="1" y="4" width="534" height="30" isRemoveLineWhenBlank="true"/>
            <box bottomPadding="0">
               <pen lineStyle="Double"/>
               <topPen lineStyle="Double"/>
               <leftPen lineStyle="Double"/>
               <bottomPen lineStyle="Double"/>
               <rightPen lineStyle="Double"/>
            </box>
            <textElement verticalAlignment="Middle"/>
            <textFieldExpression class="java.lang.String">"Failed TestStep: " + $F{testStepName}</textFieldExpression>
         </textField>
         <textField>
            <reportElement x="0" y="34" width="535" height="28"/>
            <textElement/>
            <textFieldExpression class="java.lang.String">$F{messages}</textFieldExpression>
         </textField>
         <line>
            <reportElement x="1" y="67" width="534" height="3"/>
         </line>
      </band>
   </detail>
</jasperReport>]]></con:data>
  <con:description>NO DESC</con:description>
  <con:scope>PROJECT</con:scope>
  <con:dataSource>ModelItem Properties</con:dataSource>
</con:reportTemplates><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/><con:environment name="CI"><con:service type="REST" name="ChangedOfferAPI"><con:endpoint username="" password="" domain="" proxyHost="" proxyPort="" proxyUsername="" proxyPassword="">${#Project#endpoint}</con:endpoint></con:service><con:service type="REST" name="SearchOfferAPI"><con:endpoint>${#Project#endpoint}</con:endpoint></con:service><con:service type="REST" name="SearchOfferAPI"><con:endpoint domain="" incomingWss="" outgoingWss="" password="" username="" wssTimeToLive="" wssType="">http://10.92.41.155:8380</con:endpoint></con:service><con:service type="REST" name="SpecefiedOfferAPI"><con:endpoint>${#Project#endpoint}</con:endpoint></con:service><con:property><con:name>endpoint</con:name><con:value>http://10.92.41.155:8380</con:value></con:property><con:property><con:name>path</con:name><con:value>soma-ws-ci</con:value></con:property><con:property><con:name>after</con:name><con:value>2015-04-14T23:04:13Z</con:value></con:property><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>product</con:name><con:value>PA</con:value></con:property><con:property><con:name>ActiveEnv</con:name><con:value>CI</con:value></con:property><con:property><con:name>username</con:name><con:value>rnalluri</con:value></con:property><con:property><con:name>password</con:name><con:value>Welcome1</con:value></con:property><con:property><con:name>afterUpdate</con:name><con:value>2015-04-08T20:28:44Z</con:value></con:property><con:property><con:name>s_after</con:name><con:value>2015-04-14T23:04:13Z</con:value></con:property><con:property><con:name>filepathloaddata</con:name><con:value>R:\Govardhan\Office\SOMA-API-TEST-WORKSPACE\Source\TestData\TS04-TC00 - LOAD DATA SEARCH.xls</con:value></con:property><con:databaseConnectionContainer><con:databaseConnection><con:name>Setup</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUP/APPCAr35ex@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password/></con:databaseConnection><con:databaseConnection><con:name>Snp</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/APPCSun445@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Base</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SetupCIbase/APPC53Bqwz@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Procs</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:setupciprocs/APPC53procs@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>y</con:password></con:databaseConnection></con:databaseConnectionContainer></con:environment><con:environment name="QA"><con:service type="REST" name="ChangedOfferAPI"><con:endpoint/></con:service><con:service type="REST" name="SearchOfferAPI"><con:endpoint/></con:service><con:service type="REST" name="SearchOfferAPI"><con:endpoint domain="" incomingWss="" outgoingWss="" password="" username="" wssTimeToLive="" wssType="">http://10.92.41.155:8380</con:endpoint></con:service><con:service type="REST" name="SpecefiedOfferAPI"><con:endpoint/></con:service><con:property><con:name>endpoint</con:name><con:value/></con:property><con:property><con:name>path</con:name><con:value/></con:property><con:property><con:name>after</con:name><con:value/></con:property><con:property><con:name>filter</con:name><con:value/></con:property><con:property><con:name>product</con:name><con:value/></con:property><con:property><con:name>ActiveEnv</con:name><con:value/></con:property><con:property><con:name>username</con:name><con:value/></con:property><con:property><con:name>password</con:name><con:value/></con:property><con:databaseConnectionContainer><con:databaseConnection><con:name>Setup</con:name><con:connectionString>jdbc:oracle:thin:SETUP/APPCAr35ex@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString></con:databaseConnection><con:databaseConnection><con:name>Snp</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:x</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Base</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Procs</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection></con:databaseConnectionContainer></con:environment></con:soapui-project>