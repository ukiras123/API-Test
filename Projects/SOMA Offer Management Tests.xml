<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e649b1a4-8605-44bd-966a-aa197a79d344" activeEnvironment="CI" name="P01 - SOMA Offer Management Automation" resourceRoot="" soapui-version="5.1.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="TS02 - Offer Level Tests"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="TS02-TC01 - VERIFY ALL LEGACY OFFERS"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="TestSuite Report"/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\test</con:setting></con:settings><con:interface xsi:type="con:RestService" id="c98b3855-d428-480c-858a-0a47cf31622d" wadlVersion="http://wadl.dev.java.net/2009/02" name="ChangedOfferAPI" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#endpoint}</con:endpoint></con:endpoints><con:resource name="Web" path="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" id="d80f7076-c4ff-455e-b2e4-c5531f76dc06"><con:settings/><con:parameters><con:parameter><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value><con:style>QUERY</con:style><con:default>2014-08-08T16:51:00</con:default><con:path xsi:nil="true"/><con:option>2014-08-08T16:51:00</con:option><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>filter</con:name><con:value>web</con:value><con:style>TEMPLATE</con:style><con:default>web</con:default></con:parameter><con:parameter><con:name>path</con:name><con:value>soma-ws-qa/ws/rest/v1/snapshot</con:value><con:style>TEMPLATE</con:style><con:default>soma-ws-qa/ws/rest/v1/snapshot</con:default></con:parameter></con:parameters><con:method name="Web" id="208eb527-463a-4278-af46-ffa878355044" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:snapshots</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403 500</con:status><con:params/><con:element xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:error</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:request><con:request name="ChangedOfferAPIReq2" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>svedala</con:username><con:password>SVgr2014</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="2014-09-01T16:51:00"/>
  <con:entry key="path" value="soma-ws-qa"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:inferredSchema><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<inf:schema xmlns:inf="http://www.eviware.com/soapui/InferredSchema"><inf:namespace>http://ws.guthy-renker.com/soma/201407</inf:namespace><inf:particle xsi:type="inf:ElementParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>snapshots</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:_snapshots</inf:reference></inf:type></inf:particle><inf:prefix key="http://www.w3.org/2001/XMLSchema" value="xs"/><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>web_tlmTollFreeNumber</inf:name><inf:content xsi:type="inf:EmptyContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>false</inf:completed></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>web_maxQuantity</inf:name><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>positiveInteger</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>paymentDetail_twoDayShipping</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>available</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>decimal</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_derivation</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>sourceKey-Ref</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:derivation_sourceKey-Ref</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>promotionTemplateCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>offerPanelCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>offerCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>itemCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="ns:promotionTemplateCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:offerPanelCode</inf:other><inf:other>ns:offerCode</inf:other><inf:other>ns:itemCode</inf:other></inf:comesBefore><inf:comesBefore qname="ns:offerPanelCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:offerCode</inf:other><inf:other>ns:itemCode</inf:other></inf:comesBefore><inf:comesBefore qname="ns:offerCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:itemCode</inf:other></inf:comesBefore><inf:comesBefore qname="ns:itemCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/><inf:comesBefore qname="ns:sourceKey-Ref" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:promotionTemplateCode</inf:other><inf:other>ns:offerPanelCode</inf:other><inf:other>ns:offerCode</inf:other><inf:other>ns:itemCode</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>paymentDetail_stdShipping</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>available</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>decimal</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_web</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>cartTitle</inf:name><inf:attribute key="nillable" value="true"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:web_cartTitle</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>cartLanguage</inf:name><inf:attribute key="nillable" value="true"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:web_cartLanguage</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>maxQuantity</inf:name><inf:attribute key="nillable" value="true"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:web_maxQuantity</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>coreItem</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>tlmTollFreeNumber</inf:name><inf:attribute key="nillable" value="true"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:web_tlmTollFreeNumber</inf:reference></inf:type></inf:particle><inf:comesBefore qname="ns:cartTitle" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:cartLanguage</inf:other><inf:other>ns:maxQuantity</inf:other><inf:other>ns:coreItem</inf:other><inf:other>ns:tlmTollFreeNumber</inf:other></inf:comesBefore><inf:comesBefore qname="ns:cartLanguage" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:maxQuantity</inf:other><inf:other>ns:coreItem</inf:other><inf:other>ns:tlmTollFreeNumber</inf:other></inf:comesBefore><inf:comesBefore qname="ns:maxQuantity" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:coreItem</inf:other><inf:other>ns:tlmTollFreeNumber</inf:other></inf:comesBefore><inf:comesBefore qname="ns:coreItem" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:tlmTollFreeNumber</inf:other></inf:comesBefore><inf:comesBefore qname="ns:tlmTollFreeNumber" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>paymentDetail_sameDayShipping</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>available</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>decimal</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>snapshots_marketingOffers</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>marketingOffer</inf:name><inf:attribute key="maxOccurs" value="10"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffers_marketingOffer</inf:reference></inf:type></inf:particle><inf:comesBefore qname="ns:marketingOffer" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_hpData</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>hpKeycode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>hpProductNumber</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>hpMpgCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="ns:hpMpgCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/><inf:comesBefore qname="ns:hpProductNumber" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:hpMpgCode</inf:other></inf:comesBefore><inf:comesBefore qname="ns:hpKeycode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:hpProductNumber</inf:other><inf:other>ns:hpMpgCode</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>_snapshots</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>query</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>mask</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>currentAsOf</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>dateTime</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>marketingOffers</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:snapshots_marketingOffers</inf:reference></inf:type></inf:particle><inf:comesBefore qname="ns:marketingOffers" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/><inf:comesBefore qname="ns:currentAsOf" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:marketingOffers</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_venue</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>code</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>supervenue</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="ns:supervenue" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>marketingOffer_status</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>name</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>string</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_paymentDetail</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>currency</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>unitPrice</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>decimal</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>numberPayments</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>nonNegativeInteger</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>firstPaymentAmount</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>decimal</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>stdShipping</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:paymentDetail_stdShipping</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>rushShipping</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:paymentDetail_rushShipping</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>twoDayShipping</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:paymentDetail_twoDayShipping</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>sameDayShipping</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:paymentDetail_sameDayShipping</inf:reference></inf:type></inf:particle><inf:comesBefore qname="ns:sameDayShipping" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/><inf:comesBefore qname="ns:rushShipping" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:twoDayShipping</inf:other><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore><inf:comesBefore qname="ns:twoDayShipping" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore><inf:comesBefore qname="ns:stdShipping" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:rushShipping</inf:other><inf:other>ns:twoDayShipping</inf:other><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore><inf:comesBefore qname="ns:firstPaymentAmount" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:stdShipping</inf:other><inf:other>ns:rushShipping</inf:other><inf:other>ns:twoDayShipping</inf:other><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore><inf:comesBefore qname="ns:unitPrice" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:numberPayments</inf:other><inf:other>ns:firstPaymentAmount</inf:other><inf:other>ns:stdShipping</inf:other><inf:other>ns:rushShipping</inf:other><inf:other>ns:twoDayShipping</inf:other><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore><inf:comesBefore qname="ns:numberPayments" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:firstPaymentAmount</inf:other><inf:other>ns:stdShipping</inf:other><inf:other>ns:rushShipping</inf:other><inf:other>ns:twoDayShipping</inf:other><inf:other>ns:sameDayShipping</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>derivation_sourceKey-Ref</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>entityId</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>code</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>uri</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:EmptyContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>web_cartLanguage</inf:name><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>string</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>web_cartTitle</inf:name><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>string</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>marketingOffer_fulfillment</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>ffs</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="ns:ffs" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>paymentDetail_rushShipping</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>available</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>decimal</inf:typeName></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>marketingOffers_marketingOffer</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>event</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>entityId</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>intent</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>code</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>productLineCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>hostProductLineCode</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>status</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_status</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>readyDate</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>dateTime</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>liveDate</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>dateTime</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>endDate</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>dateTime</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>derivation</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_derivation</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>venue</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_venue</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>secureCampaign</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>boolean</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>paymentDetail</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_paymentDetail</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>customerServicePhoneNumber</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>web</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_web</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>fulfillment</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_fulfillment</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>hpData</inf:name><inf:attribute key="minOccurs" value="0"/><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:ns="http://ws.guthy-renker.com/soma/201407">ns:marketingOffer_hpData</inf:reference></inf:type></inf:particle><inf:comesBefore qname="ns:readyDate" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:productLineCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:hostProductLineCode</inf:other><inf:other>ns:status</inf:other><inf:other>ns:readyDate</inf:other><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:status" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:readyDate</inf:other><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:hostProductLineCode" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:status</inf:other><inf:other>ns:readyDate</inf:other><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:fulfillment" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:paymentDetail" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:liveDate" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:code" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:productLineCode</inf:other><inf:other>ns:hostProductLineCode</inf:other><inf:other>ns:status</inf:other><inf:other>ns:readyDate</inf:other><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:hpData" xmlns:ns="http://ws.guthy-renker.com/soma/201407"/><inf:comesBefore qname="ns:endDate" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:web" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:intent" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:code</inf:other><inf:other>ns:productLineCode</inf:other><inf:other>ns:hostProductLineCode</inf:other><inf:other>ns:status</inf:other><inf:other>ns:readyDate</inf:other><inf:other>ns:liveDate</inf:other><inf:other>ns:endDate</inf:other><inf:other>ns:derivation</inf:other><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:venue" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:derivation" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:venue</inf:other><inf:other>ns:secureCampaign</inf:other><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:customerServicePhoneNumber" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore><inf:comesBefore qname="ns:secureCampaign" xmlns:ns="http://ws.guthy-renker.com/soma/201407"><inf:other>ns:paymentDetail</inf:other><inf:other>ns:customerServicePhoneNumber</inf:other><inf:other>ns:web</inf:other><inf:other>ns:fulfillment</inf:other><inf:other>ns:hpData</inf:other></inf:comesBefore></inf:content></inf:complexType></inf:schema>]]></con:inferredSchema></con:interface><con:testSuite id="a36d11ea-87e3-4fe4-bb4c-22f635aa2c3f" name="TS02 - Changed Offer Dynamic"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="090ab98f-0708-46ce-92ab-e6b80159a4eb" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC05 - REMOVE AND ADD OFFER TO HIERARCHY" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="2abf82fa-2a6f-4878-96d1-e5ce0a4691eb"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 
def ohCode = context.td.get (context.row,"OH_CODE")
log.info "OH CODE is: " + ohCode 
def offer = context.td.get (context.row,"Offer_Code")
log.info "offer is: " + offer 
def REM_SR_UP_DOWN_CODE = context.td.get (context.row,"REM_SR_UP_DOWN_CODE")
log.info "REM_SR_UP_DOWN_CODE is: " + REM_SR_UP_DOWN_CODE 
	
// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

def row = context.setup.rows('select count(*) from S_LINKED_COMPONENTS')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0] 


 // Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_WEB_MKT_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete Num Of Rows in Setup DB : " + row1.get(0)[0] 


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

//Remove Offer from OH
context.procs.call("{call remove_hierarchy_node(?,?)}", [ohCode, REM_SR_UP_DOWN_CODE] ) { result ->
log.info "Oracle Call 'remove_hierarchy_node' result is: " + result
		}
	

//Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="f53deb31-44d2-4020-a710-385eb7be57a5"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Iterator")
</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="7b9278f2-9c86-4999-884c-8acac06b72d0"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3af7896-9b96-436b-8831-6c8ecd2c035d" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response1" id="173f46c8-506c-429e-baf5-c10f0643c2d5" disabled="true"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Remove offer from Offer Hierarchy" id="fe57832d-ef1f-4f2e-be0d-6d40aae718e2" disabled="true"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>7b9278f2-9c86-4999-884c-8acac06b72d0</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.code.text().equals(context.td.get (context.row,"Legacy_Code")) }   //Z34B33
def legacyOffer = testOffers[0].code.text()

def actVal =  testOffers[0].'@event'.text()
def expVal = context.td.get (context.row,"Exp_Event")
log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"
assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"
//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Add offer to Offer Hierarchy" id="60f4b957-10bb-4cc4-ad79-8f70e0909a76" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 
def ohCode = context.td.get (context.row,"OH_CODE")
log.info "OH CODE is: " + ohCode 
def offer = context.td.get (context.row,"Offer_Code")
log.info "offer is: " + offer 
def REM_SR_UP_DOWN_CODE = context.td.get (context.row,"REM_SR_UP_DOWN_CODE")
log.info "REM_SR_UP_DOWN_CODE is: " + REM_SR_UP_DOWN_CODE 
	



//Add Offer to OH
//context.procs.call("{call remove_hierarchy_node(?,?)}", [ohCode, REM_SR_UP_DOWN_CODE] ) { result ->
//log.info "Oracle Call 'remove_hierarchy_node' result is: " + result
	//	}
	

//Trigger SnapShot database replication
//context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
		//	log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
	//	}</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq2" id="e2b562cc-8229-4cd1-8e1f-81a0ded6ebda" disabled="true"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq2" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3af7896-9b96-436b-8831-6c8ecd2c035d" name="Valid HTTP Status Codes"><con:configuration><codes>200
</codes></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response2" id="d60847f9-5d43-4192-b319-3ccdf774e799" disabled="true"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Add offer to Offer Hierarchy" id="39c5150a-40a1-4b0c-a471-77cd3c7a1a98" disabled="true"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>7b9278f2-9c86-4999-884c-8acac06b72d0</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.code.text().equals(context.td.get (context.row,"Legacy_Code")) }   //Z34B33
def legacyOffer = testOffers[0].code.text()

def actVal =  testOffers[0].'@event'.text()
def expVal = context.td.get (context.row,"Exp_Event")
log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"
assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"
//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="a9ad8efd-5b52-43fb-9cdb-e327f4cccb57" disabled="true"><con:settings/><con:config><script>// If you want to test "ALL" effected marketing offers, use below code. If you dont want to test ALL then block below code.
//if (context.xidx &lt; context.xtotal -1){
//	context.xidx ++;
//	testRunner.gotoStepByName("Verify INTENT")
//}</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="f6d3b421-7b59-45f0-a5ec-d7af6095c94e" disabled="true"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info " [USER MSG] - Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info " [USER MSG] - Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()
//context.sConn.close()
//context.snpConn.close()
DBConnection.closeConnection()
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f53deb31-44d2-4020-a710-385eb7be57a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b9278f2-9c86-4999-884c-8acac06b72d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>173f46c8-506c-429e-baf5-c10f0643c2d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe57832d-ef1f-4f2e-be0d-6d40aae718e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9ad8efd-5b52-43fb-9cdb-e327f4cccb57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6d3b421-7b59-45f0-a5ec-d7af6095c94e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2abf82fa-2a6f-4878-96d1-e5ce0a4691eb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>39c5150a-40a1-4b0c-a471-77cd3c7a1a98</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="43e6cef2-bc73-4319-aa43-7c6f0f657cb2" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC02 - VERIFY CARTS LANGUAGE TEXT" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>Description:
Verifies all elements of Carts language text.

Design:
1)	WEB_CART_TEXT mapping:
-	[DB]  WEB_CART_TEXT (vw_offer_items table) 
-	[UI]  Setup Application ==> Offer page ==> Web ==> Expand Item you want ==> Description text box.
-	[API] This element is substring of text present in"web/ cartLanguage " XML element.
2)	WEB_CART_TITLE mapping
-	[DB] WEB_CART_TITLE  (vw_offer_items table) 
-	[UI]  Setup Application ==> Offer page ==> Web ==> Expand Item you want ==> Title.
-	[API] web/cartTitle XML element
3)	Continuity Disclosure mapping
-	First check that CONT_DISCLOSURE_FLAG is enabled for the given offer. If not Continuity Disclosure Text won't show up in the API response
-	If CONT_DISCLOSURE_FLAG = 1 then following is the mapping.
o	[DB] select DISCLOSURE_TEXT from VW_CONT_DISCLOSURE_TEXT_API where OFFER_ID = --'100103663'--'100103576';
(select OFFER_ID from s_legacy_setup_vsd where OFFER_CODE = 'OPAC93GB' and rownum = 1)
o	[UI]  Setup Application ==> Offer page ==> Web ==> Expand Item you want ==> Continuity Disclosure.
o	[API] This element is substring of text present in"web/ cartLanguage " XML element 
			
4)	Product Line Footer mapping
-	[DB] select WEB_CART_TEXT_LEGAL_FOOTER from s_product_line_attributes where PRODUCT_LINE_CODE =substr( 'OPAC93GB',2,2);
-	[UI] ]  Setup Application ==> Offer page ==> Web ==> Expand Item you want ==> String underneath Description.
-	[API] This element is substring of text present in"web/ cartLanguage " XML element.

</con:description><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="f68668a6-fe68-40f1-bf35-fce0de88c407"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 
	
// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

//try {
   /// Thread.sleep(20000);                 //1000 milliseconds is one second.
//} catch(InterruptedException ex) {
 //   Thread.currentThread().interrupt();
//}


// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from S_LINKED_COMPONENTS')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_WEB_MKT_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete Num Of Rows in Setup DB : " + row1.get(0)[0] 


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="390b9d28-a289-4214-9a84-e93475a0982c"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="e9ca59ad-eaf8-4f70-991e-d97e2e33accb"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="6a6624bc-2b44-4725-8653-f968f9cbc7bc"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify cartTitle" id="4eeebafd-dfa1-43cc-bccb-65ad5a3a97a2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e9ca59ad-eaf8-4f70-991e-d97e2e33accb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Carts language text
def carts = testOffers[context.xidx].web.cartLanguage.text()
// Cart Title
def actVal = testOffers[context.xidx].web.cartTitle.text()

// Strip left characters
carts = carts.stripIndent(12)
// Strip Right characters
carts = carts[0..-8]
// Split the whole string into individual components
//def txts = cartText.split("&lt;/p>&lt;p>")

//def sql = context.base
//def query = "select WEB_CART_TITLE, WEB_CART_TEXT, WEB_CART_MAX_QTY from vw_offer_items where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

def sql = context.snp
def query = "select WEB_CART_TITLE from VW_WEB_MKT_OFFERS where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartTitle = res.get(0)["WEB_CART_TITLE"]

log.info "CART TITLE - EXPECTED = ${webCartTitle} -- ACTUAL = ${actVal}"
if (webCartTitle != null || webCartTitle != ""){
	assert actVal.contains(webCartTitle) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + webCartTitle + "' | ACTUAL - '" + actVal +"'"
}


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify maxQuantity" id="a72ca76f-6d85-4b85-a509-0a575fdb7efb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e9ca59ad-eaf8-4f70-991e-d97e2e33accb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()

def actVal = testOffers[context.xidx].web.maxQuantity.text()
// Strip left characters
carts = carts.stripIndent(12)
// Strip Right characters
carts = carts[0..-8]
// Split the whole string into individual components
//def txts = cartText.split("&lt;/p>&lt;p>")

def sql = context.snp
def query = "select WEB_CART_TITLE, WEB_CART_MAX_QTY from VW_WEB_MKT_OFFERS where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartTitle = res.get(0)["WEB_CART_TITLE"]
def maxQty = res.get(0)["WEB_CART_MAX_QTY"].toString()

log.info "MAX QUANTITY - [EXPECTED AND ACTUALS] - Expected = $maxQty | Actual = $actVal "
if (maxQty != null || maxQty != ""){
	assert actVal == maxQty : "[EXPECTED AND ACTUALS] - EXPECTED - '" + maxQty + "' | ACTUAL - '" + actVal +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Cart Language" id="bafb4422-3018-4989-a15e-71e8ae050ca0"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e9ca59ad-eaf8-4f70-991e-d97e2e33accb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()

// Strip left characters
carts = carts.stripIndent(9)
// Strip Right characters
carts = carts[0..-4]
// This is the actual value
def actVal = carts

def sql = context.snp
def query = "select CART_LANGUAGE from VW_WEB_MKT_OFFERS where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartText = res.get(0)["CART_LANGUAGE"]

log.info "CART LANGUAGE - EXPECTED - '" + webCartText?.asciiStream.text + "' | ACTUAL - '" + actVal +"'"

// Note: On 'Setup - Shopping Cart Info' you see 'Description' which maps to 'Setup DB' field 'WEB_CART_TEXT'  
if (webCartText?.asciiStream.text != null || webCartText?.asciiStream.text != ""){
	assert actVal.contains(webCartText?.asciiStream.text): "[EXPECTED AND ACTUALS] - EXPECTED - '" + webCartText?.asciiStream.text + "' | ACTUAL - '" + actVal +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Carts Language Footer" id="62121887-abfc-4a19-9a10-1ab3e34c3458" disabled="true"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e9ca59ad-eaf8-4f70-991e-d97e2e33accb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()

// Strip left characters
carts = carts.stripIndent(9)
// Strip Right characters
carts = carts[0..-8]
// Get sql connection
def sql = context.base

def query
query = 
	"select WEB_CART_TEXT_LEGAL_FOOTER from s_product_line_attributes where PRODUCT_LINE_CODE =substr( '"+ context.td.get (context.row,"Offer_Code")  +"',2,2)"
	
	// Run query
	def res = sql.rows(query)	
	// get Disclosure Text
	def footer = res.get(0)["WEB_CART_TEXT_LEGAL_FOOTER"]	

	log.info "Expected Footer..."+ footer 
	log.info "ACTUAL CART TEXT..."+carts
	
	
	if (footer != null || footer != ""){
		assert carts.contains(footer): "FOOTER TEXT :[EXPECTED AND ACTUALS] - EXPECTED - '" + footer + "' | ACTUAL - '" + carts +"'"
	}




</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Continuity Disclosure Text" id="04725136-a83f-4c35-b2a5-90f05b939e30" disabled="true"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e9ca59ad-eaf8-4f70-991e-d97e2e33accb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()
def actVal = carts

// Strip left characters
carts = carts.stripIndent(9)
// Strip Right characters
carts = carts[0..-8]
// Get sql connection
def sql = context.base

def query
// Check if 'Continuity' is enabled for the offer
//query = "select CONT_DISCLOSURE_FLAG from s_offers where offer_code = '"+ context.td.get (context.row,"Offer_Code") +"' and rownum = 1"
//def continuityFlag = sql.rows(query).get(0)["CONT_DISCLOSURE_FLAG"]
//log.info "continuityFlag..: "+ continuityFlag
//if (continuityFlag == 1){
	query = 
	"select DISCLOSURE_TEXT from VW_CONT_DISCLOSURE_TEXT_API where OFFER_ID = "+
	"(select OFFER_ID from s_legacy_setup_vsd where OFFER_CODE = '"+ context.td.get (context.row,"Offer_Code") +"' and rownum = 1)"	
	// Run query
	def res = sql.rows(query)	
	// get Disclosure Text
	def disclosureText = res.get(0)["DISCLOSURE_TEXT"]	
	log.info "DISCLOSURE TEXT ACTUAL: "+ actVal
	log.info "DISCLOSURE TEXT EXPECT: "+ disclosureText
	log.info "Continuity Disclosure - [EXPECTED AND ACTUALS] - EXPECTED - '" + disclosureText + "' | ACTUAL - '" + actVal +"'"
	if (disclosureText != null || disclosureText != ""){
		assert actVal.contains(disclosureText): "[EXPECTED AND ACTUALS] - EXPECTED - '" + disclosureText + "' | ACTUAL - '" + actVal +"'"
	}
//}




</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Whole Carts Language Text" id="28eed18c-f120-463b-8b64-b6c8767b1095" disabled="true"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e9ca59ad-eaf8-4f70-991e-d97e2e33accb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()
def actVal = carts

// Strip left characters
carts = carts.stripIndent(9)
// Strip Right characters
carts = carts[0..-4]
// Get sql connection
def sql = context.base

def query = "select CART_LANGUAGE from VW_WEB_MKT_OFFERS where OFFER_CODE = '"+ context.td.get (context.row,"Offer_Code") +"' and rownum = 1"

def expVal = sql.rows(query).get(0)["CART_LANGUAGE"].asciiStream.text
log.info "EXPECTED - " + expVal
log.info "ACTUAL - " + carts
if (expVal != null || expVal != ""){
		assert carts.contains(expVal): "[EXPECTED AND ACTUALS] - EXPECTED - '" + expVal + "' | ACTUAL - '" + carts +"'"
}





</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="f7a75a14-a9dc-4b50-b41f-1971720096b5"><con:settings/><con:config><script>/* Looping Code */
//log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount
if (context.xidx &lt; context.xtotal -1){
	context.xidx ++;
	testRunner.gotoStepByName("Verify cartTitle")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="ce2fec32-fbea-4fb3-9c52-719190849f70"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose

// If you want to test "ALL" effected marketing offers, use below code. If you dont want to test ALL then block below code.
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info " [USER MSG] - Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info " [USER MSG] - Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

def ssql = context.sConn
ssql.close()
def snpsql = context.snpConn
snpsql.close()

context.sConn = null
context.snpConn = null
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeebafd-dfa1-43cc-bccb-65ad5a3a97a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a72ca76f-6d85-4b85-a509-0a575fdb7efb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafb4422-3018-4989-a15e-71e8ae050ca0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62121887-abfc-4a19-9a10-1ab3e34c3458</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>04725136-a83f-4c35-b2a5-90f05b939e30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe57832d-ef1f-4f2e-be0d-6d40aae718e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>28eed18c-f120-463b-8b64-b6c8767b1095</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f68668a6-fe68-40f1-bf35-fce0de88c407</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="d1c21a99-ddf8-4006-9c25-b4d096e8d50a" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC07 - OVERRIDE CARTS LANGUAGE TEXT" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="20cb9044-4345-466c-8a3e-1cf5f4fe57b4"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="8ab8c6ae-1e5b-4433-b634-f1de6e691c16"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4ad97b65-adae-4580-a9e5-ffa346d10480" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="a0af8210-bae7-472b-b856-34b530ef76bf"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify cartTitle" id="fb1c901c-0136-4bbf-8aec-55b9cc0ccd1a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>8ab8c6ae-1e5b-4433-b634-f1de6e691c16</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Carts language text
def carts = testOffers[context.xidx].web.cartLanguage.text()
// Cart Title
def actVal = testOffers[context.xidx].web.cartTitle.text()
// Strip left characters
carts = carts.stripIndent(12)
// Strip Right characters
carts = carts[0..-8]
// Split the whole string into individual components
//def txts = cartText.split("&lt;/p>&lt;p>")

def sql = context.sConn
def query = "select WEB_CART_TITLE, WEB_CART_TEXT, WEB_CART_MAX_QTY from vw_offer_items where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartTitle = res.get(0)["WEB_CART_TITLE"]
def webCartText = res.get(0)["WEB_CART_TEXT"]
def maxQty = res.get(0)["WEB_CART_MAX_QTY"]

log.info " EXPECTED = ${webCartTitle} -- ACTUAL = ${actVal}"
if (webCartTitle != null || webCartTitle != ""){
	assert actVal.contains(webCartTitle) : "[EXPECTED AND ACTUALS] - EXPECTED - '" + webCartTitle + "' | ACTUAL - '" + actVal +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify maxQuantity" id="bb7b77a9-3184-4b4b-9c30-d7ca828114ee"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>8ab8c6ae-1e5b-4433-b634-f1de6e691c16</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()

def actVal = testOffers[context.xidx].web.maxQuantity.text()
// Strip left characters
carts = carts.stripIndent(12)
// Strip Right characters
carts = carts[0..-8]
// Split the whole string into individual components
//def txts = cartText.split("&lt;/p>&lt;p>")

def sql = context.sConn
def query = "select WEB_CART_TITLE, WEB_CART_TEXT, WEB_CART_MAX_QTY from vw_offer_items where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartTitle = res.get(0)["WEB_CART_TITLE"]
def webCartText = res.get(0)["WEB_CART_TEXT"]
def maxQty = res.get(0)["WEB_CART_MAX_QTY"].toString()

if (maxQty != null || maxQty != ""){
	assert actVal == maxQty : "[EXPECTED AND ACTUALS] - EXPECTED - '" + maxQty + "' | ACTUAL - '" + actVal +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Description Or Web Cart Text" id="2189bf82-cb82-49ab-959a-e78c7bed1f89"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>8ab8c6ae-1e5b-4433-b634-f1de6e691c16</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()

def actVal = carts
// Strip left characters
carts = carts.stripIndent(12)
// Strip Right characters
carts = carts[0..-8]
// Split the whole string into individual components
//def txts = cartText.split("&lt;/p>&lt;p>")

def sql = context.sConn
def query = "select WEB_CART_TITLE, WEB_CART_TEXT,CONT_OFFER_ITEM_TITLE, WEB_CART_MAX_QTY from vw_offer_items where OFFER_CODE = '" + context.td.get (context.row,"Offer_Code")+"'"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def webCartTitle = res.get(0)["WEB_CART_TITLE"]
def webCartText = res.get(0)["WEB_CART_TEXT"]
def maxQty = res.get(0)["WEB_CART_MAX_QTY"]

// Note: On 'Setup - Shopping Cart Info' you see 'Description' which maps to 'Setup DB' field 'WEB_CART_TEXT'  
if (webCartText != null || webCartText != ""){
	assert actVal.contains(webCartText): "[EXPECTED AND ACTUALS] - EXPECTED - '" + maxQty + "' | ACTUAL - '" + actVal +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Cintinuity Disclosure Text" id="1a00fb59-4c3c-4a3b-b5ae-a9d598e0f057"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>8ab8c6ae-1e5b-4433-b634-f1de6e691c16</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>//def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def carts = testOffers[context.xidx].web.cartLanguage.text()
def actVal = carts

// Strip left characters
carts = carts.stripIndent(12)
// Strip Right characters
carts = carts[0..-8]
// Split the whole string into individual components
//def txts = cartText.split("&lt;/p>&lt;p>")

def sql = context.sConn
def query = 
"select DISCLOSURE_TEXT from VW_CONT_DISCLOSURE_TEXT_API where OFFER_ID = "+
"(select OFFER_ID from s_legacy_setup_vsd where OFFER_CODE = '"+ context.td.get (context.row,"Offer_Code") +"' and rownum = 1)"

// Run query
def res = sql.rows(query)

// From DB get values for all components
def disclosureText = res.get(0)["DISCLOSURE_TEXT"]
log.info "DISC TEXT ACTUAL: "+ carts
log.info "DISC TEXT EXPECT: "+ disclosureText
log.info "Offer code input: " + context.td.get (context.row,"Offer_Code")
// Note: On 'Setup - Shopping Cart Info' you see 'Description' which maps to 'Setup DB' field 'WEB_CART_TEXT'  
if (disclosureText != null || disclosureText != ""){
	assert carts.contains(disclosureText): "[EXPECTED AND ACTUALS] - EXPECTED - '" + disclosureText + "' | ACTUAL - '" + carts +"'"
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="8c44d475-351b-4f5d-8531-464f532aac5c"><con:settings/><con:config><script>/* Looping Code */
//log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount
//if (context.xidx &lt; context.xtotal -1){
//	context.xidx ++;
//	testRunner.gotoStepByName("Verify cartTitle")
//}</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="b27d870c-d7fe-4854-8934-85db7cc46dd3"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose

// If you want to test "ALL" effected marketing offers, use below code. If you dont want to test ALL then block below code.
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;	// This is important to include
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
// import FrameworkLibs.*   // Un comment this if you dont want to use SoapUI's Script Library feature

// Instantiate Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

def ssql = DBConnection.getConnection(log, projectPath, "Setup")
context.sConn = ssql

def snpsql = DBConnection.getConnection(log, projectPath, "Setup_SnapShot")
context.snpConn = snpsql


def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info "Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " - Framework expectes any ONE of the following 'Test Data' files : "+ tdFileXLS + " (OR) "+ tdFileXLSX +" (OR) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only CSV file exists")	
}
// Only CSV exists
else if (!(new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info "- Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()
//context.sConn.close()
//context.snpConn.close()
DBConnection.closeConnection()
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>be7c1d69-6eba-4300-a2b9-9784379ea7a9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeebafd-dfa1-43cc-bccb-65ad5a3a97a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a72ca76f-6d85-4b85-a509-0a575fdb7efb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafb4422-3018-4989-a15e-71e8ae050ca0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62121887-abfc-4a19-9a10-1ab3e34c3458</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="e82ddbae-1fcd-4b1c-84e9-68c46f1e7f5d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC11 - VERIFY EVENT FOR UPDATED OFFER" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test script verifies correctness of "Event" description for a newly created Offer.

1) Initializes (refreshes) Setup database instance
2) Adds a new "offer" by calling "exec qa.add_sk" function which will copy specified legacy script code from "BASE" to "SETUP"
3) Calls Setup to  Snapshot replication trigger
4) Calls Changed Offer API
5) Verifies "Event" of the specified Offer_Code</con:description><con:settings/><con:testStep type="groovy" name="SetupTestData" id="4de3b006-2252-447a-9daa-111c594a8835"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 
	
// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

try {
    Thread.sleep(20000);                 //1000 milliseconds is one second.
} catch(InterruptedException ex) {
    Thread.currentThread().interrupt();
}

// Confirm database cleanup is complete
def row = context.setup.rows('select count(*) from s_offers')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0]  


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
			log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="408da999-6f96-4ea2-ac2d-52c0f4f96b43"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Data Src Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="2096c338-436d-4ceb-adea-3444a01aa9de"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a3053a1a-52b2-4dc8-b06d-acc8b1178d60" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="3f5b7cc5-497b-41f1-824c-17813f7bfbaa"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Event is set to Updated" id="a2c9ff7d-5b21-4759-ad4d-5a24371dec46"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2280f6fd-0475-4ee2-bc36-6387f7999265</con:id><con:isGroup>false</con:isGroup><con:sourceId>2096c338-436d-4ceb-adea-3444a01aa9de</con:sourceId><con:propertyName>ResponseAsXml</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="6168848c-7495-4c16-aa63-cf3396d16d7c"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

def testOffers =  allMarketOffers.marketingOffer.findAll{ it.code.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def legacyOffer = testOffers[0].code.text()

log.info "legacyOffer...." + legacyOffer

def actVal =  testOffers[0].'@event'.text()
def expVal = context.td.get (context.row,"Exp_Event")

log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"

assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"


//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="6fbc0a86-e62d-4f51-b124-84fbe9416a0b"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;	// This is important to include
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
// import FrameworkLibs.*   // Un comment this if you dont want to use SoapUI's Script Library feature

// Instantiate Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")
		
// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString());
		
def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info "Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " - Framework expectes any ONE of the following 'Test Data' files : "+ tdFileXLS + " (OR) "+ tdFileXLSX +" (OR) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only CSV file exists")	
}
// Only CSV exists
else if (!(new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info "- Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()


/* 
 *  Closing Connections in following ways WONT work. 
 *  Probably these local connection objects wont appear to "DBConnection" as that's in different domain. 
*/
//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cc6cd89c-3098-4ba3-aded-c2ea890e80e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05396d18-a02e-4daa-b9eb-6f17d4665723</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="1834b988-e70e-408e-b124-ba5eebe2e13f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC09 - ADD REMOVE CHANGE ASH CODE" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="be1565ce-ab20-4102-89c9-3af4f2f67c0e"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="3bc34b75-b89e-4821-9148-0ca75b114a9f"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>svedala</con:username><con:password>SVgr2014</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="4e3c9eb1-4eb6-49be-917e-d49633b4653c"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify intent" id="58352eb1-f041-4fe2-b16b-9c72907652ca"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

/* Obtain the 'marketing offer' that is associated with the supplied 'offer code' */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INTENT from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'intent' from the parsed response
def actVal =  testOffers[context.xidx].intent.text()

// Get expected 'intent' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INTENT"]

log.info " [EXPECTED | ACTUAL] - [Element: intent] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal - Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify productLineCode" id="d08ce412-9f73-4b3e-9cec-609990b50c41"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code'
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select PRODUCT_LINE_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'productLineCode' from the parsed response
def actVal =  testOffers[context.xidx].productLineCode.text()

// Get expected 'productLineCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["PRODUCT_LINE_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: productLineCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify promotionTemplateCode" id="57abab65-9737-43e7-b969-6f3d7619a781"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select PT_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'promotionTemplateCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.promotionTemplateCode.text()

// Get expected 'promotionTemplateCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["PT_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: promotionTemplateCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify offerPanelCode" id="19035412-82e6-4f74-8642-a40b5416a149"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select OFFER_PANEL_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'offerPanelCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.offerPanelCode.text()

// Get expected 'offerPanelCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["OFFER_PANEL_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: offerPanelCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify itemCode" id="908922cb-1ac1-459c-812c-2e3faec67686"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select ITEM_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'itemCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.itemCode.text()

// Get expected 'itemCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["ITEM_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: itemCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify supervenue Code" id="6ca87068-94e2-4d0d-82b0-c9093173c841"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select SUPERVENUE_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'supervenue' from the parsed response
def actVal =  testOffers[context.xidx].venue.supervenue.text()

// Get expected 'supervenue' value from Snapshot DB
def expVal = sql.rows(query).get(0)["SUPERVENUE_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: supervenue] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify secureCampaign Flag" id="a0206f28-4c20-4090-b540-283704a8e06c"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select SECURE_CAMPAIGN_FLAG from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'secureCampaign' from the parsed response
def actVal =  testOffers[context.xidx].secureCampaign.text()

// Get expected 'secureCampaign' value from Snapshot DB
def expVal = sql.rows(query).get(0)["SECURE_CAMPAIGN_FLAG"]
expVal = (expVal == "0" )? "false" : "true"

log.info " [EXPECTED | ACTUAL] - [Element: secureCampaign] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify unitPrice" id="69343f8f-7034-429f-a4fe-2db4ed8eccf8"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_UNIT_PRICE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'unitPrice' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.unitPrice.text()

// Get expected 'unitPrice' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_UNIT_PRICE"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: unitPrice] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify numberPayments" id="df0868cc-e576-4041-8e0a-abc5a230a3c6"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_NUMBER_OF_PAYMENTS from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'numberPayments' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.numberPayments.text()

// Get expected 'numberPayments' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_NUMBER_OF_PAYMENTS"]
expVal = String.valueOf(expVal)

log.info " [EXPECTED | ACTUAL] - [Element: numberPayments] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Intial stdShipping" id="5a8eb044-7a3c-4cb1-80f2-f5c5e27127be"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_STD_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'stdShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.stdShipping.text()

// Get expected 'stdShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_STD_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: stdShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify rushShipping" id="a9a15a72-01b0-4c1d-9618-553fbfd994d4"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_RUSH_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'rushShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.rushShipping.text()

// Get expected 'rushShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_RUSH_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: rushShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify initial twoDayShipping" id="1b9b122f-ee31-438b-a029-13f986356571"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>3bc34b75-b89e-4821-9148-0ca75b114a9f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_2DAY_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'twoDayShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.twoDayShipping.text()

// Get expected 'twoDayShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_2DAY_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: twoDayShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="a534f7a9-a052-4bd2-8569-110e04765460"><con:settings/><con:config><script>/* Looping Code */
//log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount
if (context.xidx &lt; context.xtotal -1){
	context.xidx ++;
	testRunner.gotoStepByName("Verify INTENT")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="dce94000-d896-4467-88fd-eeb169336deb"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;	// This is important to include
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
// import FrameworkLibs.*   // Un comment this if you dont want to use SoapUI's Script Library feature

// Instantiate Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

def ssql = DBConnection.getConnection(log, projectPath, "Setup")
context.sConn = ssql

def snpsql = DBConnection.getConnection(log, projectPath, "Setup_SnapShot")
context.snpConn = snpsql


def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info "Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " - Framework expectes any ONE of the following 'Test Data' files : "+ tdFileXLS + " (OR) "+ tdFileXLSX +" (OR) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only CSV file exists")	
}
// Only CSV exists
else if (!(new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info "- Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()
//context.sConn.close()
//context.snpConn.close()
DBConnection.closeConnection()
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="3d5f6355-4bef-4767-b3f1-adc167f4977c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS02-TC10 - VERIFY EVENT FOR NEW OFFER" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test script verifies correctness of "Event" description for a newly created Offer.

1) Initializes (refreshes) Setup database instance
2) Adds a new "offer" by calling "exec qa.add_sk" function which will copy specified legacy script code from "BASE" to "SETUP"
3) Calls Setup to  Snapshot replication trigger
4) Calls Changed Offer API
5) Verifies "Event" of the specified Offer_Code</con:description><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="cc6cd89c-3098-4ba3-aded-c2ea890e80e6"><con:settings/><con:config><script>// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 

// Initialize “Setup” Schema
try{
context.procs.call("{call qa.initialize_setup}") 
}
catch (Exception e){
log.error "Framework thrown error - "+e.getMessage()	
}

try {
    Thread.sleep(20000);                 //1000 milliseconds is one second.
} catch(InterruptedException ex) {
    Thread.currentThread().interrupt();
}

// Confirm database cleanup is complete
def row = context.setup.rows('select count(*) from s_offers')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Copy desired Offer from Base to Setup
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
			log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="6bd3e1bb-80a6-4902-98c8-8e23ae404030"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Data Src Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="ba5074f5-0c90-47c9-a496-0a47a30e6da3"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="4c279dc8-f686-4509-8e54-0bfa1e78502a"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Event is set to New" id="05396d18-a02e-4daa-b9eb-6f17d4665723"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2280f6fd-0475-4ee2-bc36-6387f7999265</con:id><con:isGroup>false</con:isGroup><con:sourceId>ba5074f5-0c90-47c9-a496-0a47a30e6da3</con:sourceId><con:propertyName>ResponseAsXml</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="6168848c-7495-4c16-aa63-cf3396d16d7c"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

def testOffers =  allMarketOffers.marketingOffer.findAll{ it.code.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

def legacyOffer = testOffers[0].code.text()

def actVal =  testOffers[0].'@event'.text()
def expVal = context.td.get (context.row,"Exp_Event")

log.info "[EXP ACTUAL VALUES] - Expected = $expVal | Actual = $actVal"

assert actVal.toUpperCase() == expVal.toUpperCase() : "Expected = $expVal | Actual = $actVal"


//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="45728847-01ee-44f7-87f3-5cda42963bc7"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info " [USER MSG] - Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info " [USER MSG] - Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

context.setup.close()
context.snp.close()
context.base.close()
context.procs.close()


/* 
 *  Closing Connections in following ways WONT work. 
 *  Probably these local connection objects wont appear to "DBConnection" as that's in different domain. 
*/
//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cc6cd89c-3098-4ba3-aded-c2ea890e80e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05396d18-a02e-4daa-b9eb-6f17d4665723</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:setupScript/><con:reportParameters/></con:testSuite><con:testSuite id="e92de52c-c505-4f1c-b375-4da7b803f5d5" name="TS03 - Changed Offer - General"><con:description> </con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\test</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase id="23088b4e-31ab-4ee1-a126-72b15fe2d955" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC00 - LOAD DATA" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>Description:
Load Data into Setup Snapshot</con:description><con:settings/><con:testStep type="groovy" name="Setup Test Data" id="3d8911de-7d3f-4168-b76e-a6d30012d58d"><con:settings/><con:config><script>import groovy.sql.Sql
import java.text.SimpleDateFormat

// Get test data from data source
def oldScriptCode = context.td.get (context.row,"OLD_SCRIPT_CODE")
log.info "Old script code is: " + oldScriptCode 
def label = context.td.get (context.row,"LABEL")
log.info "Label is: " + label 

// Initialize Setup Database
context.procs.call("{call qa.initialize_setup}") 

// Confirm Setup database cleanup is complete
def row = context.setup.rows('select count(*) from S_LINKED_COMPONENTS')
log.info "Confirming Setup database is reset. Num Of Rows in Setup DB : " + row.get(0)[0]  

// Initialize SetupSnapshot Database
context.procs.call("{call qa.initialize_setupsnapshot}") 

// Confirm SetupSnapshot Data Base cleanup is complete
def row1 = context.snp.rows('select count(*) from VW_WEB_MKT_OFFERS')
log.info "Confirm SetupSnapshot cleanup is complete Num Of Rows in Setup DB : " + row1.get(0)[0] 


// Second, copy the offer updated in the previous step to Setup DB.
context.procs.call("{call qa.add_sk(?,?)}", [oldScriptCode, label] ) { result ->
log.info "Oracle SP Call 'qa.add_sk()' result is: " + result
		}

// Trigger SnapShot database replication
context.procs.call("{call setupsnapshot.k_get_snapshot.p_full_run(?)}", [1] ) { result ->
			log.info "Oracle SP Call 'setupsnapshot.k_get_snapshot.p_full_run()' result is: " + result
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Set API Request Properties" id="da610e46-d6ee-4426-8c55-cfb078b5244e"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Iterator")

	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="30759a2c-d9de-4e88-b36f-58739cb9019f"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7e6ad02b-76a9-4bdd-9206-94fd4ac3ca90" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="f5bd66b4-f918-49e0-b37f-5fcc8aa4f310"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose

// If you want to test "ALL" effected marketing offers, use below code. If you dont want to test ALL then block below code.
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info " [USER MSG] - Test Data Path is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info " [USER MSG] - Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

def ssql = context.sConn
ssql.close()
def snpsql = context.snpConn
snpsql.close()

context.sConn = null
context.snpConn = null
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeebafd-dfa1-43cc-bccb-65ad5a3a97a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a72ca76f-6d85-4b85-a509-0a575fdb7efb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafb4422-3018-4989-a15e-71e8ae050ca0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62121887-abfc-4a19-9a10-1ab3e34c3458</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>04725136-a83f-4c35-b2a5-90f05b939e30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe57832d-ef1f-4f2e-be0d-6d40aae718e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>28eed18c-f120-463b-8b64-b6c8767b1095</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f68668a6-fe68-40f1-bf35-fce0de88c407</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="9f9b8be2-a493-4ac1-9866-9e1ba2330054" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC01 - STANDARDS VALIDATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="1c47b8a1-e1df-46ff-856e-08be16312ad7"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Data Src Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="6e387731-f2c1-411e-8c58-e302b753775e"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="AutoInferSchemas">false</con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d218afd4-cc56-4350-b682-3ce8bfde464f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="b59eccf0-8988-48ec-abc4-56d28a36fa2a"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )

//put reposne in contex
context.setProperty("xmlResponse", response)

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response) 

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

//to get name space
def nsRoot = new XmlParser(false, false).parseText(response)

// set name space in contect
context.setProperty("grNameSpace", nsRoot.@'xmlns')

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

// Now get all 'marketingOffers' nodes
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Name Space" id="722e5577-0831-4b78-b54a-00c0df26d6c9"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>6e387731-f2c1-411e-8c58-e302b753775e</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// SRAVAN - THIS IS NOT DONE
// None of Slurper, Xpath, XQuery was able to gove 'Name Space' content.
// Will have to research on this.

def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

def actVal = context.grNameSpace

def expVal ='http://ws.guthy-renker.com/soma/201407'

log.info " [EXPECTED | ACTUAL] - [Element: NameSPace]  - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify ISO 4217 Currency" id="a0e4aece-16fe-4db1-ab63-5cbfd07f283b"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>6e387731-f2c1-411e-8c58-e302b753775e</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

def offerCode = context.td.get (context.row,"Offer_Code")

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(offerCode) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

// Get actual 'paymentDetail.currency' from the parsed response
def actVal = testOffers[context.xidx].paymentDetail.@currency 

def query = "select CURRENCY_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get expected 'paymentDetail.currency' value from Snapshot DB
def expVal = sql.rows(query).get(0)["CURRENCY_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: paymentDetail.currency] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"
assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Current As Of is in UTC" id="6ed428b9-f359-41a4-a48b-7e166df08b69"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>6e387731-f2c1-411e-8c58-e302b753775e</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code'
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(offerCode) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

// Get actual 'currentAsOf' from the parsed response
def actVal = root.currentAsOf.text()

// Define expected value
def expVal = "Z"

log.info " [EXPECTED | ACTUAL] - [Element: currentAsOf] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal.endsWith('Z'): "Expected = Z | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Default Response Content Type" id="c833d237-4f0d-4700-975d-3c9f4539c337"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>6e387731-f2c1-411e-8c58-e302b753775e</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// To validate API response headers
// def val = testRunner.testCase.testSteps['Web - ChangedOfferAPIReq1'].testRequest.response.getResponseHeaders()["Content-Type"][0]
def expVal =  messageExchange.modelItem.testCase.testSteps['Web - ChangedOfferAPIReq1'].testRequest.response.getResponseHeaders()["Content-Type"][0]
def actVal = "application/xml"
log.info " [EXPECTED | ACTUAL] - [Default Content Type] - [Expected = $expVal | Actual = $actVal ]"
assert expVal == actVal : "Default Content Type Not Valid"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="0e2a9102-3660-4a97-90c9-907585887c46"><con:settings/><con:config><script>// If you want to test "ALL" effected marketing offers, use below code. If you dont want to test ALL then block below code.
//if (context.xidx &lt; context.xtotal -1){
//	context.xidx ++;
//	testRunner.gotoStepByName("Verify INTENT")
//}</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="6b87adfe-d767-42b2-be1f-16147c4d7d40"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;	// This is important to include
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
//import FrameworkLibs.*   // Un comment this if you dont want to use SoapUI's Script Library feature
import SoapUIDBLib.*

// Instantiate Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString());
 
def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info "Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " - Framework expectes any ONE of the following 'Test Data' files : "+ tdFileXLS + " (OR) "+ tdFileXLSX +" (OR) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only CSV file exists")	
}
// Only CSV exists
else if (!(new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info "- Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null



context.sConn.close()
context.snpConn.close()
context.base.close()
context.procs.close()

//context.db = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7602166f-822e-4638-8529-1123ae45bf25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480e23a3-4b9b-4b0a-955b-c4dcee367029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0add6e9c-e26f-4eea-8157-89ef1f4a44b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c833d237-4f0d-4700-975d-3c9f4539c337</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="3d16c925-6044-4fa1-90c8-b938f407954d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC02 - NEGATIVE TESTS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test script is intended to verify error messages and HTTP error codes when an invalid date paraemeter is passed to Changed Offer API.

This script verifies following:
1) Error message and HTTP code when an invalid date is passed.
2) Error message and HTTP code when a too-old date is passed.
3) Error message and HTTP code when a future date is passed.</con:description><con:settings/><con:testStep type="groovy" name="Set Invalid Date Parameter" id="f42e54b7-694c-4178-a6df-630f2d590dcc"><con:settings/><con:config><script>def found = false
for (context.row; context.row &lt; context.rowCount; context.row++){

	if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
				if (context.td.get(context.row, "Type") ==  "INVALID_DATE"){
					found = true
					log.info "Props step : " + context.td.get(context.row, "Filter")
					testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
					
					log.info "Props step : " + context.td.get(context.row, "After")
					testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
			}
	}
}
if (! found)
	testRunner.gotoStepByName("Iterator")
</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="b3d88d8f-a051-4f28-846c-6badb264f13c"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b694b057-2fb8-47ed-a9a4-bf66773f823e" name="Expected HTTP Error Status Codes"><con:configuration><codes>400,404,500</codes></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Invalid Date error message" id="e63f8e66-4a0e-417d-9da0-44dfedcbc21c"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>cc211874-dfb5-4de1-a98b-2c032321e740</con:id><con:isGroup>false</con:isGroup><con:sourceId>b3d88d8f-a051-4f28-846c-6badb264f13c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f1502ad8-7918-41e2-bcfe-11ea955e45fc"><con:configuration><scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Obtain holder for the rsponse
def holder = groovyUtils.getXmlHolder( "Web - ChangedOfferAPIReq1#Response" )

// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"

// Get the actual message
def actVal = holder.getNodeValue("ns1:error/ns1:message")

assert actVal.equals ("The query string is missing or improperly composed, or the timestamp is improperly formatted.")
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Set Too Old Date Parameter" id="60036c22-cef8-41a3-8013-f292cced9802"><con:settings/><con:config><script>def found = false
context.row = 1
for (; context.row &lt; context.rowCount; context.row++){

	if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
				if (context.td.get(context.row, "Type") ==  "OLDER_DATE"){
					found = true
					log.info "Props step : " + context.td.get(context.row, "Filter")
					testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
					
					log.info "Props step : " + context.td.get(context.row, "After")
					testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
			}
	}
}
if (! found)
	testRunner.gotoStepByName("Set Future Date Parameter")
else
	log.info "OLDER DATE RUN started."	
</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq2" id="ab9ca7f0-ecfd-43cc-a689-6e46aa7c6113"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq2" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b99bacd0-83e3-4b57-8f62-ad3ec5a032e4" name="Expected HTTP Error Status Codes"><con:configuration><codes>400,404,500</codes></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Too Old Date error message" id="d61cdf79-615e-4c76-9fe9-b5b4f1dc08c1"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>cc211874-dfb5-4de1-a98b-2c032321e740</con:id><con:isGroup>false</con:isGroup><con:sourceId>b3d88d8f-a051-4f28-846c-6badb264f13c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f1502ad8-7918-41e2-bcfe-11ea955e45fc"><con:configuration><scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Obtain holder for the rsponse
def holder = groovyUtils.getXmlHolder( "Web - ChangedOfferAPIReq2#Response" )

// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"

// Get the actual message
def actVal = holder.getNodeValue("ns1:error/ns1:message")


assert actVal.equals ("The timestamp is further in the past than is maintained by the change records (currently 60 days).")
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Set Future Date Parameter" id="2f66f591-3b96-4ae6-aeff-9e313e7e6843"><con:settings/><con:config><script>def found = false
context.row = 1
for (; context.row &lt; context.rowCount; context.row++){

	if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
				if (context.td.get(context.row, "Type") ==  "FUTURE_DATE"){
					found = true
					log.info "Props step : " + context.td.get(context.row, "Filter")
					testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
					
					log.info "Props step : " + context.td.get(context.row, "After")
					testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
			}
	}
}
if (! found)
	testRunner.gotoStepByName("Log Error Messages")
else
	log.info "FUTURE DATE RUN started."	
</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - Changed Offer API Future Date Reqest" id="94cb0460-e1c9-46a5-86ff-61a9177ad082"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - Changed Offer API Future Date Reqest" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify API response for Future Date" id="744ab92a-5e71-4135-a6ef-258061061a1f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>cc211874-dfb5-4de1-a98b-2c032321e740</con:id><con:isGroup>false</con:isGroup><con:sourceId>94cb0460-e1c9-46a5-86ff-61a9177ad082</con:sourceId><con:propertyName>ResponseAsXml</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f1502ad8-7918-41e2-bcfe-11ea955e45fc"><con:configuration><scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Obtain holder for the rsponse
def holder = groovyUtils.getXmlHolder( "Web - Changed Offer API Future Date Reqest#Response" )

// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"

// Get count of 'marketingOffer' nodes under 'marketingOffers' node.
def actVal = holder["count(//ns1:snapshots//ns1:marketingOffers/ns1:marketingOffer)"]
assert actVal.equals ("0") : "Expected = 0 | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Log Error Messages" id="d87d8973-a73e-43f8-ba28-a5e78fd6ad2e"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "Web - ChangedOfferAPIReq1#Response" )
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"
def x = holder.getNodeValue("ns1:error/ns1:message")
log.info "XML Holder: " + x

holder = groovyUtils.getXmlHolder( "Web - ChangedOfferAPIReq2#Response" )
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"
x = holder.getNodeValue("ns1:error/ns1:message")
log.info "XML Holder: " + x

// Obtain holder for the rsponse
holder = groovyUtils.getXmlHolder( "Web - Changed Offer API Future Date Reqest#Response" )
// It's MUST to define name space. Without this Xpath won't work.
holder.namespaces["ns1"] = "http://ws.guthy-renker.com/soma/201407"
// Get count of 'marketingOffer' nodes under 'marketingOffers' node.
def actVal = holder["count(//ns1:snapshots//ns1:marketingOffers/ns1:marketingOffer)"]
log.info "Count of MarketingOffer nodes: " + actVal
//assert actVal.equals ("0")

// loop item nodes in response message
//for( item in holder.getNodeValues( "//item" ))
//    log.info "Item : [$item]" 

</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;	// This is important to include
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
//import FrameworkLibs.*   // Un comment this if you dont want to use SoapUI's Script Library feature
import SoapUIDBLib.*

// Instantiate Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString());

def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info "Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " - Framework expectes any ONE of the following 'Test Data' files : "+ tdFileXLS + " (OR) "+ tdFileXLSX +" (OR) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only CSV file exists")	
}
// Only CSV exists
else if (!(new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info "- Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

context.sConn.close()
context.snpConn.close()
context.base.close()
context.procs.close()
//context.db = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7602166f-822e-4638-8529-1123ae45bf25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480e23a3-4b9b-4b0a-955b-c4dcee367029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0add6e9c-e26f-4eea-8157-89ef1f4a44b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>60036c22-cef8-41a3-8013-f292cced9802</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab9ca7f0-ecfd-43cc-a689-6e46aa7c6113</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d61cdf79-615e-4c76-9fe9-b5b4f1dc08c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e63f8e66-4a0e-417d-9da0-44dfedcbc21c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f66f591-3b96-4ae6-aeff-9e313e7e6843</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94cb0460-e1c9-46a5-86ff-61a9177ad082</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>744ab92a-5e71-4135-a6ef-258061061a1f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="56b5b7dd-f36b-4a3f-aab9-0a06e2e33d31" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC03 - POSITIVE TESTS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test script verifies that when a proper date is passed to SOMA Changed Offer API, the response will have HTTP 200OK message in the header.</con:description><con:settings/><con:testStep type="groovy" name="Set Valid Date Parameter" id="c6b33b38-71dd-4964-81ab-6159c6383bda"><con:settings/><con:config><script>def found = false
for (context.row; context.row &lt; context.rowCount; context.row++){

	if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
				if (context.td.get(context.row, "Type") ==  "VALID_DATE"){
					found = true
					log.info "Props step : " + context.td.get(context.row, "Filter")
					testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
					
					log.info "Props step : " + context.td.get(context.row, "After")
					testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
					log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
			}
	}
}
if (! found)
	testRunner.gotoStepByName("Iterator")
</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="06e53123-c78f-4f79-ac3e-60aaa6153704"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a3c53e5-8f0d-4ec7-8d8e-6a24717e6b4e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="be7dc091-ea36-4636-a971-3b64dc281b05"><con:settings/><con:config><script>// If you want to test "ALL" effected marketing offers, use below code. If you dont want to test ALL then block below code.
//if (context.xidx &lt; context.xtotal -1){
//	context.xidx ++;
//	testRunner.gotoStepByName("Verify INTENT")
//}</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="527546b9-72ef-4af2-a639-64495d6cd16f"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set Valid Date Parameter") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;	// This is important to include
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
// import FrameworkLibs.*   // Un comment this if you dont want to use SoapUI's Script Library feature
import SoapUIDBLib.*

// Instantiate Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString());


def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info "Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " - Framework expectes any ONE of the following 'Test Data' files : "+ tdFileXLS + " (OR) "+ tdFileXLSX +" (OR) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only CSV file exists")	
}
// Only CSV exists
else if (!(new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info "- Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])

]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

context.sConn.close()
context.snpConn.close()
context.base.close()
context.procs.close()
//context.db = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7602166f-822e-4638-8529-1123ae45bf25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480e23a3-4b9b-4b0a-955b-c4dcee367029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0add6e9c-e26f-4eea-8157-89ef1f4a44b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>60036c22-cef8-41a3-8013-f292cced9802</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab9ca7f0-ecfd-43cc-a689-6e46aa7c6113</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d61cdf79-615e-4c76-9fe9-b5b4f1dc08c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e63f8e66-4a0e-417d-9da0-44dfedcbc21c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="f9919693-ecaf-41d8-9d80-4e644b6accb6" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC04 - OP MASK ELEMENTS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>1) This Test Case calls SOMA Changed Offer API with mask set to OP
2) Checks the response to ensure all applicable elements for OP mask will show in the respons and all not applicable elements for OP mask will not show.

</con:description><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="df954f22-1006-485c-8857-26a2a3b73391"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Data Src Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="75a9ba14-af8a-49fd-aeac-622254de752c"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="XPath Match" id="fb931da6-263e-4203-868c-a946d18d4145" name="Check for existence of [intent]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:intent)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="36881971-3733-4725-82f6-fffcf34fd8cf" name="Check for existence of [code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d1697f4d-86ba-4913-9ddf-ee0914bf7899" name="Check for existence of [productLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:productLineCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="59ffb655-c65e-4b4d-8e5e-fa9b163ff844" name="Check for existence of [hostProductLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:hostProductLineCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="4e04fcaa-e6fb-4622-858b-bbfe26c825bf" name="Check for existence of [status]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:status)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9872607f-99a2-48bb-9531-2e7708b581cd" name="Check for existence of [readyDate]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:readyDate)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9c98c73f-8d7d-4b55-bb04-1669f31b4a92" name="Check count of [liveDate]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
count( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:liveDate)</path><content>20</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="60e77da2-b594-4ea9-bb53-4dacbbd5de7a" name="Check for existence of [endDate]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:endDate)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="2eb12e99-74b2-492f-a4ff-289fb74020e6" name="Check for existence of [derivation]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="5f12b7c1-6a03-47e3-acc2-fd5e88068523" name="Check for existence of [@entityId]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@entityId)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="a28c7ad8-19a1-4116-beb8-5fda8eebe9f7" name="Check for existence of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="dda039b0-991e-491e-9a9a-e0d838cd6aed" name="Check for existence of [@uri]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@uri)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="b8e8608c-ecdf-4094-a2d8-91fe77170b6d" name="Check for existence of [promotionTemplateCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:promotionTemplateCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="16f72e1a-be73-459f-9a6d-c766a2641ae5" name="Check for existence of [offerPanelCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:offerPanelCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="cbe35ea0-828b-4d2b-ac86-96aa944e2710" name="Check for existence of [offerCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:offerCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d4ce01ed-350a-478e-990b-c4487239783e" name="Check for existence of [itemCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:itemCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f8865fb4-b8a8-4a07-8d69-88eb1995dc38" name="Check for existence of [venue]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="98d4ac5d-eecb-4248-b657-6f1807147903" name="Check for existence of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue/@code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="1d134000-4485-407b-9d81-8afd36895f43" name="Check for existence of [supervenue]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue/ns1:supervenue)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d6dc5d19-a90b-45c8-ab26-1d809408b7de" name="Check for existence of [paymentDetail]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="eade6b03-0c16-499f-bee9-1c4a566e3941" name="Check for existence of [@currency]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/@currency)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="ce3e9a4b-f376-43a8-9ef8-58312b658105" name="Check for existence of [unitPrice]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:unitPrice)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="019ec9da-7cd2-4486-8daf-e697db8b291f" name="Check for existence of [firstPaymentAmount]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:firstPaymentAmount)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="b7f7caa4-4eb2-4114-8785-72973df7df5e" name="Check for existence of [firstShippingAmount]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:firstShippingAmount)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="aa590bb0-3ddc-437e-8d54-ae1fea781b75" name="Check for existence of [stdShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:stdShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9c32004f-6ffb-414c-8ad3-cafcc5666469" name="Check for existence of [rushShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:rushShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="866a087d-c221-4115-ab30-0bb4fa0a7baa" name="Check for existence of [twoDayShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:twoDayShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d586cf9a-6dcd-4eb1-b74b-f957cb0d5de4" name="Check for existence of [sameDayShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:sameDayShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="99e75155-005c-4446-95af-1551274382c7" name="Check for existence of [cartTitle]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:cartTitle)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="61547a6a-948d-4911-b055-591e5e293d30" name="Check for existence of [maxQuantity]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:maxQuantity)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f62e2d91-4fd3-44d7-859c-1548fad805b8" name="Check for existence of [coreItem]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:coreItem)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="61547a6a-948d-4911-b055-591e5e293d30" name="Check for NOT existence of cartLanguage"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:cartLanguage)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="61547a6a-948d-4911-b055-591e5e293d30" name="Check for NOT existence of tlmTollFreeNumber"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:tlmTollFreeNumber)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="a5cf28f5-bb60-4a9a-a5f4-de476d3631fa"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

	// Obtain API response into a variable
	def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
	
	// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
	def root = new XmlSlurper().parseText(response)  
	
	// Put the root in the 'context'
	context.setProperty("xmlRoot", root)

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of intent" id="16c3d788-ffb3-4d24-ac86-baa1cebeda7c"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - INTENT] = Element presence: "+ testOffer.intent.size() + " | Element Data: "+ testOffer.intent.text()

// Check if the element is present 
assert 1 == testOffer.intent.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of code" id="f8ee2d47-b8f9-4af8-9f22-bfef6d235717"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - CODE] = Element presence: "+ testOffer.code.size() + " | Element Data: "+ testOffer.code.text()

// Check if the element is present 
assert 1 == testOffer.code.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of productLineCode" id="9510f3ed-bd44-4ca0-85dc-add6ccd8172c"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - productLineCode] = Element presence: "+ testOffer.productLineCode.size() + " | Element Data: "+ testOffer.productLineCode.text()

// Check if the element is present 
assert 1 == testOffer.productLineCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of hostProductLineCode" id="3db58539-0232-49b0-b4ad-afef43a450d5"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - hostProductLineCode] = Element presence: "+ testOffer.hostProductLineCode.size() + " | Element Data: "+ testOffer.hostProductLineCode.text()

// Check if the element is present 
assert 1 == testOffer.hostProductLineCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of status" id="95ccaab9-06fc-4983-afb3-6665e61617bb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - status] = Element presence: "+ testOffer.status.size() + " | Element Data: "+ testOffer.status.text()

// Check if the element is present 
assert 1 == testOffer.status.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of readyDate" id="9b5019ea-4972-49f6-9bef-2bb42aa2a0cb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - readyDate] = Element presence: "+ testOffer.readyDate.size() + " | Element Data: "+ testOffer.readyDate.text()

// Check if the element is present 
assert 1 == testOffer.readyDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of liveDate" id="463650de-cc16-4c39-8720-ebcea730026a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - liveDate] = Element presence: "+ testOffer.liveDate.size() + " | Element Data: "+ testOffer.liveDate.text()

// Check if the element is present 
assert 1 == testOffer.liveDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of endDate" id="097a0288-81bc-4a68-8bcc-8069537539f2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - endDate] = Element presence: "+ testOffer.endDate.size() + " | Element Data: "+ testOffer.endDate.text()

// Check if the element is present 
assert 1 == testOffer.endDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of promotionTemplateCode" id="0226ccfb-bd6d-4e2b-a51e-1d5e9a649b01"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - promotionTemplateCode] = Element presence: "+ testOffer.derivation.promotionTemplateCode.size() + " | Element Data: "+ testOffer.derivation.promotionTemplateCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.promotionTemplateCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of offerPanelCode" id="de690592-9288-4ce5-8304-efedeb09427e"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - offerPanelCode] = Element presence: "+ testOffer.derivation.offerPanelCode.size() + " | Element Data: "+ testOffer.derivation.offerPanelCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.offerPanelCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of offerCode" id="ca65351f-a54c-4c12-bd99-e46c95cc74f1"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>75a9ba14-af8a-49fd-aeac-622254de752c</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - offerCode] = Element presence: "+ testOffer.derivation.offerCode.size() + " | Element Data: "+ testOffer.derivation.offerCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.offerCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="09e0c3b5-81a6-4fda-9144-dd0375dbc658"><con:settings/><con:config><script>// If you want to test "ALL" effected marketing offers, use below code. If you dont want to test ALL then block below code.
//if (context.xidx &lt; context.xtotal -1){
//	context.xidx ++;
//	testRunner.gotoStepByName("Verify INTENT")
//}</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="da1dfefc-4a8f-4e45-ab9f-54db6597f315"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;	// This is important to include
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
//import FrameworkLibs.*   // Un comment this if you dont want to use SoapUI's Script Library feature
import SoapUIDBLib.*

// Instantiate Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString());

def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info "Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " - Framework expectes any ONE of the following 'Test Data' files : "+ tdFileXLS + " (OR) "+ tdFileXLSX +" (OR) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only CSV file exists")	
}
// Only CSV exists
else if (!(new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info "- Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

context.db.close("Setup")

//context.db = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7602166f-822e-4638-8529-1123ae45bf25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480e23a3-4b9b-4b0a-955b-c4dcee367029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0add6e9c-e26f-4eea-8157-89ef1f4a44b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c833d237-4f0d-4700-975d-3c9f4539c337</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>16c3d788-ffb3-4d24-ac86-baa1cebeda7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8ee2d47-b8f9-4af8-9f22-bfef6d235717</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9510f3ed-bd44-4ca0-85dc-add6ccd8172c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3db58539-0232-49b0-b4ad-afef43a450d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95ccaab9-06fc-4983-afb3-6665e61617bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b5019ea-4972-49f6-9bef-2bb42aa2a0cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>463650de-cc16-4c39-8720-ebcea730026a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>097a0288-81bc-4a68-8bcc-8069537539f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0226ccfb-bd6d-4e2b-a51e-1d5e9a649b01</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de690592-9288-4ce5-8304-efedeb09427e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ca65351f-a54c-4c12-bd99-e46c95cc74f1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="c526df03-a6bf-4e51-9ea1-1ec2a4e29d54" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC05 - WEB MASK ELEMENTS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>1) This Test Case calls SOMA Changed Offer API with mask set to WEB
2) Checks the response to ensure all applicable elements for WEB mask are present in the respons and all not applicable elements for WEB mask are not present.
</con:description><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="7e51fcfb-45e8-41f9-a444-6130fff1d57d"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Data Src Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="e5a8b81a-9199-4786-9273-63759e0393ba"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:assertion type="XPath Match" id="fb931da6-263e-4203-868c-a946d18d4145" name="Check for existence of [intent]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:intent)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="36881971-3733-4725-82f6-fffcf34fd8cf" name="Check for existence of [code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d1697f4d-86ba-4913-9ddf-ee0914bf7899" name="Check for existence of [productLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:productLineCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="59ffb655-c65e-4b4d-8e5e-fa9b163ff844" name="Check for existence of [hostProductLineCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:hostProductLineCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="4e04fcaa-e6fb-4622-858b-bbfe26c825bf" name="Check for existence of [status]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:status)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9872607f-99a2-48bb-9531-2e7708b581cd" name="Check for existence of [readyDate]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:readyDate)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="60e77da2-b594-4ea9-bb53-4dacbbd5de7a" name="Check for existence of [endDate]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:endDate)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="2eb12e99-74b2-492f-a4ff-289fb74020e6" name="Check for existence of [derivation]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="5f12b7c1-6a03-47e3-acc2-fd5e88068523" name="Check for existence of [@entityId]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@entityId)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="a28c7ad8-19a1-4116-beb8-5fda8eebe9f7" name="Check for existence of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="dda039b0-991e-491e-9a9a-e0d838cd6aed" name="Check for existence of [@uri]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:sourceKey-Ref/@uri)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="b8e8608c-ecdf-4094-a2d8-91fe77170b6d" name="Check for existence of [promotionTemplateCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:promotionTemplateCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="16f72e1a-be73-459f-9a6d-c766a2641ae5" name="Check for existence of [offerPanelCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:offerPanelCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="cbe35ea0-828b-4d2b-ac86-96aa944e2710" name="Check for existence of [offerCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:offerCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d4ce01ed-350a-478e-990b-c4487239783e" name="Check for existence of [itemCode]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:derivation/ns1:itemCode)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f8865fb4-b8a8-4a07-8d69-88eb1995dc38" name="Check for existence of [venue]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="98d4ac5d-eecb-4248-b657-6f1807147903" name="Check for existence of [@code]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue/@code)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="1d134000-4485-407b-9d81-8afd36895f43" name="Check for existence of [supervenue]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:venue/ns1:supervenue)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d6dc5d19-a90b-45c8-ab26-1d809408b7de" name="Check for existence of [paymentDetail]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="eade6b03-0c16-499f-bee9-1c4a566e3941" name="Check for existence of [@currency]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/@currency)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="ce3e9a4b-f376-43a8-9ef8-58312b658105" name="Check for existence of [unitPrice]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:unitPrice)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="019ec9da-7cd2-4486-8daf-e697db8b291f" name="Check for existence of [firstPaymentAmount]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:firstPaymentAmount)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="b7f7caa4-4eb2-4114-8785-72973df7df5e" name="Check for NOT existence of [firstShippingAmount]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:firstShippingAmount)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="aa590bb0-3ddc-437e-8d54-ae1fea781b75" name="Check for existence of [stdShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:stdShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="9c32004f-6ffb-414c-8ad3-cafcc5666469" name="Check for existence of [rushShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:rushShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="866a087d-c221-4115-ab30-0bb4fa0a7baa" name="Check for existence of [twoDayShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:twoDayShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="d586cf9a-6dcd-4eb1-b74b-f957cb0d5de4" name="Check for existence of [sameDayShipping]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:paymentDetail/ns1:sameDayShipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="99e75155-005c-4446-95af-1551274382c7" name="Check for existence of [cartTitle]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:cartTitle)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="61547a6a-948d-4911-b055-591e5e293d30" name="Check for existence of [maxQuantity]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:maxQuantity)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f62e2d91-4fd3-44d7-859c-1548fad805b8" name="Check for existence of [coreItem]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:coreItem)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="2401f0cf-6af1-4690-9e50-24a31954cecd" name="Check for existence of [cartLanguage]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:cartLanguage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="f13652af-c262-4a7e-b9e2-a3c5079c9153" name="Check for existence of [tlmTollFreeNumber]"><con:configuration><path>declare namespace ns1='http://ws.guthy-renker.com/soma/201407';
exists( //ns1:snapshots/ns1:marketingOffers/ns1:marketingOffer/ns1:web/ns1:tlmTollFreeNumber)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain>guthy-renker</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="07a5dfb1-6445-45de-87c8-243cdad1c191"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

	// Obtain API response into a variable
	def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )
	
	// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
	def root = new XmlSlurper().parseText(response)  
	
	// Put the root in the 'context'
	context.setProperty("xmlRoot", root)

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of intent" id="610f6aad-23a9-44ba-ab31-c2ba882436b5"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - INTENT] = Element presence: "+ testOffer.intent.size() + " | Element Data: "+ testOffer.intent.text()

// Check if the element is present 
assert 1 == testOffer.intent.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of code" id="1f9de880-8251-4ccf-94ed-c4751a273808"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - CODE] = Element presence: "+ testOffer.code.size() + " | Element Data: "+ testOffer.code.text()

// Check if the element is present 
assert 1 == testOffer.code.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of productLineCode" id="0a371f82-52e2-4621-afe0-77b146b0c9c0"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - productLineCode] = Element presence: "+ testOffer.productLineCode.size() + " | Element Data: "+ testOffer.productLineCode.text()

// Check if the element is present 
assert 1 == testOffer.productLineCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of hostProductLineCode" id="0cd17035-35fb-46d4-97a9-8eab5f1419b7"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - hostProductLineCode] = Element presence: "+ testOffer.hostProductLineCode.size() + " | Element Data: "+ testOffer.hostProductLineCode.text()

// Check if the element is present 
assert 1 == testOffer.hostProductLineCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of status" id="8bb5eea6-d4bf-4095-9de4-4c730d338427"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - status] = Element presence: "+ testOffer.status.size() + " | Element Data: "+ testOffer.status.text()

// Check if the element is present 
assert 1 == testOffer.status.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of readyDate" id="d7a5c8ed-bdf6-4107-9cae-1d009abceab9"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - readyDate] = Element presence: "+ testOffer.readyDate.size() + " | Element Data: "+ testOffer.readyDate.text()

// Check if the element is present 
assert 1 == testOffer.readyDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of liveDate" id="da95595a-3ae4-476e-85ef-c710964081f7"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - liveDate] = Element presence: "+ testOffer.liveDate.size() + " | Element Data: "+ testOffer.liveDate.text()

// Check if the element is present 
assert 1 == testOffer.liveDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of endDate" id="baebe9e5-9851-4bc2-8ecf-1512aac1233e"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - endDate] = Element presence: "+ testOffer.endDate.size() + " | Element Data: "+ testOffer.endDate.text()

// Check if the element is present 
assert 1 == testOffer.endDate.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of promotionTemplateCode" id="903095c5-f245-4762-bfd3-929abd9dff57"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - promotionTemplateCode] = Element presence: "+ testOffer.derivation.promotionTemplateCode.size() + " | Element Data: "+ testOffer.derivation.promotionTemplateCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.promotionTemplateCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of offerPanelCode" id="fd77e578-fb16-4270-8734-c77b8790057f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - offerPanelCode] = Element presence: "+ testOffer.derivation.offerPanelCode.size() + " | Element Data: "+ testOffer.derivation.offerPanelCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.offerPanelCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify existence of offerCode" id="39128e0a-b5b9-40f7-9449-6756c1e1aafe"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>e5a8b81a-9199-4786-9273-63759e0393ba</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snpConn

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// Get the very first Marketing Offer as all we need is to look at any one marketing offer
def testOffer = allMarketOffers.marketingOffer[0]

log.info "[EXPECTED | ACTUAL] - [OP mask - offerCode] = Element presence: "+ testOffer.derivation.offerCode.size() + " | Element Data: "+ testOffer.derivation.offerCode.text()

// Check if the element is present 
assert 1 == testOffer.derivation.offerCode.size()

// Check to see element is showing some data without blank content
// assert ! testOffer.code.text().equals("")

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="60e37d36-f2c8-49e5-931e-b79cbcc243df"><con:settings/><con:config><script>// If you want to test "ALL" effected marketing offers, use below code. If you dont want to test ALL then block below code.
//if (context.xidx &lt; context.xtotal -1){
//	context.xidx ++;
//	testRunner.gotoStepByName("Verify INTENT")
//}</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="f7ed87b9-eb7c-4186-aba5-25d3c4e1d66a"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;	// This is important to include
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
//import FrameworkLibs.*   // Un comment this if you dont want to use SoapUI's Script Library feature
import SoapUIDBLib.*

// Instantiate Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString());

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString());

def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info "Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " - Framework expectes any ONE of the following 'Test Data' files : "+ tdFileXLS + " (OR) "+ tdFileXLSX +" (OR) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" - Only CSV file exists")	
}
// Only CSV exists
else if (!(new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info "- Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

context.sConn.close()
context.snpConn.close()
context.base.close()
context.procs.close()
//context.db = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7602166f-822e-4638-8529-1123ae45bf25</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>480e23a3-4b9b-4b0a-955b-c4dcee367029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0add6e9c-e26f-4eea-8157-89ef1f4a44b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c833d237-4f0d-4700-975d-3c9f4539c337</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>16c3d788-ffb3-4d24-ac86-baa1cebeda7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8ee2d47-b8f9-4af8-9f22-bfef6d235717</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9510f3ed-bd44-4ca0-85dc-add6ccd8172c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3db58539-0232-49b0-b4ad-afef43a450d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95ccaab9-06fc-4983-afb3-6665e61617bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b5019ea-4972-49f6-9bef-2bb42aa2a0cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>463650de-cc16-4c39-8720-ebcea730026a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>097a0288-81bc-4a68-8bcc-8069537539f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0226ccfb-bd6d-4e2b-a51e-1d5e9a649b01</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de690592-9288-4ce5-8304-efedeb09427e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ca65351f-a54c-4c12-bd99-e46c95cc74f1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="07fb916c-9555-4a83-a0bb-89073a950a4b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC06 - VERIFY ALL LEGACY OFFERS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>Description:
Verifies all legacy marketing offers of a given "Offer_Code".
Performs following steps.
1) Finds all marketing offers that belong to an offer_code from the Changed Offer API response.
2) Loop thru each marketing offer and validates each field inside marketing offer by comparing against database
3) Use this as a base or model test case. This is just reference implementation for the developer to refer as needed and does not have proper test requirements to map to.</con:description><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="ab6220e1-fc1d-4b36-bdb3-4470bcbe1029"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Project Property - filter: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Project Property - after: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Data Src Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="112036a4-a38a-41ad-9d41-9ee7aaa995c6"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="1e09e84c-5819-4c17-b7d0-0d3f95fc6647"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify intent" id="5687e696-8d61-4859-8223-cefe91a24519"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

/* Obtain the 'marketing offer' that is associated with the supplied 'offer code' */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INTENT from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'intent' from the parsed response
def actVal =  testOffers[context.xidx].intent.text()

// Get expected 'intent' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INTENT"]

log.info " [EXPECTED | ACTUAL] - [Element: intent] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal - Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify productLineCode" id="82949023-f956-4335-b11e-8cfe76f83084"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code'
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select PRODUCT_LINE_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'productLineCode' from the parsed response
def actVal =  testOffers[context.xidx].productLineCode.text()

// Get expected 'productLineCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["PRODUCT_LINE_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: productLineCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify promotionTemplateCode" id="9a98aa68-3de1-41dd-bc04-88bbb84483cb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select PT_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'promotionTemplateCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.promotionTemplateCode.text()

// Get expected 'promotionTemplateCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["PT_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: promotionTemplateCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify offerPanelCode" id="18432997-6c8d-404c-8bfb-e8020fb596f8"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select OFFER_PANEL_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'offerPanelCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.offerPanelCode.text()

// Get expected 'offerPanelCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["OFFER_PANEL_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: offerPanelCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify itemCode" id="ce37b58d-258c-4015-ab04-8691c25c9b99"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select ITEM_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'itemCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.itemCode.text()

// Get expected 'itemCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["ITEM_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: itemCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify supervenue Code" id="1fa36936-c2d8-4165-9bd3-9b81d1c8a421"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select SUPERVENUE_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'supervenue' from the parsed response
def actVal =  testOffers[context.xidx].venue.supervenue.text()

// Get expected 'supervenue' value from Snapshot DB
def expVal = sql.rows(query).get(0)["SUPERVENUE_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: supervenue] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify secureCampaign Flag" id="af0b0d45-09fc-4e7c-8569-015ac54d0e69"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select SECURE_CAMPAIGN_FLAG from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'secureCampaign' from the parsed response
def actVal =  testOffers[context.xidx].secureCampaign.text()

// Get expected 'secureCampaign' value from Snapshot DB
def expVal = sql.rows(query).get(0)["SECURE_CAMPAIGN_FLAG"]
expVal = (expVal == "0" )? "false" : "true"

log.info " [EXPECTED | ACTUAL] - [Element: secureCampaign] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify unitPrice" id="d2a4c42e-3460-4a2b-849f-038139da3a22"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_UNIT_PRICE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'unitPrice' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.unitPrice.text()

// Get expected 'unitPrice' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_UNIT_PRICE"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: unitPrice] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify numberPayments" id="46a6acf1-7b4b-482e-b602-0b4e669fa8da"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_NUMBER_OF_PAYMENTS from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'numberPayments' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.numberPayments.text()

// Get expected 'numberPayments' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_NUMBER_OF_PAYMENTS"]
expVal = String.valueOf(expVal)

log.info " [EXPECTED | ACTUAL] - [Element: numberPayments] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Intial stdShipping" id="c5fb2c9f-bd7a-4ab8-8d8c-1105ff43f2f2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_STD_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'stdShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.stdShipping.text()

// Get expected 'stdShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_STD_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: stdShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify rushShipping" id="1fc3266f-4a63-41a3-9a61-a70c375cdd7f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_RUSH_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'rushShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.rushShipping.text()

// Get expected 'rushShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_RUSH_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: rushShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify initial twoDayShipping" id="b336baf0-bb15-439a-8dd1-d4096268fce3"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_2DAY_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'twoDayShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.twoDayShipping.text()

// Get expected 'twoDayShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_2DAY_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: twoDayShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="401be67a-8737-4457-b587-f337e6639b37"><con:settings/><con:config><script>/* Looping Code */
//log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount
if (context.xidx &lt; context.xtotal -1){
	context.xidx ++;
	testRunner.gotoStepByName("Verify INTENT")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="18deaa86-def3-463a-9b05-a211ec30c0da"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info " [USER MSG] - Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info " [USER MSG] - Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

//context.db.close("Setup")
//context.db.close("Setup_SnapShot")
//context.db = null // Out Of memory error
context.sConn.close()
context.snpConn.close()
context.base.close()
context.procs.close()


/* 
 *  Closing Connections in following ways WONT work. 
 *  Probably these local connection objects wont appear to "DBConnection" as that's in different domain. 
*/
//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="755f3071-5ded-4186-b1de-c4a55fc508fa" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC07 - FFS - LOGIC" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>Description:

Verifies FFS logic by validating correct elements are present when the fulfillment center is "EDS"</con:description><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="ec581a8d-0c3a-4256-94f2-868f1af93395"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Test Case - Filter value: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Changed Offer API Request1" id="b5036dab-093a-4ee2-9aee-3c184b379f3b"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Changed Offer API Request1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="35b22bc4-b923-47f4-a9e1-87d7a50d304c"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){
// Obtain API response into a variable
def response = context.expand( '${Changed Offer API Request1#Response}' )
// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify hpData exists" id="d1665bb1-b6c9-4a6e-a0e4-21040bfcd1ed"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b5036dab-093a-4ee2-9aee-3c184b379f3b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

if (testOffers[context.xidx].fulfillment.ffs.text() == "EDS"){
	log.info "Fulfillment center is EDS"
	assert 1 == testOffers[context.xidx].hpData.size()
}
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify hpKeycode exists" id="479d3e86-af84-43de-969f-739953634531"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b5036dab-093a-4ee2-9aee-3c184b379f3b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33


if (testOffers[context.xidx].fulfillment.ffs.text() == "EDS"){
	log.info "Fulfillment center is EDS"
	assert 1 == testOffers[context.xidx].hpData.hpKeycode.size()
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="VerifyhpProductNumber exists" id="70eb26b0-9c2c-4ec9-8ab7-01444a4d1acb"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b5036dab-093a-4ee2-9aee-3c184b379f3b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp
// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33


if (testOffers[context.xidx].fulfillment.ffs.text() == "EDS"){
	log.info "Fulfillment center is EDS"
	assert 1 == testOffers[context.xidx].hpData.hpProductNumber.size()
}
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify hpMpgCode exists" id="b7f81fbb-5c62-48f5-9e06-e64be22adeda"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>b5036dab-093a-4ee2-9aee-3c184b379f3b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML
// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

/* Obtain the 'marketing offer' that is associated with the supplied 'legacy offer code'
 * Remember legacy offer code is UNIQUE, so the result of the below "findAll" query will be ONE SINGLE RECORD  */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33


if (testOffers[context.xidx].fulfillment.ffs.text() == "EDS"){
	log.info "Fulfillment center is EDS"
	assert 1 == testOffers[context.xidx].hpData.hpMpgCode.size()
}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="85e5c5f8-e169-4d13-98a1-e14b5ec62ca7"><con:settings/><con:config><script>/* Looping Code */
//log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount

// If you want to test "ALL" effected marketing offers, use below code. If you dont want to test ALL then block below code.

//if (context.xidx &lt; context.xtotal -1){
//	context.xidx ++;
//	testRunner.gotoStepByName("Verify INTENT")
//}

</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="d2984758-786f-49d6-8d85-1d8c72fd5746"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info " [USER MSG] - Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info " [USER MSG] - Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
]]></con:setupScript><con:tearDownScript>context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

def ssql = context.sConn
ssql.close()
def snpsql = context.snpConn
snpsql.close()

context.sConn = null
context.snpConn = null
</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="a467161a-7b4f-4434-b376-b7339d889d78" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TS03-TC08 - VERIFY CHANGED MARKET OFFERS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Set API Request Properties" id="7b3cc4bc-bc6f-4925-aa3b-5d966e13e842"><con:settings/><con:config><script>
if ( context.td.get(context.row, "Run").toUpperCase() == "YES"){	
	log.info "Props step : " + context.td.get(context.row, "Filter")
	testRunner.testCase.testSuite.project.setPropertyValue( "filter",context.td.get(context.row, "Filter") )
	log.info "Project Property - filter: " + testRunner.testCase.testSuite.project.getPropertyValue("filter")
	
	log.info "Props step : " + context.td.get(context.row, "After")
	testRunner.testCase.testSuite.project.setPropertyValue( "after",context.td.get(context.row, "After") )	
	log.info "Project Property - after: " + testRunner.testCase.testSuite.project.getPropertyValue("after")
}	
else
	testRunner.gotoStepByName("Data Src Iterator")

/* Looping Sample Codr */
//for(context.row; context.row &lt; context.rowCount; context.row++ )
//{
//      testRunner.runTestStepByName( "Request 1")
//  
//      testRunner.runTestStepByName( "DisplayDataSource")
//      
//}

//if (context.row &lt; context.rowCount){
//	context.row ++;
//	testRunner.gotoStepByName("Request 1")
//}
	</script></con:config></con:testStep><con:testStep type="restrequest" name="Web - ChangedOfferAPIReq1" id="9777eafe-d99d-492f-8d89-08355edeaf4a"><con:settings/><con:config service="ChangedOfferAPI" resourcePath="/{path}/ws/rest/v1/snapshot/marketingoffers/changed/{filter}" methodName="Web" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Web - ChangedOfferAPIReq1" id="1469354e-661f-4d89-87da-8fe88f49a40a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}</con:endpoint><con:request/><con:originalUri>http://10.92.41.174/soma-ws-qa%2Fws%2Frest%2Fv1%2Fsnapshot/marketingoffers/changed/web</con:originalUri><con:credentials><con:username>somapi-autotest</con:username><con:password>p4$$W0rd</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="after" value="${#Project#after}"/>
  <con:entry key="path" value="${#Project#path}"/>
  <con:entry key="filter" value="${#Project#filter}"/>
</con:parameters><con:parameterOrder><con:entry>after</con:entry><con:entry>filter</con:entry><con:entry>path</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get All Legacy Offers From Response" id="8c54e43f-0762-49f1-a407-642ff29fa4e2"><con:settings/><con:config><script>if (context.td.eget(context.row, "B").toUpperCase() != "NO" ){

// Obtain API response into a variable
def response = context.expand( '${Web - ChangedOfferAPIReq1#Response}' )

// The root of the parsed XML is always the VERY first node. In case of Change API response it would be 'snapshots'
def root = new XmlSlurper().parseText(response)   //XmlParser

// Put the root in the 'context'
context.setProperty("xmlRoot", root)

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()   // Verbose

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Keep the test offer in context to allow other steps access it
context.setProperty("legacyOffers",  testOffers)
context.setProperty("xidx",  0)
context.setProperty("xtotal",  testOffers.size())

//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

}
else
	testRunner.gotoStepByName("Data Src Iterator")
</script></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify intent" id="9089e3e6-73db-4d4f-8ed6-f96410c11a57"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

/* Obtain the 'marketing offer' that is associated with the supplied 'offer code' */ 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INTENT from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'intent' from the parsed response
def actVal =  testOffers[context.xidx].intent.text()

// Get expected 'intent' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INTENT"]

log.info " [EXPECTED | ACTUAL] - [Element: intent] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal - Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify productLineCode" id="4ecd14fe-7c5e-4908-a192-fb5bc82d99d5"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code'
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select PRODUCT_LINE_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'productLineCode' from the parsed response
def actVal =  testOffers[context.xidx].productLineCode.text()

// Get expected 'productLineCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["PRODUCT_LINE_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: productLineCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"


</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify promotionTemplateCode" id="cfe0d450-0907-4e78-aad4-c9cc9d459e1e"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select PT_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'promotionTemplateCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.promotionTemplateCode.text()

// Get expected 'promotionTemplateCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["PT_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: promotionTemplateCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify offerPanelCode" id="f841cc0d-f757-4fe1-b136-e37f18f08a48"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select OFFER_PANEL_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'offerPanelCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.offerPanelCode.text()

// Get expected 'offerPanelCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["OFFER_PANEL_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: offerPanelCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify itemCode" id="6087c494-26f6-40ce-9e13-b1ef7733b6b3"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select ITEM_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'itemCode' from the parsed response
def actVal =  testOffers[context.xidx].derivation.itemCode.text()

// Get expected 'itemCode' value from Snapshot DB
def expVal = sql.rows(query).get(0)["ITEM_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: itemCode] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify supervenue Code" id="63cdd2cb-5360-48ce-b0cb-10ade0da0420"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select SUPERVENUE_CODE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'supervenue' from the parsed response
def actVal =  testOffers[context.xidx].venue.supervenue.text()

// Get expected 'supervenue' value from Snapshot DB
def expVal = sql.rows(query).get(0)["SUPERVENUE_CODE"]

log.info " [EXPECTED | ACTUAL] - [Element: supervenue] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify secureCampaign Flag" id="9c4aff61-0e60-49d1-92d3-644ccd0b03aa"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select SECURE_CAMPAIGN_FLAG from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'secureCampaign' from the parsed response
def actVal =  testOffers[context.xidx].secureCampaign.text()

// Get expected 'secureCampaign' value from Snapshot DB
def expVal = sql.rows(query).get(0)["SECURE_CAMPAIGN_FLAG"]
expVal = (expVal == "0" )? "false" : "true"

log.info " [EXPECTED | ACTUAL] - [Element: secureCampaign] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}]- [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify unitPrice" id="5dceeff8-1b0b-4079-af92-1fd1d7b2b007"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_UNIT_PRICE from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'unitPrice' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.unitPrice.text()

// Get expected 'unitPrice' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_UNIT_PRICE"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: unitPrice] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify numberPayments" id="735970d6-8ae4-410f-82a0-b6f9fb2e6f04"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_NUMBER_OF_PAYMENTS from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'numberPayments' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.numberPayments.text()

// Get expected 'numberPayments' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_NUMBER_OF_PAYMENTS"]
expVal = String.valueOf(expVal)

log.info " [EXPECTED | ACTUAL] - [Element: numberPayments] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify Intial stdShipping" id="9e74f231-448f-4b0e-bb55-7303dd82b400"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_STD_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'stdShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.stdShipping.text()

// Get expected 'stdShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_STD_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: stdShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify rushShipping" id="a4bb1d9b-62a7-42e6-b9ee-fa47dc20e03a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_RUSH_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'rushShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.rushShipping.text()

// Get expected 'rushShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_RUSH_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: rushShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Verify initial twoDayShipping" id="a6e0a970-a72c-4ff4-953a-09d3c1de7b19"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>f48ebf97-9cca-471b-9f60-9d407e160e2a</con:id><con:isGroup>false</con:isGroup><con:sourceId>9777eafe-d99d-492f-8d89-08355edeaf4a</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b7b58736-201d-4d6f-97d1-f3f780afc98d"><con:configuration><scriptText>import java.text.DecimalFormat

// Get SnapShot database connection
def sql = context.snp

// Since the original XML Slurper object needs to be retained, access it from context
def root = context.xmlRoot

// Now get all 'marketingOffers' nodes
def allMarketOffers = root.marketingOffers // Remembr root is "snapshots" for Change API response XML

// log.info "Total number of Marketing Offers : " +  allMarketOffers.marketingOffer.size()  // Verbose

// Get Offer Code from data source
def offerCode = context.td.get (context.row,"Offer_Code") 

// Obtain the 'marketing offer' that is associated with the supplied 'offer code' 
def testOffers =  allMarketOffers.marketingOffer.findAll{ it.derivation.offerCode.text().equals(context.td.get (context.row,"Offer_Code")) }   //Z34B33

// Legacy Offer code from the 'CURRENT' Marekting Offer pointed by 'xidx'
def legacyOffer = testOffers[context.xidx].code.text()

def query = "select INITIAL_2DAY_SHIPPING from VW_WEB_MKT_OFFERS where LEGACY_OFFER_CODE = '"+legacyOffer+"'"

// Get actual 'twoDayShipping' from the parsed response
def actVal =  testOffers[context.xidx].paymentDetail.twoDayShipping.text()

// Get expected 'twoDayShipping' value from Snapshot DB
def expVal = sql.rows(query).get(0)["INITIAL_2DAY_SHIPPING"]
DecimalFormat format = new DecimalFormat("0.00")
expVal = String.valueOf(format.format(Double.parseDouble(String.valueOf(expVal))))

log.info " [EXPECTED | ACTUAL] - [Element: twoDayShipping] - [OfferCode: $offerCode - LegacyCode: $legacyOffer - TD-Row: ${context.row}] - [Expected = $expVal | Actual = $actVal ]"

assert actVal == expVal : "Expected = $expVal | Actual = $actVal"
//for (i in 0..testOffers.size() ){
//	log.info "Legacy code: " + testOffers[i].code.text()
//}

</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="groovy" name="Script Iterator" id="ee7a90df-0001-443d-890a-95d852b9d980"><con:settings/><con:config><script>/* Looping Code */
//log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount
if (context.xidx &lt; context.xtotal -1){
	context.xidx ++;
	testRunner.gotoStepByName("Verify INTENT")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Data Src Iterator" id="ca2d3216-cc59-49cb-b709-56cd479d772c"><con:settings/><con:config><script>/* Looping Code */
// log.info "[CUR ROW] - "+context.row + "Of "+context.rowCount  //Verbose
if (context.row &lt; context.rowCount){
	context.row ++;
	testRunner.gotoStepByName("Set API Request Properties") //Get All Legacy Offers From Response
}</script></con:config></con:testStep><con:setupScript><![CDATA[context.iter = 1
import java.sql.Connection
import groovy.sql.Sql
import oracle.jdbc.driver.OracleDriver;
import FrameworkLibs.TestDataManager.*
import FrameworkLibs.ReportManager.*
import com.eviware.soapui.impl.wsdl.teststeps.*

// Instantiate Groovy Utils for future use
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Use this snippet to programmatically provide authentication credentials to all HTTP REST requests
for( testStep in testCase.getTestStepList() ) {
    if( testStep instanceof RestTestRequestStep ) {
      testStep.getTestRequest()
              .setUsername(testRunner.testCase.testSuite.project.getPropertyValue( "username"))
      testStep.getTestRequest()
              .setPassword(testRunner.testCase.testSuite.project.getPropertyValue( "password"))
    }
  }

//Get Project Path
def  projectPath = groovyUtils.projectPath
log.info "Project Path : " + projectPath

// Register Oracle Driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "oracle.jdbc.driver.OracleDriver")
Properties props = new Properties () ;
		props.setProperty("oracle.jdbc.V8Compatible", "true")

// Set DB Objects for later use
def ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Setup')
context.setup = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Snp')
context.snp = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Base')
context.base = Sql.newInstance(ConObj.getConnectionString(), props);

ConObj  = testRunner.testCase.testSuite.project.activeEnvironment.databaseConnectionContainer.getDatabaseConnectionByName('Procs')
context.procs = Sql.newInstance(ConObj.getConnectionString(), props);

// Setup test data. The following script determines expected test data file based on framework's convention i.e. the test dat file
// must have same name as test case name and loads the test data file and make it available for the script.

def tdPath = new File(projectPath).getParentFile().getAbsolutePath()
log.info " [USER MSG] - Test Data Parh is: "+ projectPath

def tcName = testRunner.testCase.name 

// Make both XLS and CSV file paths. Any one of these two files are expected. It's user's responsibilty to ensure only 
// one type of test data file is present in 'Test Data' directory. If both types (i.e. XLS and CSV) presents by mistake
// framework chooses CSV file to instantiate TestData object. 
def tdFileXLS = tdPath + "\\TestData\\" + tcName+ ".xls"
def tdFileXLSX = tdPath + "\\TestData\\" + tcName+ ".xlsx"
def tdFileCSV = tdPath + "\\TestData\\" + tcName+ ".csv"

tdFileXLS = tdFileXLS.replace("\\", "/")
tdFileXLSX = tdFileXLSX.replace("\\", "/")
tdFileCSV = tdFileCSV.replace("\\", "/")

log.info " [USER MSG] - Framework expectes any ONE of the following 'Test Data' files : \n"+ tdFileXLS + " (OR\n) "+ tdFileXLSX +" (OR\n) " + tdFileCSV

// 'TestData' Object for this test case
TestData td

// Only XLS exists
if (new File(tdFileXLS).isFile() && !(new File(tdFileCSV).isFile()) && !(new File(tdFileXLSX).isFile() ) ){
	// Instantiate Test Data and keep it in Test Case Context
	td = TestDataFactory.load(tdFileXLS)	
	log.info (" [USER MSG] - Only XLS file exists")
}

// Only XLSX exists
else if (!(new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only XLSX file exists")	
}

// Both XLS and XLSX exists. Use XLSX.
else if ((new File(tdFileXLS).isFile()) && !(new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileXLSX)
	log.info (" [USER MSG] - Only CSV file exists")	
}
// Both CSV and XLSX exists - Choose CSV
else if (new File(tdFileCSV).isFile()){
	td = TestDataFactory.load(tdFileCSV)
	log.info (" [USER MSG] - Only CSV file exists")
}

// All three XLS, XLSX and CSV exists. Choose CSV to load Test Data
else if ((new File(tdFileXLS).isFile()) && (new File(tdFileCSV).isFile()) && (new File(tdFileXLSX).isFile() ) ){
	td = TestDataFactory.load(tdFileCSV)		
	log.info (" [USER MSG] - XLS and CSV both exists")
}

// Finally keep 'td' object in the 'test case context'
context.td = td 

// Sample line of code to access Test Data
//log.info "The field at 1st row 1st column: " +  td.get (1,1)

// Setup Report Manager
def reportFile = tdPath + "\\Reports\\" + tcName+ ".xlsx"

log.info " [USER MSG] - Report File Name is: "+ reportFile

log.info (reportFile.replace("\\", "/"))

// Instantiate Report Manager and keep it in the Test Case Context
SimpleReporter rep = SimpleReporterFactory.create( 
				reportFile.replace("\\", "/"), (String[])["Verification Step", "Expected Value", "Actual Value", "Test Status"], true)
				rep.setFormatColumn1("A")
rep.setFormatColumn2("D")
context.rep = rep

if (context.td != null){
	context.row = 2
	context.rowCount = context.td.getRowCount()
	context.colCount = context.td.getColCount()
}

// Sample lines of code to access Report Manager 				
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
//rep.report((String[])["Step1", "Expected Val1", "PASS"])
]]></con:setupScript><con:tearDownScript>
context.iter = 0
// Close Test Data
context.td.close()
context.rep.close()

context.td = null
context.rep = null

//context.db.close("Setup")
//context.db.close("Setup_SnapShot")
//context.db = null // Out Of memory error
context.sConn.close()
context.snpConn.close()
context.base.close()
context.procs.close()


/* 
 *  Closing Connections in following ways WONT work. 
 *  Probably these local connection objects wont appear to "DBConnection" as that's in different domain. 
*/
//def ssql = context.sConn
//ssql.close()
//def snpsql = context.snpConn
//snpsql.close()

//context.sConn = null
//context.snpConn = null</con:tearDownScript><con:properties><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-08-08T16:51:00</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1afa1036-d710-4265-bcbc-a15333ed3a0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a7b8a08-07d9-4eca-bd64-31bf4595fb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b4b7099-ef25-4def-916c-8a15d9d4043c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b532b870-ab63-4f90-b4ec-419a92303234</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58574ec4-ca91-4dbe-9025-4cad65f77d09</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2885fce0-8b88-4595-94ff-83b1b1b2d5e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>488d0e86-afc6-4069-a4ee-d4b6f9d891aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98341869-54f7-454e-a839-d2d185c72ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a916b03a-1e62-484f-aef3-f67734aedf29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f7552c0-b0b2-4171-b0e5-832a1752bab3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f6adb504-62a9-49a4-a298-9f50b98818fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f4a457f-5b00-4b7d-8fbb-c615dc0403bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2a2ac6c-cc85-45c5-9582-029b4d60de2b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77c5ee27-5fac-4ff1-b011-66898b7f54db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05217001-3ec8-4b5b-93ad-af6c7eb9628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afa76f3b-7f40-4d78-b567-a6b86a752756</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ef7a256-e8e7-436c-8f60-ce9d3edcfd84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8dfc3cd-77a0-40fd-abcb-dc86e4a6fa89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>731057d4-3aa2-4329-b7d4-d2508fc809fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c923a865-3234-4fbe-8a55-bc7d5e765110</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab6220e1-fc1d-4b36-bdb3-4470bcbe1029</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>112036a4-a38a-41ad-9d41-9ee7aaa995c6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d8911de-7d3f-4168-b76e-a6d30012d58d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">${#Project#endpoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>endpoint</con:name><con:value>http://10.92.41.155:8380</con:value></con:property><con:property><con:name>path</con:name><con:value>soma-ws-ci</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-09-08T16:51:00</con:value></con:property><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>product</con:name><con:value>PA</con:value></con:property><con:property><con:name>ActiveEnv</con:name><con:value>CI</con:value></con:property><con:property><con:name>username</con:name></con:property><con:property><con:name>password</con:name></con:property></con:properties><con:afterLoadScript>import groovy.util.*
import java.io.File	// You need Java File utils

// Get projects active environment
log.info "Active Environment set to : "+ project.activeEnvironment.name 
def active_env = context.expand( '${#Project#ActiveEnv}')

// Set this as active environment
project.setActiveEnvironment(active_env)
log.info "Confirm Active Env name: " + project.activeEnvironment.name

// Get SoapUI Groovy Utils
groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Get Confg File Location
def ws = new File(groovyUtils.projectPath).getParentFile()
def confFile = ws.toString() + "/Source/Config/soapui.properties.groovy"
log.info "Config File Name is: " + confFile

// Find active environment and get the endpoint URL
def config = new ConfigSlurper().parse(new File(confFile).toURL())
def env = config.active_env
log.info " - Active Environment is: " + env
def endpoint = config.endpoints."$env".endpoint
def path = config.endpoints."$env".path

// Set project level property
project.setPropertyValue( "endpoint",endpoint )
project.setPropertyValue( "path",path )

def username = config.http_auth.username
def password = config.http_auth.password
log.info " - HTTP Authentication user name/password : " + username + " / "+ password
project.setPropertyValue( "username",username )
project.setPropertyValue( "password",password )


// Set default values for 'filter' and 'after'
project.setPropertyValue( "after","2014-10-20T16:51:00" )
project.setPropertyValue( "filter","web" )
project.setPropertyValue( "product","PA" )

</con:afterLoadScript><con:wssContainer/><con:databaseConnectionContainer><con:databaseConnection><con:name>Setup</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUP/APPCAr35ex@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>c</con:password></con:databaseConnection><con:databaseConnection><con:name>Snp</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:x</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Base</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Procs</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection></con:databaseConnectionContainer><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:reportTemplates><con:name>Changed Offer Report</con:name><con:reportType>TESTSUITE</con:reportType><con:reportLevel>MAINREPORT</con:reportLevel><con:data><![CDATA[<jasperReport xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="ReportTemplate" language="groovy" pageWidth="595" pageHeight="842" columnWidth="555" leftMargin="20" rightMargin="20" topMargin="30" bottomMargin="30" xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <property name="ireport.encoding" value="UTF-8"/>
   <template>"../../styles.jrtx"</template>
   <!--FIELDS & PARAMS-->
   <title>
      <band height="70">
         <textField>
            <reportElement x="159" y="13" width="229" height="42"/>
            <textElement>
               <font size="26"/>
            </textElement>
            <textFieldExpression class="java.lang.String">$F{name} + " Report"</textFieldExpression>
         </textField>
      </band>
   </title>
   <pageHeader>
      <band/>
   </pageHeader>
   <detail>
      <band height="122">
         <!--SUBREPORTS UNDER HERE-->
         <subreport isUsingCache="true">
            <reportElement positionType="Float" isPrintRepeatedValues="false" x="0" y="0" width="500" height="30"/>
            <dataSourceExpression>$P{FailedTestSteps}</dataSourceExpression>
            <subreportExpression>"subreport:FailedTestStepsReport"</subreportExpression>
         </subreport>
         <subreport isUsingCache="true">
            <reportElement positionType="Float" isPrintRepeatedValues="false" x="0" y="0" width="500" height="30"/>
            <dataSourceExpression>$P{TestCaseCoverage}</dataSourceExpression>
            <subreportExpression>"subreport:TestCaseCoverageChart"</subreportExpression>
         </subreport>
         <subreport isUsingCache="true">
            <reportElement positionType="Float" isPrintRepeatedValues="false" x="0" y="0" width="500" height="30"/>
            <dataSourceExpression>$P{TestStepResults}</dataSourceExpression>
            <subreportExpression>"subreport:TestStepResultsReport"</subreportExpression>
         </subreport>
      </band>
   </detail>
</jasperReport>]]></con:data><con:subreports>FailedTestStepsReport</con:subreports><con:subreports>TestCaseCoverageChart</con:subreports><con:subreports>TestStepResultsReport</con:subreports><con:scope>PROJECT</con:scope></con:reportTemplates><con:reportTemplates>
  <con:name>Changed Offer Test Suite Report</con:name>
  <con:reportType>TESTSUITE</con:reportType>
  <con:reportLevel>SUBREPORT</con:reportLevel>
  <con:nameInReport>FailedTestSteps</con:nameInReport>
  <con:data xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<jasperReport xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="FailedTestSteps" language="groovy" pageWidth="535" pageHeight="842" whenNoDataType="AllSectionsNoDetail" columnWidth="535" leftMargin="0" rightMargin="0" topMargin="0" bottomMargin="0" xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <property name="ireport.encoding" value="UTF-8"/>
   <template>"../../styles.jrtx"</template>
   <parameter name="FlowLayout" class="java.lang.Boolean"/>
   <field name="testStepName" class="java.lang.String"/>
   <field name="messages" class="java.util.List"/>
   <field name="detail" class="java.lang.String"/>
   <field name="icon" class="java.lang.String"/>
   <detail>
      <band height="101">
         <break>
            <reportElement positionType="Float" x="0" y="1" width="100" height="1">
               <printWhenExpression>!$P{FlowLayout}</printWhenExpression>
            </reportElement>
         </break>
         <textField isStretchWithOverflow="true">
            <reportElement style="Code" x="1" y="73" width="535" height="27"/>
            <textElement/>
            <textFieldExpression class="java.lang.String">$F{detail}</textFieldExpression>
         </textField>
         <textField isStretchWithOverflow="true">
            <reportElement style="ColumnHeader" x="1" y="4" width="534" height="30" isRemoveLineWhenBlank="true"/>
            <box bottomPadding="0">
               <pen lineStyle="Double"/>
               <topPen lineStyle="Double"/>
               <leftPen lineStyle="Double"/>
               <bottomPen lineStyle="Double"/>
               <rightPen lineStyle="Double"/>
            </box>
            <textElement verticalAlignment="Middle"/>
            <textFieldExpression class="java.lang.String">"Failed TestStep: " + $F{testStepName}</textFieldExpression>
         </textField>
         <textField>
            <reportElement x="0" y="34" width="535" height="28"/>
            <textElement/>
            <textFieldExpression class="java.lang.String">$F{messages}</textFieldExpression>
         </textField>
         <line>
            <reportElement x="1" y="67" width="534" height="3"/>
         </line>
      </band>
   </detail>
</jasperReport>]]></con:data>
  <con:description>NO DESC</con:description>
  <con:scope>PROJECT</con:scope>
  <con:dataSource>ModelItem Properties</con:dataSource>
</con:reportTemplates><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/><con:environment name="CI"><con:service type="REST" name="ChangedOfferAPI"><con:endpoint username="" password="" domain="" proxyHost="" proxyPort="" proxyUsername="" proxyPassword="">${#Project#endpoint}</con:endpoint></con:service><con:property><con:name>endpoint</con:name><con:value>http://10.92.41.155:8380</con:value></con:property><con:property><con:name>path</con:name><con:value>soma-ws-ci</con:value></con:property><con:property><con:name>after</con:name><con:value>2014-11-20T16:51:00</con:value></con:property><con:property><con:name>filter</con:name><con:value>web</con:value></con:property><con:property><con:name>product</con:name><con:value>PA</con:value></con:property><con:property><con:name>ActiveEnv</con:name><con:value>CI</con:value></con:property><con:property><con:name>username</con:name><con:value>somapi-autotest</con:value></con:property><con:property><con:name>password</con:name><con:value>p4$$W0rd</con:value></con:property><con:databaseConnectionContainer><con:databaseConnection><con:name>Setup</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUP/APPCAr35ex@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password/></con:databaseConnection><con:databaseConnection><con:name>Snp</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SETUPSNAPSHOT/APPCSun445@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Base</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:SetupCIbase/APPC53Bqwz@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Procs</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:setupciprocs/APPC9qscvB@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString><con:password>y</con:password></con:databaseConnection></con:databaseConnectionContainer></con:environment><con:environment name="QA"><con:service type="REST" name="ChangedOfferAPI"><con:endpoint/></con:service><con:property><con:name>endpoint</con:name><con:value/></con:property><con:property><con:name>path</con:name><con:value/></con:property><con:property><con:name>after</con:name><con:value/></con:property><con:property><con:name>filter</con:name><con:value/></con:property><con:property><con:name>product</con:name><con:value/></con:property><con:property><con:name>ActiveEnv</con:name><con:value/></con:property><con:property><con:name>username</con:name><con:value/></con:property><con:property><con:name>password</con:name><con:value/></con:property><con:databaseConnectionContainer><con:databaseConnection><con:name>Setup</con:name><con:connectionString>jdbc:oracle:thin:SETUP/APPCAr35ex@//guthsc9sl11.grc-network.net:1521/appdbci</con:connectionString></con:databaseConnection><con:databaseConnection><con:name>Snp</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:x</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Base</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection><con:databaseConnection><con:name>Procs</con:name><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:x/PASS_VALUE@127.0.0.1:1521:z</con:connectionString><con:password>y</con:password></con:databaseConnection></con:databaseConnectionContainer></con:environment></con:soapui-project>